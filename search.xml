<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>逆向工程学习录——Detour / Hook Functions</title>
    <url>/2020/12/29/detour-hook-functions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在游戏逆向中我们需要在某个执行函数的地方添加自己的代码。<br>案例：HackMe.exe</p>
<p>每按一次空格扣两滴血<br>目标：hook扣血函数，改为double加血<br><img src="https://img-blog.csdnimg.cn/20201229150322967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>拉进Od后定位到扣血的函数如下图</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">00BB2740    55              push ebp
00BB2741    8BEC            mov ebp,esp
00BB2743    81EC CC000000   sub esp,0xCC
00BB2749    53              push ebx
00BB274A    56              push esi                                 ; HackMe.

00BB274B    57              push edi                                 ; HackMe.

00BB274C    51              push ecx                                 ; HackMe.

00BB274D    8DBD 34FFFFFF   lea edi,dword ptr ss:[ebp-0xCC]
00BB2753    B9 33000000     mov ecx,0x33
00BB2758    B8 CCCCCCCC     mov eax,0xCCCCCCCC
00BB275D    F3:AB           rep stos dword ptr es:[edi]
00BB275F    59              pop ecx                                  ; kernel32.771F6359
00BB2760    894D F8         mov dword ptr ss:[ebp-0x8],ecx           ; HackMe.

00BB2763    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]
00BB2766    8B08            mov ecx,dword ptr ds:[eax]
00BB2768    2B4D 08         sub ecx,dword ptr ss:[ebp+0x8]
00BB276B    8B55 F8         mov edx,dword ptr ss:[ebp-0x8]
00BB276E    890A            mov dword ptr ds:[edx],ecx               ; HackMe.

00BB2770    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]
00BB2773    8338 00         cmp dword ptr ds:[eax],0x0
00BB2776    7F 07           jg short HackMe.00BB277F
00BB2778    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]
00BB277B    C640 08 01      mov byte ptr ds:[eax+0x8],0x1
00BB277F    5F              pop edi                                  ; kernel32.771F6359
00BB2780    5E              pop esi                                  ; kernel32.771F6359
00BB2781    5B              pop ebx                                  ; kernel32.771F6359
00BB2782    8BE5            mov esp,ebp
00BB2784    5D              pop ebp                                  ; kernel32.771F6359
00BB2785    C2 0400         retn 0x4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>地址00BB2768 sub ecx,dword ptr ss:[ebp+0x8]<br>我们想要把该指令改为jmp [ourFunc]然后在ourFunc中在jmp回来。<br><img src="https://img-blog.csdnimg.cn/20201229150840103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>代码实现</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span></span>

<span class="token keyword">bool</span> <span class="token function">Hook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> toHook<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> ourFunct<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	DWORD curProtection<span class="token punctuation">;</span>
	<span class="token function">VirtualProtect</span><span class="token punctuation">(</span>toHook<span class="token punctuation">,</span> len<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>curProtection<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">memset</span><span class="token punctuation">(</span>toHook<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

	DWORD relativeAddress <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>ourFunct <span class="token operator">-</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>toHook<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>

	<span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span>toHook <span class="token operator">=</span> <span class="token number">0xE9</span><span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>toHook <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> relativeAddress<span class="token punctuation">;</span>

	DWORD temp<span class="token punctuation">;</span>
	<span class="token function">VirtualProtect</span><span class="token punctuation">(</span>toHook<span class="token punctuation">,</span> len<span class="token punctuation">,</span> curProtection<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

DWORD jmpBackAddy<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">ourFunct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	__asm <span class="token punctuation">&#123;</span>
		add ecx<span class="token punctuation">,</span> ecx
		mov edx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span>
		jmp<span class="token punctuation">[</span>jmpBackAddy<span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

DWORD WINAPI <span class="token function">MainThread</span><span class="token punctuation">(</span>LPVOID param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> hookLength <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
	DWORD hookAddress <span class="token operator">=</span> <span class="token number">0xBB2768</span><span class="token punctuation">;</span>
	jmpBackAddy <span class="token operator">=</span> hookAddress <span class="token operator">+</span> hookLength<span class="token punctuation">;</span>

	<span class="token function">Hook</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>hookAddress<span class="token punctuation">,</span> ourFunct<span class="token punctuation">,</span> hookLength<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetAsyncKeyState</span><span class="token punctuation">(</span>VK_ESCAPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">FreeLibraryAndExitThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HMODULE<span class="token punctuation">)</span>param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

BOOL WINAPI <span class="token function">DllMain</span><span class="token punctuation">(</span>HINSTANCE hModule<span class="token punctuation">,</span> DWORD dwReason<span class="token punctuation">,</span> LPVOID lpReserved<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>dwReason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>
		<span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MainThread<span class="token punctuation">,</span> hModule<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于jmp指令最少占5字节，所以我们必须覆写连同目标指令下一条指令<br><img src="https://img-blog.csdnimg.cn/20201229151005170.png"><br>连起来为6字节</p>
<p>运行HackMe 并注入dll<br><img src="https://img-blog.csdnimg.cn/20201229151118863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>跳转成功<br><img src="https://img-blog.csdnimg.cn/20201229151151317.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20201229151226638.png"></p>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Detour Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>test encrytion</title>
    <url>/2020/05/01/encryption/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b7a9444bdf9ec67159fa957423d5943978cc67273067e801e38bb4ad457a9203">10d79030e8222445804370796b90fca14b3382df4730eb0fe3a9f1aa6acbfdf977f308135c251cf4014cb9472e5eb4c7010efd08fb0e3bdf1ebef1844b47b7bbdce99f87d5af857ca0ff659bfd7ff8403889b6c438821c099230c528e1e072086db67c3268f0c3fbef4285ecdfb74d10c44a10a54b42bc087ce2562c8b1b0d82c747e40ef6687175228e1aa7de665ca0630685dfdfd49a11eb58a99d311c252752a333719030d038bb8d865dd3e440bff3cd209fe3ca3a26fb5772705760421ee28b997bb286ef46d1032c18074a8e246f2b089c181f769c3ff273587971e21fb48c46d1068c2933cce24d3f3220cc3682f130f26d5e47aa28d728332b46e808627eb02d3a45d7ff8ef7c9018b3a38bb9265de9715d4138919ea7edf15d7fcf47bbec73ee7481809cf81c7654c32120f9fca71f797eb839cfca7da823d550b0bacafeee1b0dea1a24995a46123071540f9c9eca491e67036879d66d85c84f9a9b8de1dec8aeed33c0ef421b74b4979ab97190a33c6c656a230454cb50285c0aad476b4725f22580b4bfb76c67f32bbdaf1edb8455d722e16d974910ba31ca7f608d3f318c26f6f6d0711e2041913c7ec3a9f829cb2339ef122b6ebed31d6159befc28c5b18f5933e02d369566cec07b9a4810d820e1a15eba658e8a05d41b8b2857500dacad8a4dcf76efdbf95ec53f59b0e8f0e9e7ec7a8c64c6530aa365a10c294d8413e278a7cfdbbd6fe82f5e50bc5b6acfe5de3e3d9c10533ad8a9a28defea732d1d23cf43f20710848399b586e88117428d9b344114e232ba0143e66172cdf59f66556b35dd73b016955f88673cb452d984b6b3c28999e800b7c911a4135fedd22d3a1d49db0d2746d278c81f31427a6aea1f0ec54ac89afa215eeafb509750990d19a04bbbb2ad140d96355a9646bd9c19193d5487cb492f071f53399ecd8fd61a50e6a0907093122b6598d53e803b903b852c719e898c11dbb6aa0c129a2ed853970296fd7087458786294a27cc2746b96d6f0e1f200babe1d513ffb957fb1095cc96ce9223b15e56f9eb627982b93885870b09ae36b00b882410744</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>记一次用python做的多元线性回归分析</title>
    <url>/2020/01/24/python-duo-yuan-xian-xing-hui-gui-fen-xi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p>调查分析某鱼主播收到付费礼物收入和免费礼物收入<br>模型如下：<br><img src="https://img-blog.csdnimg.cn/20200124123603196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="; 抓取数据"></a><a name="_4">;</a> 抓取数据</h3><p>主播相关信息</p>
<blockquote>
<p>主播名,主播编号,礼物总收入,付费礼物收入,免费礼物收入,礼物人数,弹幕人数,直播时长,人气峰值,订阅变化,活跃观众,订阅数,抓取时间,直播类型</p>
</blockquote>
<p>弹幕相关信息</p>
<blockquote>
<p>主播编号,用户名,用户id,用户全站等级,是否粉丝弹幕标记,徽章昵称,用户粉丝等级,弹幕内容,抓取时间,cid</p>
</blockquote>
<h3 id="清洗转换数据"><a href="#清洗转换数据" class="headerlink" title="清洗转换数据"></a>清洗转换数据</h3><p>根据模型要求，从弹幕数据中计算出所需自变量的值合并到主播相关信息中<br>并做简单清洗工作</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> re
<span class="token keyword">import</span> os

DataDF <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'清洗数据.csv'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">)</span>

streamerId<span class="token operator">=</span>DataDF<span class="token punctuation">[</span><span class="token string">'主播编号'</span><span class="token punctuation">]</span>
paidGiftIncome<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'付费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
freeGifgIncome<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

subscribeNum<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'订阅数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fansNum<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'活跃观众'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
streamType<span class="token operator">=</span>DataDF<span class="token punctuation">[</span><span class="token string">'直播类型'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
topHot<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'人气峰值'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

userLevelVariance<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
fansLevelVariance<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
fansBarrageNum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
nfansBarrageNum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

path <span class="token operator">=</span> <span class="token string">'danmu/'</span>
files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> f <span class="token keyword">in</span> DataDF<span class="token punctuation">[</span><span class="token string">'主播编号'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token operator">+</span><span class="token string">'.csv'</span>
    files<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
    df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token builtin">file</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>keep_default_na<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    dupDf<span class="token operator">=</span>df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token string">'用户id'</span><span class="token punctuation">,</span><span class="token string">'last'</span><span class="token punctuation">)</span>

    userLevelVariance<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>dupDf<span class="token punctuation">[</span><span class="token string">'用户全站等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    fansLevelVariance<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>dupDf<span class="token punctuation">[</span><span class="token string">'用户粉丝等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    mid<span class="token operator">=</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>dupDf<span class="token punctuation">[</span><span class="token string">'用户全站等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    fansBarrageNum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'用户全站等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">>=</span> mid <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

    nfansBarrageNum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'用户全站等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">&lt;</span> mid <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

dataframe <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'主播id'</span><span class="token punctuation">:</span>streamerId<span class="token punctuation">,</span><span class="token string">'ln关注数'</span><span class="token punctuation">:</span>subscribeNum<span class="token punctuation">,</span><span class="token string">'ln粉丝数'</span><span class="token punctuation">:</span>fansNum<span class="token punctuation">,</span><span class="token string">'直播类型'</span><span class="token punctuation">:</span>streamType<span class="token punctuation">,</span><span class="token string">'ln人气峰值'</span><span class="token punctuation">:</span>topHot<span class="token punctuation">,</span><span class="token string">'用户等级方差'</span><span class="token punctuation">:</span>userLevelVariance<span class="token punctuation">,</span><span class="token string">'粉丝等级方差'</span><span class="token punctuation">:</span>fansLevelVariance<span class="token punctuation">,</span><span class="token string">'ln(粉丝弹幕数量)'</span><span class="token punctuation">:</span>fansBarrageNum<span class="token punctuation">,</span><span class="token string">'ln(非粉丝弹幕数量)'</span><span class="token punctuation">:</span>nfansBarrageNum<span class="token punctuation">,</span><span class="token string">'收费礼物收入'</span><span class="token punctuation">:</span>paidGiftIncome<span class="token punctuation">,</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">:</span>freeGifgIncome<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

dataframe<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"data.csv"</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h3><p>讲导出的data文件作为数据全集，划分数据集后使用sklearn进行回归分析</p>
<p><img src="https://img-blog.csdnimg.cn/2020012412441252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200124124512583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200124124533494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>最佳拟合线:截距 [-4.6001933 -2.76872536] ,回归系数： [[-0.46457999 0.85992775 0.96507715 0.59494828 0.02850018 0.00734763<br>-0.10940398 0.17530741]<br>[-0.01520268 0.93765167 0.14050881 -0.02137043 0.00608183 -0.02255079<br>0.3406813 -0.27023856]]<br><img src="https://img-blog.csdnimg.cn/20200124124546857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200124124552684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token punctuation">,</span>Series
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">)</span>

newDf <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'ln关注数'</span><span class="token punctuation">,</span><span class="token string">'ln粉丝数'</span><span class="token punctuation">,</span><span class="token string">'直播类型'</span><span class="token punctuation">,</span><span class="token string">'ln人气峰值'</span><span class="token punctuation">,</span><span class="token string">'用户等级方差'</span><span class="token punctuation">,</span><span class="token string">'粉丝等级方差'</span><span class="token punctuation">,</span><span class="token string">'ln(粉丝弹幕数量)'</span><span class="token punctuation">,</span><span class="token string">'ln(非粉丝弹幕数量)'</span><span class="token punctuation">,</span><span class="token string">'收费礼物收入'</span><span class="token punctuation">,</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head:'</span><span class="token punctuation">,</span>newDf<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\nShape:'</span><span class="token punctuation">,</span>newDf<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

X<span class="token operator">=</span> newDf<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'ln关注数'</span><span class="token punctuation">,</span><span class="token string">'ln粉丝数'</span><span class="token punctuation">,</span><span class="token string">'直播类型'</span><span class="token punctuation">,</span><span class="token string">'ln人气峰值'</span><span class="token punctuation">,</span><span class="token string">'用户等级方差'</span><span class="token punctuation">,</span><span class="token string">'粉丝等级方差'</span><span class="token punctuation">,</span><span class="token string">'ln(粉丝弹幕数量)'</span><span class="token punctuation">,</span><span class="token string">'ln(非粉丝弹幕数量)'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
Y<span class="token operator">=</span> newDf<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'收费礼物收入'</span><span class="token punctuation">,</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'STSong'</span><span class="token punctuation">]</span>
plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>

plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>df<span class="token punctuation">.</span>ln人气峰值<span class="token punctuation">,</span>df<span class="token punctuation">.</span>收费礼物收入<span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">,</span>label <span class="token operator">=</span> <span class="token string">"Exam Data"</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"giftIncome"</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>newDf<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

newDf<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>newDf<span class="token punctuation">,</span> x_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ln关注数'</span><span class="token punctuation">,</span><span class="token string">'ln粉丝数'</span><span class="token punctuation">,</span><span class="token string">'直播类型'</span><span class="token punctuation">,</span><span class="token string">'ln人气峰值'</span><span class="token punctuation">,</span><span class="token string">'用户等级方差'</span><span class="token punctuation">,</span><span class="token string">'粉丝等级方差'</span><span class="token punctuation">,</span><span class="token string">'ln(粉丝弹幕数量)'</span><span class="token punctuation">,</span><span class="token string">'ln(非粉丝弹幕数量)'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'收费礼物收入'</span><span class="token punctuation">,</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aspect<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>kind <span class="token operator">=</span> <span class="token string">'reg'</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>
a  <span class="token operator">=</span> model<span class="token punctuation">.</span>intercept_
b <span class="token operator">=</span> model<span class="token punctuation">.</span>coef_
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最佳拟合线:截距"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token string">",回归系数："</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>

score <span class="token operator">=</span> model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>

Y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Y_pred<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"predict"</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Y_pred<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"predict"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_test<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"upper right"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"自变量"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'礼物收入'</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-如何划分和组织内存</title>
    <url>/2021/07/12/cao-zuo-xi-tong-ru-he-hua-fen-yu-zu-zhi-nei-cun/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分段，分页？"><a href="#分段，分页？" class="headerlink" title="分段，分页？"></a>分段，分页？</h2><p>第一点，从<strong>表示方式和状态确定角度</strong>考虑。段的长度大小不一，用什么数据结构表示一个段，如何确定一个段已经分配还是空闲呢？而页的大小固定，我们只需用位图就能表示页的分配与释放。</p>
<p>比方说，位图中第 1 位为 1，表示第一个页已经分配；位图中第 2 位为 0，表示第二个页是空闲，每个页的开始地址和大小都是固定的。</p>
<p>第二点，从<strong>内存碎片的利用</strong>看，由于段的长度大小不一，更容易产生内存碎片，例如内存中有 A 段（内存地址：0～5000）、 B 段（内存地址：5001～8000）、C 段（内存地址：8001～9000），这时释放了 B 段，然后需要给 D 段分配内存空间，且 D 段长度为 5000。你立马就会发现 A 段和 C 段之间的空间（B 段）不能满足，只能从 C 段之后的内存空间开始分配，随着程序运行，这些情况会越来越多。段与段之间存在着不大不小的空闲空间，内存总的空闲空间很多，但是放不下一个新段。而页的大小固定，分配最小单位是页，页也会产生碎片，比如我需要请求分配 4 个页，但在内存中从第 1～3 个页是空闲的，第 4 个页是分配出去了，第 5 个页是空闲的。这种情况下，我们通过修改页表的方式，就能让连续的虚拟页面映射到非连续的物理页面。</p>
<p>第三点，从<strong>内存和硬盘的数据交换效率</strong>考虑，当内存不足时，操作系统希望把内存中的一部分数据写回硬盘，来释放内存。这就涉及到内存和硬盘交换数据，交换单位是段还是页？如果是段的话，其大小不一，A 段有 50MB，B 段有 1KB，A、B 段写回硬盘的时间也不同，有的段需要时间长，有的段需要时间短，硬盘的空间分配也会有上面第二点同样的问题，这样会导致系统性能抖动。如果每次交换一个页，则没有这些问题。</p>
<p><strong>段最大的问题是使得虚拟内存地址空间，难于实施</strong></p>
<p>综上，我们自然选择分页模式来管理内存，其实现在所有的商用操作系统都使用了分页模式管理内存。我们用 4KB 作为页大小，这也正好对应 x86 CPU 长模式下 MMU 4KB 的分页方式。</p>
<h2 id="页内存表示形式"><a href="#页内存表示形式" class="headerlink" title="页内存表示形式"></a>页内存表示形式</h2><p>我们使用分页模型来管理内存。首先是把物理内存空间分成 4KB 大小页，这页表示从地址 x 开始到 x+0xFFF 这一段的物理内存空间，x 必须是 0x1000 对齐的。这一段 x+0xFFF 的内存空间，称为内存页。在逻辑上的结构图如下所示：</p>
<p><img src="https://static001.geekbang.org/resource/image/de/93/deb1435e59110ac9e50738c9a363db93.jpg?wh=3255*3005"></p>
<p>上图这是一个接近真实机器的情况，不过一定不要忘记前面的内存布局示图，真实的物理内存地址空间不是连续的，这中间可能有空洞，可能是显存，也可能是外设的寄存器。</p>
<p>真正的物理内存空间布局信息来源于 e820map_t 结构数组，之前的初始化中，我们已经将其转换成 phymmarge_t 结构数组了，由 kmachbsp-&gt;mb_e820expadr 指向。</p>
<p>我们需要页的状态、页的地址、页的分配记数、页的类型、页的链表，你自然就会想到，这些信息可以用一个 C 语言结构体封装起来</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//内存空间地址描述符标志</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MSADFLGS</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u32_t</span> mf_olkty<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//挂入链表的类型</span>
    <span class="token class-name">u32_t</span> mf_lstty<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//是否挂入链表</span>
    <span class="token class-name">u32_t</span> mf_mocty<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//分配类型，被谁占用了，内核还是应用或者空闲</span>
    <span class="token class-name">u32_t</span> mf_marty<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//属于哪个区</span>
    <span class="token class-name">u32_t</span> mf_uindx<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">;</span>   <span class="token comment">//分配计数</span>
<span class="token punctuation">&#125;</span><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">msadflgs_t</span><span class="token punctuation">;</span> 
<span class="token comment">//物理地址和标志  </span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_PHYADRFLGS</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> paf_alloc<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//分配位</span>
    <span class="token class-name">u64_t</span> paf_shared<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//共享位</span>
    <span class="token class-name">u64_t</span> paf_swap<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//交换位</span>
    <span class="token class-name">u64_t</span> paf_cache<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//缓存位</span>
    <span class="token class-name">u64_t</span> paf_kmap<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//映射位</span>
    <span class="token class-name">u64_t</span> paf_lock<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//锁定位</span>
    <span class="token class-name">u64_t</span> paf_dirty<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//脏位</span>
    <span class="token class-name">u64_t</span> paf_busy<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//忙位</span>
    <span class="token class-name">u64_t</span> paf_rv2<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>       <span class="token comment">//保留位</span>
    <span class="token class-name">u64_t</span> paf_padrs<span class="token operator">:</span><span class="token number">52</span><span class="token punctuation">;</span>    <span class="token comment">//页物理地址位</span>
<span class="token punctuation">&#125;</span><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">phyadrflgs_t</span><span class="token punctuation">;</span>
<span class="token comment">//内存空间地址描述符</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MSADSC</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">list_h_t</span> md_list<span class="token punctuation">;</span>           <span class="token comment">//链表</span>
    <span class="token class-name">spinlock_t</span> md_lock<span class="token punctuation">;</span>         <span class="token comment">//保护自身的自旋锁</span>
    <span class="token class-name">msadflgs_t</span> md_indxflgs<span class="token punctuation">;</span>     <span class="token comment">//内存空间地址描述符标志</span>
    <span class="token class-name">phyadrflgs_t</span> md_phyadrs<span class="token punctuation">;</span>    <span class="token comment">//物理地址和标志</span>
    <span class="token keyword">void</span><span class="token operator">*</span> md_odlink<span class="token punctuation">;</span>            <span class="token comment">//相邻且相同大小msadsc的指针</span>
<span class="token punctuation">&#125;</span><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">msadsc_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="内存区"><a href="#内存区" class="headerlink" title="内存区"></a>内存区</h2><p>内存区和内存页不同，内存区只是一个逻辑上的概念，并不是硬件上必需的，就是说就算没有内存区，也毫不影响硬件正常工作；但是没有内存页是绝对不行的。</p>
<p><img src="https://static001.geekbang.org/resource/image/af/8b/af614598562750407340e6db7a9e868b.jpg?wh=3042*2805"></p>
<p><strong>硬件区</strong>，它占用物理内存低端区域，地址区间为 0~32MB。从名字就能看出来，这个内存区域是给硬件使用的，我们不是使用虚拟地址吗？虚拟地址不是和物理地址无关吗，一个虚拟可以映射到任一合法的物理地址。</p>
<p>但凡事总有例外，虚拟地址主要依赖于 CPU 中的 MMU，但有很多外部硬件能直接和内存交换数据，常见的有 DMA，并且它只能访问低于 24MB 的物理内存。这就导致了我们很多内存页不能随便分配给这些设备，但是我们只要规定硬件区分配内存页就好，这就是硬件区的作用。</p>
<p><strong>内核区</strong>，内核也要使用内存，但是内核同样也是运行在虚拟地址空间，就需要有一段物理内存空间和内核的虚拟地址空间是线性映射关系。</p>
<p><strong>应用区</strong>，这个区域主是给应用用户态程序使用。应用程序使用虚拟地址空间，一开始并不会为应用一次性分配完所需的所有物理内存，而是按需分配，即应用用到一页就分配一个页。</p>
<p>如果访问到一个没有与物理内存页建立映射关系的虚拟内存页，这时候 CPU 就会产生缺页异常。最终这个缺页异常由操作系统处理，操作系统会分配一个物理内存页，并建好映射关系。</p>
<p>这是因为这种情况往往分配的是单个页面，所以为了给单个页面提供快捷的内存请求服务，就需要把离散的单页、或者是内核自身需要建好页表才可以访问的页面，统统收归到用户区。</p>
<p>但是我们要如何表示一个内存区呢？和先前物理内存页面一样，我们需要定义一个数据结构，来表示一个内存区的开始地址和结束地址，里面有多少个物理页面，已经分配了多少个物理页面，剩下多少等等。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_TYPE_HWAD</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_TYPE_KRNL</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_TYPE_PROC</span> <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_HWAD_LSTART</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_HWAD_LSZ</span> <span class="token expression"><span class="token number">0x2000000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_HWAD_LEND</span> <span class="token expression"><span class="token punctuation">(</span>MA_HWAD_LSTART<span class="token operator">+</span>MA_HWAD_LSZ<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_KRNL_LSTART</span> <span class="token expression"><span class="token number">0x2000000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_KRNL_LSZ</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x40000000</span><span class="token operator">-</span><span class="token number">0x2000000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_KRNL_LEND</span> <span class="token expression"><span class="token punctuation">(</span>MA_KRNL_LSTART<span class="token operator">+</span>MA_KRNL_LSZ<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_PROC_LSTART</span> <span class="token expression"><span class="token number">0x40000000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_PROC_LSZ</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xffffffff</span><span class="token operator">-</span><span class="token number">0x40000000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MA_PROC_LEND</span> <span class="token expression"><span class="token punctuation">(</span>MA_PROC_LSTART<span class="token operator">+</span>MA_PROC_LSZ<span class="token punctuation">)</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MEMAREA</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">list_h_t</span> ma_list<span class="token punctuation">;</span>             <span class="token comment">//内存区自身的链表</span>
    <span class="token class-name">spinlock_t</span> ma_lock<span class="token punctuation">;</span>           <span class="token comment">//保护内存区的自旋锁</span>
    <span class="token class-name">uint_t</span> ma_stus<span class="token punctuation">;</span>               <span class="token comment">//内存区的状态</span>
    <span class="token class-name">uint_t</span> ma_flgs<span class="token punctuation">;</span>               <span class="token comment">//内存区的标志 </span>
    <span class="token class-name">uint_t</span> ma_type<span class="token punctuation">;</span>               <span class="token comment">//内存区的类型</span>
    <span class="token class-name">sem_t</span> ma_sem<span class="token punctuation">;</span>                 <span class="token comment">//内存区的信号量</span>
    <span class="token class-name">wait_l_head_t</span> ma_waitlst<span class="token punctuation">;</span>     <span class="token comment">//内存区的等待队列</span>
    <span class="token class-name">uint_t</span> ma_maxpages<span class="token punctuation">;</span>           <span class="token comment">//内存区总的页面数</span>
    <span class="token class-name">uint_t</span> ma_allocpages<span class="token punctuation">;</span>         <span class="token comment">//内存区分配的页面数</span>
    <span class="token class-name">uint_t</span> ma_freepages<span class="token punctuation">;</span>          <span class="token comment">//内存区空闲的页面数</span>
    <span class="token class-name">uint_t</span> ma_resvpages<span class="token punctuation">;</span>          <span class="token comment">//内存区保留的页面数</span>
    <span class="token class-name">uint_t</span> ma_horizline<span class="token punctuation">;</span>          <span class="token comment">//内存区分配时的水位线</span>
    <span class="token class-name">adr_t</span> ma_logicstart<span class="token punctuation">;</span>          <span class="token comment">//内存区开始地址</span>
    <span class="token class-name">adr_t</span> ma_logicend<span class="token punctuation">;</span>            <span class="token comment">//内存区结束地址</span>
    <span class="token class-name">uint_t</span> ma_logicsz<span class="token punctuation">;</span>            <span class="token comment">//内存区大小</span>
    <span class="token comment">//还有一些结构我们这里不关心。后面才会用到</span>
<span class="token punctuation">&#125;</span><span class="token class-name">memarea_t</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关于内存区的数据结构我们就设计好了，但是这仍然不能让我们高效地分配内存，因为我们没有把内存区数据结构和内存页面数据结构关联起来，如果我们现在要分配内存页依然要遍历扫描 msadsc_t 结构数组，这和扫描位图没有本质的区别。</p>
<h2 id="组织内存页"><a href="#组织内存页" class="headerlink" title="组织内存页"></a>组织内存页</h2><p>照我们之前对 msadsc_t 结构的定义，组织内存页就是组织 msadsc_t 结构，而 msadsc_t 结构中就有一个链表，你大概已经猜到了，我们组织 msadsc_t 结构正是通过另一个数据结构中的链表，将 msadsc_t 结构串连在其中的。</p>
<p>我们需要更加科学合理地组织 msadsc_t 结构，下面我们来定义一个挂载 msadsc_t 结构的数据结构，它其中需要锁、状态、msadsc_t 结构数量，挂载 msadsc_t 结构的链表、和一些统计数据。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_BAFHLST</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">spinlock_t</span> af_lock<span class="token punctuation">;</span>    <span class="token comment">//保护自身结构的自旋锁</span>
    <span class="token class-name">u32_t</span> af_stus<span class="token punctuation">;</span>         <span class="token comment">//状态 </span>
    <span class="token class-name">uint_t</span> af_oder<span class="token punctuation">;</span>        <span class="token comment">//页面数的位移量</span>
    <span class="token class-name">uint_t</span> af_oderpnr<span class="token punctuation">;</span>     <span class="token comment">//oder对应的页面数比如 oder为2那就是1&lt;&lt;2=4</span>
    <span class="token class-name">uint_t</span> af_fobjnr<span class="token punctuation">;</span>      <span class="token comment">//多少个空闲msadsc_t结构，即空闲页面</span>
    <span class="token class-name">uint_t</span> af_mobjnr<span class="token punctuation">;</span>      <span class="token comment">//此结构的msadsc_t结构总数，即此结构总页面</span>
    <span class="token class-name">uint_t</span> af_alcindx<span class="token punctuation">;</span>     <span class="token comment">//此结构的分配计数</span>
    <span class="token class-name">uint_t</span> af_freindx<span class="token punctuation">;</span>     <span class="token comment">//此结构的释放计数</span>
    <span class="token class-name">list_h_t</span> af_frelst<span class="token punctuation">;</span>    <span class="token comment">//挂载此结构的空闲msadsc_t结构</span>
    <span class="token class-name">list_h_t</span> af_alclst<span class="token punctuation">;</span>    <span class="token comment">//挂载此结构已经分配的msadsc_t结构</span>
<span class="token punctuation">&#125;</span><span class="token class-name">bafhlst_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了 bafhlst_t 数据结构，我们只是有了挂载 msadsc_t 结构的地方，这并没有做到科学合理。但是，如果我们把多个 bafhlst_t 数据结构组织起来，形成一个 bafhlst_t 结构数组，并且把这个 bafhlst_t 结构数组放在一个更高的数据结构中，这个数据结构就是内存分割合并数据结构——memdivmer_t，那情况就不一样了。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MDIVMER_ARR_LMAX</span> <span class="token expression"><span class="token number">52</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MEMDIVMER</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">spinlock_t</span> dm_lock<span class="token punctuation">;</span>      <span class="token comment">//保护自身结构的自旋锁</span>
    <span class="token class-name">u32_t</span> dm_stus<span class="token punctuation">;</span>           <span class="token comment">//状态</span>
    <span class="token class-name">uint_t</span> dm_divnr<span class="token punctuation">;</span>         <span class="token comment">//内存分配次数</span>
    <span class="token class-name">uint_t</span> dm_mernr<span class="token punctuation">;</span>         <span class="token comment">//内存合并次数</span>
    <span class="token class-name">bafhlst_t</span> dm_mdmlielst<span class="token punctuation">[</span>MDIVMER_ARR_LMAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//bafhlst_t结构数组</span>
    <span class="token class-name">bafhlst_t</span> dm_onemsalst<span class="token punctuation">;</span>  <span class="token comment">//单个的bafhlst_t结构</span>
<span class="token punctuation">&#125;</span><span class="token class-name">memdivmer_t</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那问题来了，内存不是只有两个标准操作吗，这里我们为什么要用分割和合并呢？这其实取意于我们的内存分配、释放算法，对这个算法而言分配内存就是分割内存，而释放内存就是合并内存。</p>
<p>如果 memdivmer_t 结构中 dm_mdmlielst 数组只是一个数组，那是没有意义的。我们正是要通过 dm_mdmlielst 数组，来划分物理内存地址不连续的 msadsc_t 结构。dm_mdmlielst 数组中第 0 个元素挂载单个 msadsc_t 结构，它们的物理内存地址可能对应于 0x1000，0x3000，0x5000。</p>
<p>dm_mdmlielst 数组中第 1 个元素挂载两个连续的 msadsc_t 结构，它们的物理内存地址可能对应于 0x8000～0x9FFF，0xA000～0xBFFF；dm_mdmlielst 数组中第 2 个元素挂载 4 个连续的 msadsc_t 结构，它们的物理内存地址可能对应于 0x100000～0x103FFF，0x104000～0x107FFF……</p>
<p>依次类推，dm_mdmlielst 数组挂载连续 msadsc_t 结构的数量等于用 1 左移其数组下标，如数组下标为 3，那结果就是 8（1&lt;&lt;3）个连续的 msadsc_t 结构。</p>
<p><strong>我们并不在意其中第一个 msadsc_t 结构对应的内存物理地址从哪里开始，但是第一个 msadsc_t 结构与最后一个 msadsc_t 结构，它们之间的内存物理地址是连续的。</strong></p>
<p><img src="https://static001.geekbang.org/resource/image/8a/01/8af79b011589c5081815a43a2211e901.jpg?wh=5812*4832" alt="页面组织结构示意图"></p>
<p>每个内存区 memarea_t 结构中包含一个内存分割合并 memdivmer_t 结构，而在 memdivmer_t 结构中又包含 dm_mdmlielst 数组。在 dm_mdmlielst 数组中挂载了多个 msadsc_t 结构。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-如何管理内存对象</title>
    <url>/2021/07/12/cao-zuo-xi-tong-ru-he-guan-li-nei-cun-dui-xiang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>git复习进阶及命令速查</title>
    <url>/2021/07/07/git-shi-yong-fu-xi-jin-jie-su-cha-shou-ce/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h2 id="主要操作流程图"><a href="#主要操作流程图" class="headerlink" title="主要操作流程图"></a>主要操作流程图</h2><p><img src="https://pic.innnovation.cn//img/20210708083941.jpeg" alt="git原理图"></p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>版本控制系统(VCS)主要分为中央式和分布式</p>
<ul>
<li>中央式：将代码保存在中央服务器，加入编码的成员均与服务器通讯，在本地完成代码，上传/同步他人代码，代码由服务器统一管理</li>
<li>分布式：所有参与开发的人员都维护自己的本地仓库，对自己本地仓库提交切换分支等操作均在本地完成，远程仓库由仓库管理员管理分配权限，本地仓库和远程仓库有时候会各自维护自己的分支，而远程仓库更多只是起到团队同步代码的作用</li>
</ul>
<p>git本地存在：本地仓库，暂存区和工作目录，git init时所在的目录就是工作目录，暂存区和本地仓库都存在.git隐藏文件中。</p>
<p>git文件有两种状态：是否被跟踪，未被跟踪的文件就和资源文件管理器中的普通文件一样，可以随意修改删除，但是被git add 添加到git追踪的文件本地仓库就会对他们负责，通过git status查看他们的状态来进行相应的操作。</p>
<p>一个项目中的gitignore文件指定了git要忽略的文件类型而不追踪他们。</p>
<p><img src="https://pic.innnovation.cn//img/20210707202808.png" alt="某个springboot的gitignore文件"></p>
<p>前面所提到的暂存区是当我们在工作目录中进行文件操作时，要先添加到暂存区，然后再将暂存区中的文件快照提交到本地仓库，这样就实现了各个快照之间可以随意的进行回滚操作。</p>
<h3 id="git对象"><a href="#git对象" class="headerlink" title="git对象"></a>git对象</h3><p>从git设计者角度考虑，git存在一套内容寻址的文件系统，本质上是K-V键值对，通过key找value，从源码层面看，git将指针保存在git对象中，根据指针来找到需要的文件内容。git对象分为：commit tree blob对象。</p>
<p><img src="https://img-blog.csdnimg.cn/20190318195449103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhb185NA==,size_16,color_FFFFFF,t_70" alt="git对象"></p>
<p>commit结构体包含 tree_ptr,parent_ptr,author,time …</p>
<p>tree结构记录文件列表list<E></p>
<p>每个文件的内容为blob</p>
<p>commit对象记录每次提交到本地快照，每次提交一个就会让上一个commit对象指向新的commit（本质就是一个链表），当我们进行恢复commit操作时，就通过id来找到我们需要恢复的commit节点即可。而HEAD对象其实就是指向最近一个提交的commit，也就是最后一个commit</p>
<h3 id="引用（分支）"><a href="#引用（分支）" class="headerlink" title="引用（分支）"></a>引用（分支）</h3><p>在使用git log 命令时我们会看到一些HEAD-&gt;master,origin/master,origin/HEAD等字样，他们本质上就是指向commit的引用，如果理解了前面的commit对象，就知道引用其实就是该对象名的一个别名（可以简单理解为C++的引用）</p>
<p>如果你想在某处创建 <code>branch</code> ，只需要输入一行 <code>git branch 名称</code></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUzMzU0YTFiODkyZjc?x-oss-process=image/format,png"></p>
<p>切换分支 就是将HEAD指针指向别的分支</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUzMzU0YTEzMGIzY2Q?x-oss-process=image/format,png"></p>
<p>切换后同样可以commit新节点</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUzMzU0YTJhMzI2OTI?x-oss-process=image/format,png"></p>
<p>如果你再切换到 <code>master</code> 去 <code>commit</code>，就会真正地出现分叉了</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUzMzU0YWIwODYxYTc?x-oss-process=image/format,png"></p>
<p>各个commit之间会形成分支树(Tree),任意branch之间都是<strong>平等的</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIwLzE1ZmQ3NzlmZjM0NmZiZDc?x-oss-process=image/format,png"></p>
<p>任意branch包含的节点一定是从（branch最开始的commit节点）头节点开始的——1234-&gt;12347;1256-&gt;12567</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUzMzU0YTFkM2NkMjY?x-oss-process=image/format,png"></p>
<p>每个commit有一个唯一SHA-1校验码用来区分，用户可以用过他们的引用（名字）来对他们进行操作</p>
<h4 id="HEAD：当前commit引用"><a href="#HEAD：当前commit引用" class="headerlink" title="HEAD：当前commit引用"></a>HEAD：当前commit引用</h4><h4 id="branch：一个特别的引用，可以被HEAD指向，形象的理解为commit发生时会带着HEAD移动"><a href="#branch：一个特别的引用，可以被HEAD指向，形象的理解为commit发生时会带着HEAD移动" class="headerlink" title="branch：一个特别的引用，可以被HEAD指向，形象的理解为commit发生时会带着HEAD移动"></a>branch：一个特别的引用，可以被HEAD指向，形象的理解为commit发生时会带着HEAD移动</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIwLzE1ZmQ3NzlmNWQzZTZiNjM?x-oss-process=image/format,png"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIwLzE1ZmQ3NzlmOTgzYzgxZTc?x-oss-process=image/format,png"></p>
<h4 id="master-main-默认branch"><a href="#master-main-默认branch" class="headerlink" title="master/main:默认branch"></a>master/main:默认branch</h4><p>1.新建时</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIwLzE1ZmQ3NzlmNWM2NmFjOWU?x-oss-process=image/format,png"></p>
<p>2.clone时</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIwLzE1ZmQ3NzlmNWMxOTFhM2Y?x-oss-process=image/format,png"></p>
<p>而删除分支时，仅仅是删除引用</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzI5LzE2MDA2YjdlM2QzNWZlNTQ?x-oss-process=image/format,png"></p>
<h3 id="push的本质"><a href="#push的本质" class="headerlink" title="push的本质"></a>push的本质</h3><p>本质就是比较push过来的branch引用，从最后一个相同节点后面接上新的commit节点</p>
<p>push会把当前分支上的commit节点上传到远程库，git push会推送本地的默认分支，不是默认分支时需要git push origin branch_name来指定</p>
<p>远程库的HEAD引用不会因为push而改变，而是随着默认分支移动</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzI5LzE2MDA3MjVlOTk3M2Y3MWQ?x-oss-process=image/format,png"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzI5LzE2MDA3M2NjZGE1NmVmMDc?x-oss-process=image/format,png"></p>
<h3 id="merge的本质"><a href="#merge的本质" class="headerlink" title="merge的本质"></a>merge的本质</h3><p>本质是将两个链表的最后一个节点合并成一个新节点，并让HEAD指向该节点</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRkYzJhYWQ1YTAyNzk?x-oss-process=image/format,png"></p>
<h3 id="特殊情况1：冲突"><a href="#特殊情况1：冲突" class="headerlink" title="特殊情况1：冲突"></a>特殊情况1：冲突</h3><p>merge合并commit时，如果修改了同一个文件，最终导致无法生成一个文件快照，这就是冲突（conflict）</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRkYzJhOWQ3NTlkOGU?x-oss-process=image/format,png"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRkYzJhOWMxNTFhNGM?x-oss-process=image/format,png"></p>
<h4 id="解决方法：解决冲突（修改掉冲突的代码）-gt-手动commit-取消merge"><a href="#解决方法：解决冲突（修改掉冲突的代码）-gt-手动commit-取消merge" class="headerlink" title="解决方法：解决冲突（修改掉冲突的代码）-&gt;手动commit/取消merge"></a>解决方法：解决冲突（修改掉冲突的代码）-&gt;手动commit/取消merge</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRkYzJhZjViMDZlZjY?x-oss-process=image/format,png"></p>
<p>解决冲突时根据需要删除&lt;&lt;&lt;&lt;&lt; ========== &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这些辅助性字符即可</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRkYzJhZmZlOTdmNTA?x-oss-process=image/format,png"></p>
<p>解决完后</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> shopping<span class="token punctuation">\</span> list.txt <span class="token comment"># commit 前也需要先 add 一下</span>
<span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当然 也可以放弃解决冲突</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge --abort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="特殊情况2：HEAD领先于目标commit"><a href="#特殊情况2：HEAD领先于目标commit" class="headerlink" title="特殊情况2：HEAD领先于目标commit"></a>特殊情况2：HEAD领先于目标commit</h3><p>git默认不进行任何操作</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRkYzJiMjM1N2I5ZDk?x-oss-process=image/format,png"></p>
<h4 id="特殊情况3：HEAD落后"><a href="#特殊情况3：HEAD落后" class="headerlink" title="特殊情况3：HEAD落后"></a>特殊情况3：HEAD落后</h4><p>git默认进行fast-forward，将head移动到最近的commit</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRkYzJiMjQ4Njc1OGE?x-oss-process=image/format,png"></p>
<p>同样，当发生在本地库和远程库时，下图也正解释了为什么从远程库同步代码时只需要<code>git pull</code>命令即可</p>
<p><code>git pull=git fetch + git merge(fast-forward)</code></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRkYzJiNDZjNjlkNDY?x-oss-process=image/format,png"></p>
<h2 id="Feature-Branching-工作流"><a href="#Feature-Branching-工作流" class="headerlink" title="Feature Branching 工作流"></a>Feature Branching 工作流</h2><p>在最基本的团队工作模型中，所有人都工作在 <code>master</code> 上，写完了的 <code>commit</code> 可以通过 <code>push</code> 来发送到中央仓库，并且可以使用 <code>pull</code> 来获取到别人的最新 <code>commit</code>。这种工作模型解决了团队合作最基本的问题：<strong>多人并行开发和版本管理</strong>。</p>
<p>但这种工作模型也有它的限制：使用这种工作模型时，每个人的代码在被大家看到的时候，就是它进入正式的生产库的时候。所有人的工作都会被直接 <code>push</code> 到 <code>master</code>，这导致每个人的代码在正式启用前无法被别人看到，这样就让代码在正式启用前的讨论和 review（审阅）非常不方便。现在的商业团队，开发项目多是采用「边开发边发布、边开发边更新、边开发边修复」的持续开发策略，所以代码分享的不便会极大地影响团队的开发效率。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>工作流的核心内容可以总结为两点：</p>
<ol>
<li>任何新的功能（feature）或 bug 修复全都新建一个 <code>branch</code> 来写；</li>
<li><code>branch</code> 写完后，合并到 <code>master</code>，然后删掉这个 <code>branch</code>。</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRlNmVkYmZlMzYyYzQ?x-oss-process=image/format,png"></p>
<h3 id="运行原理和流程"><a href="#运行原理和流程" class="headerlink" title="运行原理和流程"></a>运行原理和流程</h3><p>假设团队分配给我一个任务，开发一个新功能books</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b books
<span class="token function">git</span> push origin books<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>于是我本地开发完成后push到远程库后产生books分支</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzI5LzE2MDA3YmIzMGRhNjE5YzU?x-oss-process=image/format,png"></p>
<p>然后代码审计人员想要查看我写的怎么样</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull
<span class="token function">git</span> chekcout books<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果代码通过审核，于是审计人员同意<code>merge</code>到<code>master</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master
<span class="token function">git</span> pull <span class="token comment"># merge 之前 pull 一下，让 master 更新到和远程仓库同步</span>
<span class="token function">git</span> merge books<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzI5LzE2MDA4N2NhNWE3ZDkwMWE?x-oss-process=image/format,png"></p>
<p>最后把合并后的结果 <code>push</code> 到了中央仓库，并删掉了 <code>books</code> 这个 <code>branch</code></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzI5LzE2MDA4NzdhYmM2M2E0ZDk?x-oss-process=image/format,png"></p>
<p>如果代码审核不通过，审计人员通知到我，我只需要在books上面继续修改，然后push，继续回到上面的流程，直到审核通过。</p>
<h3 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h3><p>Pull Request就是我们常说的PR，这是由Git仓库服务提供方提供的功能，方便团队讨论一个branch，并可以一键合并到master</p>
<p><img src="https://pic.innnovation.cn//img/20210707214644.png" alt="image-20210707214644364"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzMwLzE2MDA4ODQxMDRlNWJiOTQ?x-oss-process=image/format,png"></p>
<h2 id="Rebase——在新位置重新提交"><a href="#Rebase——在新位置重新提交" class="headerlink" title="Rebase——在新位置重新提交"></a>Rebase——在新位置重新提交</h2><p>本质上讲rebase就是将一个子树的根节点移动到另一个节点上，就是改变了他们的（子树）根节点。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase 目标基础点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout branch1
<span class="token function">git</span> rebase master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzMwLzE2MDBhYmQ2MjBhOGUyOGM?x-oss-process=image/format,png"></p>
<p>可以看出，通过 <code>rebase</code>，<code>5</code> 和 <code>6</code> 两条 <code>commit</code>s 把基础点从 <code>2</code> 换成了 <code>4</code> 。通过这样的方式，就让本来分叉了的提交历史重新回到了一条线。这种「重新设置基础点」的操作，就是 <code>rebase</code> 的含义</p>
<p>另外，在 <code>rebase</code> 之后，记得切回 <code>master</code> 再 <code>merge</code> 一下，把 <code>master</code> 移到最新的 <code>commit</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master
<span class="token function">git</span> merge branch1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzEyLzIvMTYwMTQ5ZTA1NGZlNDg1Yw?x-oss-process=image/format,png"></p>
<p><strong>注意</strong>：为了避免和远端仓库发生冲突，一般不要从 <code>master</code> 向其他 <code>branch</code> 执行 <code>rebase</code> 操作。而如果是 <code>master</code> 以外的 <code>branch</code> 之间的 <code>rebase</code>（比如 <code>branch1</code> 和 <code>branch2</code> 之间），就不必这么多费一步，直接 <code>rebase</code> 就好</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzEyLzIvMTYwMTRiNWE2OTE5YzBiNw?x-oss-process=image/format,png"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzEyLzIvMTYwMTRiYzY0ZDQzMzdmOA?x-oss-process=image/format,png"></p>
<h2 id="rebase-i-交互式rebase"><a href="#rebase-i-交互式rebase" class="headerlink" title="rebase -i:交互式rebase"></a>rebase -i:交互式rebase</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase -i HEAD^^	//回到倒数第二个提交<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>说明：在 Git 中，有两个「偏移符号」： <code>^</code> 和 <code>~</code>。</p>
<p><code>^</code> 的用法：在 <code>commit</code> 的后面加一个或多个 <code>^</code> 号，可以把 <code>commit</code> 往回偏移，偏移的数量是 <code>^</code> 的数量。例如：<code>master^</code> 表示 <code>master</code> 指向的 <code>commit</code> 之前的那个 <code>commit</code>； <code>HEAD^^</code> 表示 <code>HEAD</code> 所指向的 <code>commit</code> 往前数两个 <code>commit</code>。</p>
<p><code>~</code> 的用法：在 <code>commit</code> 的后面加上 <code>~</code> 号和一个数，可以把 <code>commit</code> 往回偏移，偏移的数量是 <code>~</code> 号后面的数。例如：<code>HEAD~5</code> 表示 <code>HEAD</code> 指向的 <code>commit</code>往前数 5 个 <code>commit</code>。</p>
</blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmRmNWZkMDA1MjIzODE?x-oss-process=image/format,png"></p>
<h4 id="编辑界面：选择-commit-和对应的操作"><a href="#编辑界面：选择-commit-和对应的操作" class="headerlink" title="编辑界面：选择 commit 和对应的操作"></a>编辑界面：选择 commit 和对应的操作</h4><p>这两行指示了两个信息：</p>
<ol>
<li>需要处理哪些 <code>commit</code>；</li>
<li>怎么处理它们。</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmRmNWZkMDIwYzg3ZjY?x-oss-process=image/format,png"></p>
<p>把 <code>pick</code> 修改成 <code>edit</code> 后，就可以退出编辑界面了：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmRmNWZkMDA3MTU5ZmE?x-oss-process=image/format,png"></p>
<p>上图的提示信息说明，<code>rebase</code> 过程已经停在了第二个 <code>commit</code> 的位置，那么现在你就可以去修改你想修改的内容了。</p>
<p>修改完成之后，和上节里的方法一样，用 <code>commit --amend</code> 来把修正应用到当前最新的 <code>commit</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> 笑声
<span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmRmNWZkMDRkZTBkNDA?x-oss-process=image/format,png" alt="img"></p>
<h3 id="继续-rebase-过程"><a href="#继续-rebase-过程" class="headerlink" title="继续 rebase 过程"></a>继续 rebase 过程</h3><p>在修复完成之后，就可以用 <code>rebase --continue</code> 来继续 <code>rebase</code> 过程，把后面的 <code>commit</code> 直接应用上去。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase --continue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmRmNWZkNTQ0NTVjMjk?x-oss-process=image/format,png" alt="img"></p>
<p>然后，这次交互式 <code>rebase</code> 的过程就完美结束了，你的那个倒数第二个写错的 <code>commit</code> 就也被修正了</p>
<h2 id="如果commit已经提交了发现错误，怎么优雅的改掉"><a href="#如果commit已经提交了发现错误，怎么优雅的改掉" class="headerlink" title="如果commit已经提交了发现错误，怎么优雅的改掉"></a>如果commit已经提交了发现错误，怎么优雅的改掉</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Git 会把你带到提交信息编辑界面。可以看到，提交信息默认是当前提交的提交信息。你可以修改或者保留它，然后保存退出。然后，你的最新 <code>commit</code> 就被更新了</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIxLzE1ZmRmMDE4N2YyZjRiMmQ?x-oss-process=image/format,png"></p>
<h2 id="撤销Commit"><a href="#撤销Commit" class="headerlink" title="撤销Commit"></a>撤销Commit</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard 目标commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>通过前面原理可知，节点是不会被删除的，如果还需要，可以记住SHA-1码来找到对应commit</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUxOWM4YTMyMzU4NTM?x-oss-process=image/format,png"></p>
<h3 id="撤销不是最新的commit"><a href="#撤销不是最新的commit" class="headerlink" title="撤销不是最新的commit"></a>撤销不是最新的commit</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase -i HEAD^^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUyNDNmYzdhYzExNTQ?x-oss-process=image/format,png" alt="img"></p>
<p>然后就会跳到 <code>commit</code> 序列的编辑界面，需要修改这个序列来进行操作。不过不同的是，之前修正 <code>commit</code> 的方法是把要修改的 <code>commit</code> 左边的 <code>pick</code> 改成 <code>edit</code>，而如果你要撤销某个 <code>commit</code> ，直接删掉这一行就好。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUyNDNmY2Y1ZjY2MDc?x-oss-process=image/format,png" alt="img"></p>
<p><code>pick</code> 的直接意思是「选取」，在这个界面的意思就是应用这个 <code>commit</code>。而如果把这一行删掉，那就相当于在 <code>rebase</code> 的过程中跳过了这个 <code>commit</code>，从而也就把这个 <code>commit</code> 撤销掉了。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUyNDNmY2U1ODA0ZmQ?x-oss-process=image/format,png" alt="img"></p>
<h3 id="用-rebase-–onto-撤销提交"><a href="#用-rebase-–onto-撤销提交" class="headerlink" title="用 rebase –onto 撤销提交"></a>用 rebase –onto 撤销提交</h3><p>除了用交互式 <code>rebase</code> ，你还可以用 <code>rebase --onto</code> 来更简便地撤销提交。</p>
<p><code>rebase</code> 加上 <code>--onto</code> 选项之后，可以指定 <code>rebase</code> 的「起点」。一般的 <code>rebase</code>，告诉 Git 的是「我要把当前 <code>commit</code> 以及它之前的 <code>commit</code>s 重新提交到目标 <code>commit</code> 上去，这其中，<code>rebase</code> 的「起点」是自动判定的：选取当前 <code>commit</code> 和目标 <code>commit</code> 在历史上的交叉点作为起点。</p>
<p>例如下面这种情况：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUyNDQwMDUwOGUzYzg?x-oss-process=image/format,png" alt="img"></p>
<p>如果在这里执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase 第3个commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>那么 Git 会自动选取 <code>3</code> 和 <code>5</code> 的历史交叉点 <code>2</code> 作为 <code>rebase</code> 的起点，依次将 <code>4</code> 和 <code>5</code> 重新提交到 <code>3</code> 的路径上去。</p>
<p>而 <code>--onto</code> 参数，就可以额外给 rebase 指定它的起点。例如同样以上图为例，如果我只想把 <code>5</code> 提交到 <code>3</code> 上，不想附带上 <code>4</code>，那么我可以执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase --onto 第3个commit 第4个commit branch1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>--onto</code> 参数后面有三个附加参数：目标 <code>commit</code>、起点 <code>commit</code>（注意：rebase 的时候会把起点排除在外）、终点 <code>commit</code>。所以上面这行指令就会从 <code>4</code> 往下数，拿到 <code>branch1</code> 所指向的 <code>5</code>，然后把 <code>5</code> 重新提交到 <code>3</code> 上去。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUyNDQwMGQ3ZDczZDA?x-oss-process=image/format,png" alt="img"></p>
<p>同样的，你也可以用 <code>rebase --onto</code> 来撤销提交：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase --onto HEAD^^ HEAD^ branch1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面这行代码的意思是：以倒数第二个 <code>commit</code> 为起点（起点不包含在 <code>rebase</code> 序列里哟），<code>branch1</code> 为终点，<code>rebase</code> 到倒数第三个 <code>commit</code> 上。</p>
<p>也就是这样：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUyNDNmY2U1ODA0ZmQ?x-oss-process=image/format,png" alt="img"></p>
<h3 id="代码已经-push-上去了才发现写错？"><a href="#代码已经-push-上去了才发现写错？" class="headerlink" title="代码已经 push 上去了才发现写错？"></a>代码已经 push 上去了才发现写错？</h3><p>有的时候，代码 <code>push</code> 到了中央仓库，才发现有个 <code>commit</code> 写错了。这种问题的处理分两种情况：</p>
<h4 id="1-出错的内容在你自己的-branch"><a href="#1-出错的内容在你自己的-branch" class="headerlink" title="1. 出错的内容在你自己的 branch"></a>1. 出错的内容在你自己的 branch</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUyNjM4YWM1YzFkZDA?x-oss-process=image/format,png" alt="img"></p>
<p>由于在本地对已有的 <code>commit</code> 做了修改，这时再 <code>push</code> 就会失败，因为中央仓库包含本地没有的 <code>commit</code>。但这个和前面讲过的情况不同，这次的冲突不是因为同事 <code>push</code> 了新的提交，而是因为你刻意修改了一些内容，这个冲突是你预料到的，你本来就希望用本地的内容覆盖掉中央仓库的内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin branch1 -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VzZXItZ29sZC1jZG4ueGl0dS5pby8yMDE3LzExLzIyLzE1ZmUyNjM4YWI3YjdlNmQ?x-oss-process=image/format,png" alt="img"></p>
<p>这样，在本地修改了错误的 <code>commit</code>s，然后强制 <code>push</code> 上去，问题解决。</p>
<h4 id="2-出错的内容已经合并到-master"><a href="#2-出错的内容已经合并到-master" class="headerlink" title="2. 出错的内容已经合并到 master"></a>2. 出错的内容已经合并到 master</h4><p>用法很简单，你希望撤销哪个 <code>commit</code>，就把它填在后面：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面这行代码就会增加一条新的 <code>commit</code>，它的内容和倒数第二个 <code>commit</code> 是相反的，从而和倒数第二个 <code>commit</code> 相互抵消，达到撤销的效果。</p>
<p>在 <code>revert</code> 完成之后，把新的 <code>commit</code> 再 <code>push</code> 上去，这个 <code>commit</code> 的内容就被撤销了。它和前面所介绍的撤销方式相比，最主要的区别是，这次改动只是被「反转」了，并没有在历史中消失掉，你的历史中会存在两条 <code>commit</code> ：一个原始 <code>commit</code> ，一个对它的反转 <code>commit</code>。</p>
<h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><p>明白了git仓库和分支的概念和操作，下面介绍几种常见开发的分支策略，可以使得版本库的演进保持简洁，主干清晰，各个分支各司其职、井井有条。</p>
<p><strong>主分支Master</strong></p>
<p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/201207/bg2012070503.png" alt="Master"></p>
<p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>
<p><strong>开发分支Develop</strong></p>
<p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/201207/bg2012070504.png" alt="Dev-Master"></p>
<p>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。</p>
<p><strong>临时性分支</strong></p>
<p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</p>
<p>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>
<blockquote>
<p>　　* 功能（feature）分支</p>
<p>　　* 预发布（release）分支</p>
<p>　　* 修补bug（fixbug）分支</p>
</blockquote>
<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>
<p><strong>1.功能分支</strong></p>
<p>它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/201207/bg2012070507.png" alt="Feature"></p>
<p>功能分支的名字，可以采用feature-*的形式命名。</p>
<p><strong>2.预发布分支</strong></p>
<p>它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。</p>
<p>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>
<p><strong>3.修补bug分支</strong></p>
<p>软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。</p>
<p>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/201207/bg2012070508.png" alt="FixBug"></p>
<h2 id="IDEA操作"><a href="#IDEA操作" class="headerlink" title="IDEA操作"></a>IDEA操作</h2><p>git操作其实本不在乎用命令行还是界面，关键是理解分支和仓库的本质。新版idea的git操作非常非常方便，在IDE界面的右下角，和项目的右键GIT菜单都可以快捷打开所有常用命令，且均提供可视化操作界面，可谓老少皆宜，idea 永远滴神！</p>
<p><img src="https://pic.innnovation.cn//img/20210707224142.png" alt="image-20210707224142108"></p>
<p>可以用commit子窗口快速提交</p>
<p><img src="https://pic.innnovation.cn//img/20210707224236.png" alt="image-20210707224236363"></p>
<p>右下角可以快速checkout切换分支</p>
<p><img src="https://pic.innnovation.cn//img/20210707224308.png" alt="image-20210707224308734"></p>
<p>冲突处理界面也异常友好，除了显示两个冲突文件，还会显示前有一次正确提交的文件在中间以供参考</p>
<h2 id="命令速查"><a href="#命令速查" class="headerlink" title="命令速查"></a>命令速查</h2><p><img src="https://pic.innnovation.cn//img/20210708095835.jpeg" alt="git命令速查表"></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
        <tag>GIT</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-内存页面初始化</title>
    <url>/2021/07/12/cao-zuo-xi-tong-nei-cun-ye-mian-chu-shi-hua/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在 hal 层初始化中，初始化了从二级引导器中获取的内存布局信息，也就是那个 e820map_t 数组，并把这个数组转换成了 phymmarge_t 结构数组，还对它做了排序。</p>
<p>物理内存管理器初始化的大总管——init_memmgr 函数，并在 init_halmm 函数中调用</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//cosmos/hal/x86/halmm.c中</span>
<span class="token comment">//hal层的内存初始化函数</span>
<span class="token keyword">void</span> <span class="token function">init_halmm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">init_phymmarge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_memmgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//Cosmos物理内存管理器初始化</span>
<span class="token keyword">void</span> <span class="token function">init_memmgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//初始化内存页结构msadsc_t</span>
    <span class="token comment">//初始化内存区结构memarea_t</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 init_memmgr 函数中应该要完成<strong>内存页结构 msadsc_t 和内存区结构 memarea_t 的初始化</strong></p>
<h2 id="内存页结构初始化"><a href="#内存页结构初始化" class="headerlink" title="内存页结构初始化"></a>内存页结构初始化</h2><p>内存页结构的初始化，其实就是初始化 msadsc_t 结构对应的变量。因为一个 msadsc_t 结构体变量代表一个物理内存页，而物理内存由多个页组成，所以最终会形成一个 msadsc_t 结构体数组。</p>
<p>这会让我们的工作变得简单，我们只需要找一个内存地址，作为 msadsc_t 结构体数组的开始地址，当然这个内存地址必须是可用的，而且之后内存空间足以存放 msadsc_t 结构体数组。</p>
<p>然后，我们要扫描 phymmarge_t 结构体数组中的信息，只要它的类型是可用内存，就建立一个 msadsc_t 结构体，并把其中的开始地址作为第一个页面地址。</p>
<p>接着，要给这个开始地址加上 0x1000，如此循环，直到其结束地址。当这个 phymmarge_t 结构体的地址区间，它对应的所有 msadsc_t 结构体都建立完成之后，就开始下一个 phymmarge_t 结构体。依次类推，最后，我们就能建好所有可用物理内存页面对应的 msadsc_t 结构体。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">void</span> <span class="token function">write_one_msadsc</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msap<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> phyadr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//对msadsc_t结构做基本的初始化，比如链表、锁、标志位</span>
    <span class="token function">msadsc_t_init</span><span class="token punctuation">(</span>msap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//这是把一个64位的变量地址转换成phyadrflgs_t*类型方便取得其中的地址位段</span>
    <span class="token class-name">phyadrflgs_t</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">phyadrflgs_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>phyadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把页的物理地址写入到msadsc_t结构中</span>
    msap<span class="token operator">-></span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">=</span> tmp<span class="token operator">-></span>paf_padrs<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">u64_t</span> <span class="token function">init_msadsc_core</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msavstart<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> msanr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//获取phymmarge_t结构数组开始地址</span>
    <span class="token class-name">phymmarge_t</span> <span class="token operator">*</span>pmagep <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">phymmarge_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_e820expadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> mdindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//扫描phymmarge_t结构数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mbsp<span class="token operator">-></span>mb_e820exnr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//判断phymmarge_t结构的类型是不是可用内存</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>PMR_T_OSAPUSERRAM <span class="token operator">==</span> pmagep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pmr_type<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">//遍历phymmarge_t结构的地址区间</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> start <span class="token operator">=</span> pmagep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pmr_saddr<span class="token punctuation">;</span> start <span class="token operator">&lt;</span> pmagep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pmr_end<span class="token punctuation">;</span> start <span class="token operator">+=</span> <span class="token number">4096</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">//每次加上4KB-1比较是否小于等于phymmarge_t结构的结束地址</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">4096</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> pmagep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pmr_end<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token comment">//与当前地址为参数写入第mdindx个msadsc结构</span>
                    <span class="token function">write_one_msadsc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msavstart<span class="token punctuation">[</span>mdindx<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mdindx<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> mdindx<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">init_msadsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> coremdnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> msadscnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msadscvp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp <span class="token operator">=</span> <span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">;</span>
    <span class="token comment">//计算msadsc_t结构数组的开始地址和数组元素个数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ret_msadsc_vadrandsz</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msadscvp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msadscnr<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">"init_msadsc ret_msadsc_vadrandsz err\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//开始真正初始化msadsc_t结构数组</span>
    coremdnr <span class="token operator">=</span> <span class="token function">init_msadsc_core</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> msadscvp<span class="token punctuation">,</span> msadscnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>coremdnr <span class="token operator">!=</span> msadscnr<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">"init_msadsc init_msadsc_core err\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//将msadsc_t结构数组的开始的物理地址写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-></span>mb_memmappadr <span class="token operator">=</span> <span class="token function">viradr_to_phyadr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>msadscvp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将msadsc_t结构数组的元素个数写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-></span>mb_memmapnr <span class="token operator">=</span> coremdnr<span class="token punctuation">;</span>
    <span class="token comment">//将msadsc_t结构数组的大小写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-></span>mb_memmapsz <span class="token operator">=</span> coremdnr <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//计算下一个空闲内存的开始地址 </span>
    mbsp<span class="token operator">-></span>mb_nextwtpadr <span class="token operator">=</span> <span class="token function">PAGE_ALIGN</span><span class="token punctuation">(</span>mbsp<span class="token operator">-></span>mb_memmappadr <span class="token operator">+</span> mbsp<span class="token operator">-></span>mb_memmapsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中的 ret_msadsc_vadrandsz 函数也是遍历 phymmarge_t 结构数组，计算出有多大的可用内存空间，可以分成多少个页面，需要多少个 msadsc_t 结构。</p>
<h2 id="内存区结构初始化"><a href="#内存区结构初始化" class="headerlink" title="内存区结构初始化"></a>内存区结构初始化</h2><p>我们将整个物理地址空间在逻辑上分成了三个区，分别是：硬件区、内核区、用户区，这就要求我们要在内存中建立三个 memarea_t 结构体的实例变量。</p>
<p>我们只需要在内存中找个空闲空间，存放这三个 memarea_t 结构体就行。相比建立 msadsc_t 结构数组这更为简单，因为 memarea_t 结构体是顶层结构，并不依赖其它数据结构，只是对其本身进行初始化就好了.</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">void</span> <span class="token function">bafhlst_t_init</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>initp<span class="token punctuation">,</span> <span class="token class-name">u32_t</span> stus<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> oder<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> oderpnr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//初始化bafhlst_t结构体的基本数据</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>af_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>af_stus <span class="token operator">=</span> stus<span class="token punctuation">;</span>
    initp<span class="token operator">-></span>af_oder <span class="token operator">=</span> oder<span class="token punctuation">;</span>
    initp<span class="token operator">-></span>af_oderpnr <span class="token operator">=</span> oderpnr<span class="token punctuation">;</span>
    initp<span class="token operator">-></span>af_fobjnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>af_mobjnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>af_alcindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>af_freindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>af_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>af_alclst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>af_ovelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">memdivmer_t_init</span><span class="token punctuation">(</span><span class="token class-name">memdivmer_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//初始化medivmer_t结构体的基本数据</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>dm_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>dm_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>dm_divnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>dm_mernr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//循环初始化memdivmer_t结构体中dm_mdmlielst数组中的每个bafhlst_t结构的基本数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> li <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> li <span class="token operator">&lt;</span> MDIVMER_ARR_LMAX<span class="token punctuation">;</span> li<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">bafhlst_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>dm_mdmlielst<span class="token punctuation">[</span>li<span class="token punctuation">]</span><span class="token punctuation">,</span> BAFH_STUS_DIVM<span class="token punctuation">,</span> li<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">bafhlst_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>dm_onemsalst<span class="token punctuation">,</span> BAFH_STUS_ONEM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1UL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">memarea_t_init</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//初始化memarea_t结构体的基本数据</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>ma_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>ma_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_flgs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_type <span class="token operator">=</span> MA_TYPE_INIT<span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_maxpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_allocpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_freepages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_resvpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_horizline <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_logicstart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_logicend <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_logicsz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化memarea_t结构体中的memdivmer_t结构体</span>
    <span class="token function">memdivmer_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>ma_mdmdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>ma_privp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">init_memarea_core</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//获取memarea_t结构开始地址</span>
    <span class="token class-name">u64_t</span> phymarea <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_nextwtpadr<span class="token punctuation">;</span>
    <span class="token comment">//检查内存空间够不够放下MEMAREA_MAX个memarea_t结构实例变量</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">initchkadr_is_ok</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> phymarea<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> MEMAREA_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">memarea_t</span> <span class="token operator">*</span>virmarea <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>phymarea<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> mai <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mai <span class="token operator">&lt;</span> MEMAREA_MAX<span class="token punctuation">;</span> mai<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>   <span class="token comment">//循环初始化每个memarea_t结构实例变量</span>
        <span class="token function">memarea_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>virmarea<span class="token punctuation">[</span>mai<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//设置硬件区的类型和空间大小</span>
    virmarea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_type <span class="token operator">=</span> MA_TYPE_HWAD<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicstart <span class="token operator">=</span> MA_HWAD_LSTART<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicend <span class="token operator">=</span> MA_HWAD_LEND<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicsz <span class="token operator">=</span> MA_HWAD_LSZ<span class="token punctuation">;</span>
    <span class="token comment">//设置内核区的类型和空间大小</span>
    virmarea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_type <span class="token operator">=</span> MA_TYPE_KRNL<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicstart <span class="token operator">=</span> MA_KRNL_LSTART<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicend <span class="token operator">=</span> MA_KRNL_LEND<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicsz <span class="token operator">=</span> MA_KRNL_LSZ<span class="token punctuation">;</span>
    <span class="token comment">//设置应用区的类型和空间大小</span>
    virmarea<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_type <span class="token operator">=</span> MA_TYPE_PROC<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicstart <span class="token operator">=</span> MA_PROC_LSTART<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicend <span class="token operator">=</span> MA_PROC_LEND<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicsz <span class="token operator">=</span> MA_PROC_LSZ<span class="token punctuation">;</span>
    <span class="token comment">//将memarea_t结构的开始的物理地址写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-></span>mb_memznpadr <span class="token operator">=</span> phymarea<span class="token punctuation">;</span>
    <span class="token comment">//将memarea_t结构的个数写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-></span>mb_memznnr <span class="token operator">=</span> MEMAREA_MAX<span class="token punctuation">;</span>
    <span class="token comment">//将所有memarea_t结构的大小写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-></span>mb_memznsz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> MEMAREA_MAX<span class="token punctuation">;</span>
    <span class="token comment">//计算下一个空闲内存的开始地址 </span>
    mbsp<span class="token operator">-></span>mb_nextwtpadr <span class="token operator">=</span> <span class="token function">PAGE_ALIGN</span><span class="token punctuation">(</span>phymarea <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> MEMAREA_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//初始化内存区</span>
<span class="token keyword">void</span> <span class="token function">init_memarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//真正初始化内存区</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">init_memarea_core</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">"init_memarea_core fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 init_memarea_core 函数的开始，我们调用了 memarea_t_init 函数，对 MEMAREA_MAX 个 memarea_t 结构进行了基本的初始化。</p>
<p>然后，在 memarea_t_init 函数中又调用了 memdivmer_t_init 函数，而在 memdivmer_t_init 函数中又调用了 bafhlst_t_init 函数，这保证了那些被包含的数据结构得到了初始化。</p>
<p>最后，我们给三个区分别设置了类型和地址空间。</p>
<h2 id="处理初始内存占用问题"><a href="#处理初始内存占用问题" class="headerlink" title="处理初始内存占用问题"></a>处理初始内存占用问题</h2><p>目前我们的内存中已经有很多数据了，有 os 内核本身的执行文件，有字体文件，有 MMU 页表，有打包的内核映像文件，还有刚刚建立的内存页和内存区的数据结构，这些数据都要占用实际的物理内存</p>
<p>再回头看看我们建立内存页结构 msadsc_t，所有的都是空闲状态，而它们每一个都表示一个实际的物理内存页。</p>
<p>假如在这种情况下，对调用内存分配接口进行内存分配，它按既定的分配算法查找空闲的 msadsc_t 结构，那它一定会找到内核占用的内存页所对应的 msadsc_t 结构，并把这个内存页分配出去，然后得到这个页面的程序对其进行改写。这样内核数据就会被覆盖，这种情况是我们绝对不能允许的。</p>
<p>所以，我们要把这些已经占用的内存页面所对应的 msadsc_t 结构标记出来，标记成已分配，这样内存分配算法就不会找到它们了。</p>
<p>要解决这个问题，我们只要给出被占用内存的起始地址和结束地址，然后从起始地址开始查找对应的 msadsc_t 结构，再把它标记为已经分配，最后直到查找到结束地址为止。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//搜索一段内存地址空间所对应的msadsc_t结构</span>
<span class="token class-name">u64_t</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msastart<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> msanr<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> ocpystat<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> ocpyend<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> mphyadr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fsmsnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fstatmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> mnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mnr <span class="token operator">&lt;</span> msanr<span class="token punctuation">;</span> mnr<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msastart<span class="token punctuation">[</span>mnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">)</span> <span class="token operator">==</span> ocpystat<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">//找出开始地址对应的第一个msadsc_t结构，就跳转到step1</span>
            fstatmp <span class="token operator">=</span> <span class="token operator">&amp;</span>msastart<span class="token punctuation">[</span>mnr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> step1<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
step1<span class="token operator">:</span>
    fsmsnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fstatmp<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> tmpadr <span class="token operator">=</span> ocpystat<span class="token punctuation">;</span> tmpadr <span class="token operator">&lt;</span> ocpyend<span class="token punctuation">;</span> tmpadr <span class="token operator">+=</span> PAGESIZE<span class="token punctuation">,</span> fsmsnr<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//从开始地址对应的第一个msadsc_t结构开始设置，直到结束地址对应的最后一个masdsc_t结构</span>
        mphyadr <span class="token operator">=</span> fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mphyadr <span class="token operator">!=</span> tmpadr<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>MF_MOCTY_FREE <span class="token operator">!=</span> fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_mocty <span class="token operator">||</span>
            <span class="token number">0</span> <span class="token operator">!=</span> fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx <span class="token operator">||</span>
            PAF_NO_ALLOC <span class="token operator">!=</span> fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//设置msadsc_t结构为已经分配，已经分配给内核</span>
        fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_mocty <span class="token operator">=</span> MF_MOCTY_KRNL<span class="token punctuation">;</span>
        fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">++</span><span class="token punctuation">;</span>
        fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_ALLOC<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//进行一些数据的正确性检查</span>
    <span class="token class-name">u64_t</span> ocpysz <span class="token operator">=</span> ocpyend <span class="token operator">-</span> ocpystat<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ocpysz <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ocpysz <span class="token operator">>></span> PSHRSIZE<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> fsmsnr<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> fsmsnr<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ocpysz <span class="token operator">>></span> PSHRSIZE<span class="token punctuation">)</span> <span class="token operator">!=</span> fsmsnr<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> fsmsnr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token class-name">bool_t</span> <span class="token function">search_krloccupymsadsc_core</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> retschmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msadstat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_memmappadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> msanr <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_memmapnr<span class="token punctuation">;</span>
    <span class="token comment">//搜索BIOS中断表占用的内存页所对应msadsc_t结构</span>
    retschmnr <span class="token operator">=</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span>msadstat<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> retschmnr<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//搜索内核栈占用的内存页所对应msadsc_t结构</span>
    retschmnr <span class="token operator">=</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span>msadstat<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> mbsp<span class="token operator">-></span>mb_krlinitstack <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0xfffUL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mbsp<span class="token operator">-></span>mb_krlinitstack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> retschmnr<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//搜索内核占用的内存页所对应msadsc_t结构</span>
    retschmnr <span class="token operator">=</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span>msadstat<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> mbsp<span class="token operator">-></span>mb_krlimgpadr<span class="token punctuation">,</span> mbsp<span class="token operator">-></span>mb_nextwtpadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> retschmnr<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//搜索内核映像文件占用的内存页所对应msadsc_t结构</span>
    retschmnr <span class="token operator">=</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span>msadstat<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> mbsp<span class="token operator">-></span>mb_imgpadr<span class="token punctuation">,</span> mbsp<span class="token operator">-></span>mb_imgpadr <span class="token operator">+</span> mbsp<span class="token operator">-></span>mb_imgsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> retschmnr<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//初始化搜索内核占用的内存页面</span>
<span class="token keyword">void</span> <span class="token function">init_search_krloccupymm</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//实际初始化搜索内核占用的内存页面</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">search_krloccupymsadsc_core</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">"search_krloccupymsadsc_core fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这三个函数逻辑很简单，由 init_search_krloccupymm 函数入口，search_krloccupymsadsc_core 函数驱动，由 search_segment_occupymsadsc 函数完成实际的工作。由于初始化阶段各种数据占用的开始、结束地址和大小，这些信息都保存在 machbstart_t 类型的 kmachbsp 变量中，所以函数与 machbstart_t 类型的指针为参数。其实 phymmarge_t、msadsc_t、memarea_t 这些结构的实例变量和 MMU 页表，它们所占用的内存空间已经涵盖在了内核自身占用的内存空间。</p>
<h2 id="合并内存页到内存区"><a href="#合并内存页到内存区" class="headerlink" title="合并内存页到内存区"></a>合并内存页到内存区</h2><p>1.确定内存页属于哪个区，即标定一系列 msadsc_t 结构是属于哪个 memarea_t 结构的。</p>
<p>2.把特定的内存页合并，然后挂载到特定的内存区下的 memdivmer_t 结构中的 dm_mdmlielst 数组中。</p>
<p>我们先来做第一件事，这件事比较简单，我们只要遍历每个 memarea_t 结构，遍历过程中根据特定的 memarea_t 结构，然后去扫描整个 msadsc_t 结构数组，最后依次对比 msadsc_t 的物理地址，看它是否落在 memarea_t 结构的地址区间中。如果是，就把这个 memarea_t 结构的类型值写入 msadsc_t 结构中，这样就一个一个打上了标签，遍历 memarea_t 结构结束之后，每个 msadsc_t 结构就只归属于某一个 memarea_t 结构了。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//给msadsc_t结构打上标签</span>
<span class="token class-name">uint_t</span> <span class="token function">merlove_setallmarflgs_onmemarea</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstat<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> msanr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u32_t</span> muindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadflgs_t</span> <span class="token operator">*</span>mdfp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//获取内存区类型</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mareap<span class="token operator">-></span>ma_type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> MA_TYPE_HWAD<span class="token operator">:</span>
        muindx <span class="token operator">=</span> MF_MARTY_HWD <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//硬件区标签</span>
        mdfp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadflgs_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>muindx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> MA_TYPE_KRNL<span class="token operator">:</span>
        muindx <span class="token operator">=</span> MF_MARTY_KRL <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//内核区标签</span>
        mdfp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadflgs_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>muindx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> MA_TYPE_PROC<span class="token operator">:</span>
        muindx <span class="token operator">=</span> MF_MARTY_PRC <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//应用区标签</span>
        mdfp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadflgs_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>muindx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">u64_t</span> phyadr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> retnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//扫描所有的msadsc_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> mix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mix <span class="token operator">&lt;</span> msanr<span class="token punctuation">;</span> mix<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>MF_MARTY_INIT <span class="token operator">==</span> mstat<span class="token punctuation">[</span>mix<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_marty<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>    <span class="token comment">//获取msadsc_t结构对应的地址</span>
            phyadr <span class="token operator">=</span> mstat<span class="token punctuation">[</span>mix<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">;</span>
            <span class="token comment">//和内存区的地址区间比较 </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>phyadr <span class="token operator">>=</span> mareap<span class="token operator">-></span>ma_logicstart <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>phyadr <span class="token operator">+</span> PAGESIZE<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> mareap<span class="token operator">-></span>ma_logicend<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token comment">//设置msadsc_t结构的标签</span>
                mstat<span class="token punctuation">[</span>mix<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_marty <span class="token operator">=</span> mdfp<span class="token operator">-></span>mf_marty<span class="token punctuation">;</span>
                retnr<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> retnr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">merlove_mem_core</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//获取msadsc_t结构的首地址</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstatp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_memmappadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取msadsc_t结构的个数</span>
    <span class="token class-name">uint_t</span> msanr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_memmapnr<span class="token punctuation">,</span> maxp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//获取memarea_t结构的首地址</span>
    <span class="token class-name">memarea_t</span> <span class="token operator">*</span>marea <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_memznpadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> sretf <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token punctuation">,</span> tretf <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历每个memarea_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> mi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mi <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_memznnr<span class="token punctuation">;</span> mi<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//针对其中一个memarea_t结构给msadsc_t结构打上标签</span>
        sretf <span class="token operator">=</span> <span class="token function">merlove_setallmarflgs_onmemarea</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>marea<span class="token punctuation">[</span>mi<span class="token punctuation">]</span><span class="token punctuation">,</span> mstatp<span class="token punctuation">,</span> msanr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0UL</span><span class="token punctuation">)</span> <span class="token operator">==</span> sretf<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
     <span class="token comment">//遍历每个memarea_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> maidx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> maidx <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_memznnr<span class="token punctuation">;</span> maidx<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//针对其中一个memarea_t结构对msadsc_t结构进行合并</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">merlove_mem_onmemarea</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>marea<span class="token punctuation">[</span>maidx<span class="token punctuation">]</span><span class="token punctuation">,</span> mstatp<span class="token punctuation">,</span> msanr<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        maxp <span class="token operator">+=</span> marea<span class="token punctuation">[</span>maidx<span class="token punctuation">]</span><span class="token punctuation">.</span>ma_maxpages<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//初始化页面合并</span>
<span class="token keyword">void</span> <span class="token function">init_merlove_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">merlove_mem_core</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">"merlove_mem_core fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从 init_merlove_mem 函数开始，但是它并不实际干活，作为入口函数，它调用的 merlove_mem_core 函数才是真正干活的。这个 merlove_mem_core 函数有两个遍历内存区，第一次遍历是为了完成上述第一步：确定内存页属于哪个区。当确定内存页属于哪个区之后，就来到了第二次遍历 memarea_t 结构，合并其中的 msadsc_t 结构，并把它们挂载到其中的 memdivmer_t 结构下的 dm_mdmlielst 数组中。</p>
<p><strong>第一，它要保证其中所有的 msadsc_t 结构挂载到 dm_mdmlielst 数组中合适的 bafhlst_t 结构中。</strong></p>
<p><strong>第二，它要保证多个 msadsc_t 结构有最大的连续性。</strong></p>
<p>举个例子，比如一个内存区中有 12 个页面，其中 10 个页面是连续的地址为 0～0x9000，还有两个页面其中一个地址为 0xb000，另一个地址为 0xe000。</p>
<p>这样的情况下，需要多个页面保持最大的连续性，还有在 m_mdmlielst 数组中找到合适的 bafhlst_t 结构。</p>
<p>那么：0～0x7000 这 8 个页面就要挂载到 m_mdmlielst 数组中第 3 个 bafhlst_t 结构中；0x8000～0x9000 这 2 个页面要挂载到 m_mdmlielst 数组中第 1 个 bafhlst_t 结构中，而 0xb000 和 0xe000 这 2 个页面都要挂载到 m_mdmlielst 数组中第 0 个 bafhlst_t 结构中。</p>
<p>从上述代码可以看出，遍历每个内存区，然后针对其中每一个内存区进行 msadsc_t 结构的合并操作，完成这个操作的是 merlove_mem_onmemarea，我们这就去写好这个函数，代码如下所示。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token class-name">bool_t</span> <span class="token function">continumsadsc_add_bafhlst</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fend<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> fmnr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    fstat<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    <span class="token comment">//开始的msadsc_t结构指向最后的msadsc_t结构 </span>
    fstat<span class="token operator">-></span>md_odlink <span class="token operator">=</span> fend<span class="token punctuation">;</span>
    fend<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
    <span class="token comment">//最后的msadsc_t结构指向它属于的bafhlst_t结构 </span>
    fend<span class="token operator">-></span>md_odlink <span class="token operator">=</span> bafhp<span class="token punctuation">;</span>
    <span class="token comment">//把多个地址连续的msadsc_t结构的的开始的那个msadsc_t结构挂载到bafhlst_t结构的af_frelst中</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fstat<span class="token operator">-></span>md_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bafhp<span class="token operator">-></span>af_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//更新bafhlst_t的统计数据</span>
    bafhp<span class="token operator">-></span>af_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-></span>af_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">//更新内存区的统计数据</span>
    mareap<span class="token operator">-></span>ma_maxpages <span class="token operator">+=</span> fmnr<span class="token punctuation">;</span>
    mareap<span class="token operator">-></span>ma_freepages <span class="token operator">+=</span> fmnr<span class="token punctuation">;</span>
    mareap<span class="token operator">-></span>ma_allmsadscnr <span class="token operator">+=</span> fmnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">continumsadsc_mareabafh_core</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>rfstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>rfend<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>rfmnr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint_t</span> retval <span class="token operator">=</span> <span class="token operator">*</span>rfmnr<span class="token punctuation">,</span> tmpmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstat <span class="token operator">=</span> <span class="token operator">*</span>rfstat<span class="token punctuation">,</span> <span class="token operator">*</span>mend <span class="token operator">=</span> <span class="token operator">*</span>rfend<span class="token punctuation">;</span>
    <span class="token comment">//根据地址连续的msadsc_t结构的数量查找合适bafhlst_t结构</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp <span class="token operator">=</span> <span class="token function">find_continumsa_inbafhlst</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判断bafhlst_t结构状态和类型对不对</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BAFH_STUS_DIVP <span class="token operator">==</span> bafhp<span class="token operator">-></span>af_stus <span class="token operator">||</span> BAFH_STUS_DIVM <span class="token operator">==</span> bafhp<span class="token operator">-></span>af_stus<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> MA_TYPE_PROC <span class="token operator">!=</span> mareap<span class="token operator">-></span>ma_type<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//看地址连续的msadsc_t结构的数量是不是正好是bafhp->af_oderpnr</span>
        tmpmnr <span class="token operator">=</span> retval <span class="token operator">-</span> bafhp<span class="token operator">-></span>af_oderpnr<span class="token punctuation">;</span>
        <span class="token comment">//根据地址连续的msadsc_t结构挂载到bafhlst_t结构中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">continumsadsc_add_bafhlst</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> bafhp<span class="token punctuation">,</span> mstat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mstat<span class="token punctuation">[</span>bafhp<span class="token operator">-></span>af_oderpnr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bafhp<span class="token operator">-></span>af_oderpnr<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//如果地址连续的msadsc_t结构的数量正好是bafhp->af_oderpnr则完成，否则返回再次进入此函数 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpmnr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token operator">*</span>rfmnr <span class="token operator">=</span> tmpmnr<span class="token punctuation">;</span>
            <span class="token operator">*</span>rfend <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//挂载bafhp->af_oderpnr地址连续的msadsc_t结构到bafhlst_t中</span>
        <span class="token operator">*</span>rfstat <span class="token operator">=</span> <span class="token operator">&amp;</span>mstat<span class="token punctuation">[</span>bafhp<span class="token operator">-></span>af_oderpnr<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//还剩多少个地址连续的msadsc_t结构</span>
        <span class="token operator">*</span>rfmnr <span class="token operator">=</span> tmpmnr<span class="token punctuation">;</span>
        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">merlove_continumsadsc_mareabafh</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mend<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> mnr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint_t</span> mnridx <span class="token operator">=</span> mnr<span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fstat <span class="token operator">=</span> mstat<span class="token punctuation">,</span> <span class="token operator">*</span>fend <span class="token operator">=</span> mend<span class="token punctuation">;</span>
    <span class="token comment">//如果mnridx > 0并且NULL != fend就循环调用continumsadsc_mareabafh_core函数，而mnridx和fend由这个函数控制</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>mnridx <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> fend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token comment">//为一段地址连续的msadsc_t结构寻找合适m_mdmlielst数组中的bafhlst_t结构</span>
        <span class="token function">continumsadsc_mareabafh_core</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fstat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fend<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mnridx<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token class-name">bool_t</span> <span class="token function">merlove_scan_continumsadsc</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fmstat<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>fntmsanr<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> fmsanr<span class="token punctuation">,</span>
                                         <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmsastatp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmsaendp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retfmnr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u32_t</span> muindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadflgs_t</span> <span class="token operator">*</span>mdfp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msastat <span class="token operator">=</span> fmstat<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> retfindmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> tmidx <span class="token operator">=</span> <span class="token operator">*</span>fntmsanr<span class="token punctuation">;</span>
    <span class="token comment">//从外层函数的fntmnr变量开始遍历所有msadsc_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> tmidx <span class="token operator">&lt;</span> fmsanr<span class="token punctuation">;</span> tmidx<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token comment">//一个msadsc_t结构是否属于这个内存区，是否空闲</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_marty <span class="token operator">==</span> mdfp<span class="token operator">-></span>mf_marty <span class="token operator">&amp;&amp;</span>
            <span class="token number">0</span> <span class="token operator">==</span> msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx <span class="token operator">&amp;&amp;</span>
            MF_MOCTY_FREE <span class="token operator">==</span> msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_mocty <span class="token operator">&amp;&amp;</span>
            PAF_NO_ALLOC <span class="token operator">==</span> msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
        <span class="token comment">//返回从这个msadsc_t结构开始到下一个非空闲、地址非连续的msadsc_t结构对应的msadsc_t结构索引号到retfindmnr变量中</span>
            rets <span class="token operator">=</span> <span class="token function">scan_len_msadsc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">,</span> mdfp<span class="token punctuation">,</span> fmsanr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retfindmnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//下一轮开始的msadsc_t结构索引</span>
            <span class="token operator">*</span>fntmsanr <span class="token operator">=</span> tmidx <span class="token operator">+</span> retfindmnr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">//当前地址连续msadsc_t结构的开始地址</span>
            <span class="token operator">*</span>retmsastatp <span class="token operator">=</span> <span class="token operator">&amp;</span>msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//当前地址连续msadsc_t结构的结束地址</span>
            <span class="token operator">*</span>retmsaendp <span class="token operator">=</span> <span class="token operator">&amp;</span>msastat<span class="token punctuation">[</span>tmidx <span class="token operator">+</span> retfindmnr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//当前有多少个地址连续msadsc_t结构</span>
            <span class="token operator">*</span>retfmnr <span class="token operator">=</span> retfindmnr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">merlove_mem_onmemarea</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstat<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> msanr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retstatmsap <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>retendmsap <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>fntmsap <span class="token operator">=</span> mstat<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> retfindmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> fntmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> retscan <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> fntmnr <span class="token operator">&lt;</span> msanr<span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//获取最多且地址连续的msadsc_t结构体的开始、结束地址、一共多少个msadsc_t结构体，下一次循环的fntmnr</span>
        retscan <span class="token operator">=</span> <span class="token function">merlove_scan_continumsadsc</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> fntmsap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fntmnr<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retstatmsap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retendmsap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retfindmnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> retstatmsap <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> retendmsap<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
        <span class="token comment">//把一组连续的msadsc_t结构体挂载到合适的m_mdmlielst数组中的bafhlst_t结构中</span>
        <span class="token function">merlove_continumsadsc_mareabafh</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> retstatmsap<span class="token punctuation">,</span> retendmsap<span class="token punctuation">,</span> retfindmnr<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码中，整体上分为两步。</p>
<p>第一步，通过 merlove_scan_continumsadsc 函数，返回最多且地址连续的 msadsc_t 结构体的开始、结束地址、一共多少个 msadsc_t 结构体，下一轮开始的 msadsc_t 结构体的索引号。</p>
<p>第二步，根据第一步获取的信息调用 merlove_continumsadsc_mareabafh 函数，把第一步返回那一组连续的 msadsc_t 结构体，挂载到合适的 m_mdmlielst 数组中的 bafhlst_t 结构中。详细的逻辑已经在注释中说明。</p>
<h2 id="初始化汇总"><a href="#初始化汇总" class="headerlink" title="初始化汇总"></a>初始化汇总</h2><p>根据前面内存管理数据结构的关系，很显然，它们的调用次序很重要，谁先谁后都有严格的规定，这关乎内存管理初始化的成败。所以，现在我们就在先前的 init_memmgr 函数中去调用它们，代码如下所示。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_memmgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//初始化内存页结构</span>
    <span class="token function">init_msadsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化内存区结构</span>
    <span class="token function">init_memarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//处理内存占用</span>
    <span class="token function">init_search_krloccupymm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//合并内存页到内存区中</span>
    <span class="token function">init_merlove_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_memmgrob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>phymmarge_t 结构体的地址和数量、msadsc_t 结构体的地址和数据、memarea_t 结构体的地址和数量都保存在了 kmachbsp 变量中，这个变量其实不是用来管理内存的，而且它里面放的是物理地址</p>
<p>内核使用的是虚拟地址，每次都要转换极不方便，所以我们要设计一个专用的数据结构，用于内存管理</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//cosmos/include/halinc/halglobal.c</span>
<span class="token function">HAL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span><span class="token punctuation">,</span>memmgrob<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MEMMGROB</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">list_h_t</span> mo_list<span class="token punctuation">;</span>
    <span class="token class-name">spinlock_t</span> mo_lock<span class="token punctuation">;</span>        <span class="token comment">//保护自身自旋锁</span>
    <span class="token class-name">uint_t</span> mo_stus<span class="token punctuation">;</span>            <span class="token comment">//状态</span>
    <span class="token class-name">uint_t</span> mo_flgs<span class="token punctuation">;</span>            <span class="token comment">//标志</span>
    <span class="token class-name">u64_t</span> mo_memsz<span class="token punctuation">;</span>            <span class="token comment">//内存大小</span>
    <span class="token class-name">u64_t</span> mo_maxpages<span class="token punctuation">;</span>         <span class="token comment">//内存最大页面数</span>
    <span class="token class-name">u64_t</span> mo_freepages<span class="token punctuation">;</span>        <span class="token comment">//内存最大空闲页面数</span>
    <span class="token class-name">u64_t</span> mo_alocpages<span class="token punctuation">;</span>        <span class="token comment">//内存最大分配页面数</span>
    <span class="token class-name">u64_t</span> mo_resvpages<span class="token punctuation">;</span>        <span class="token comment">//内存保留页面数</span>
    <span class="token class-name">u64_t</span> mo_horizline<span class="token punctuation">;</span>        <span class="token comment">//内存分配水位线</span>
    <span class="token class-name">phymmarge_t</span><span class="token operator">*</span> mo_pmagestat<span class="token punctuation">;</span> <span class="token comment">//内存空间布局结构指针</span>
    <span class="token class-name">u64_t</span> mo_pmagenr<span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span><span class="token operator">*</span> mo_msadscstat<span class="token punctuation">;</span>   <span class="token comment">//内存页面结构指针</span>
    <span class="token class-name">u64_t</span> mo_msanr<span class="token punctuation">;</span>
    <span class="token class-name">memarea_t</span><span class="token operator">*</span> mo_mareastat<span class="token punctuation">;</span>   <span class="token comment">//内存区结构指针 </span>
    <span class="token class-name">u64_t</span> mo_mareanr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token class-name">memmgrob_t</span><span class="token punctuation">;</span>

<span class="token comment">//cosmos/hal/x86/memmgrinit.c</span>

<span class="token keyword">void</span> <span class="token function">memmgrob_t_init</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>mo_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-></span>mo_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_flgs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_memsz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_maxpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_freepages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_alocpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_resvpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_horizline <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_pmagestat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_pmagenr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_msadscstat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_msanr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_mareastat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mo_mareanr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">init_memmgrob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp <span class="token operator">=</span> <span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">;</span>
    <span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mobp <span class="token operator">=</span> <span class="token operator">&amp;</span>memmgrob<span class="token punctuation">;</span>
    <span class="token function">memmgrob_t_init</span><span class="token punctuation">(</span>mobp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_pmagestat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">phymmarge_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_e820expadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_pmagenr <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_e820exnr<span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_msadscstat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_memmappadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_msanr <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_memmapnr<span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_mareastat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_memznpadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_mareanr <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_memznnr<span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_memsz <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_memmapnr <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_maxpages <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_memmapnr<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> aidx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mobp<span class="token operator">-></span>mo_msanr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mobp<span class="token operator">-></span>mo_msadscstat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx <span class="token operator">&amp;&amp;</span>
            MF_MOCTY_KRNL <span class="token operator">==</span> mobp<span class="token operator">-></span>mo_msadscstat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_mocty <span class="token operator">&amp;&amp;</span>
            PAF_ALLOC <span class="token operator">==</span> mobp<span class="token operator">-></span>mo_msadscstat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            aidx<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    mobp<span class="token operator">-></span>mo_alocpages <span class="token operator">=</span> aidx<span class="token punctuation">;</span>
    mobp<span class="token operator">-></span>mo_freepages <span class="token operator">=</span> mobp<span class="token operator">-></span>mo_maxpages <span class="token operator">-</span> mobp<span class="token operator">-></span>mo_alocpages<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><p>一、流程：<br>init_hal-&gt;init_halmm-&gt;init_memmgr<br>//每个页对应一个msadsc_t 结构体，循环填充msadsc_t 结构体数组<br>-&gt;init_msadsc<br>//初始化三类memarea_t，硬件区、内核区、用户区<br>-&gt;init_memarea<br>//对已使用的页打上标记，包括：BIOS中断表、内核栈、内核、内核映像<br>-&gt;init_search_krloccupymm(&amp;kmachbsp);<br>//将页面按地址范围，分配给内存区<br>//然后按顺序依次查找最长连续的页面，根据连续页面的长度，<br>//将这些页面的msadsc_t挂载到memdivmer_t 结构下的bafhlst_t数组dm_mdmlielst中<br>-&gt;init_merlove_mem();<br>//物理地址转为虚拟地址，便于以后使用<br>-&gt;init_memmgrob();</p>
<p>二、对于最后的问题，用了虚拟机进行测试，但无论内存大小，总有56K内存没能找到【有知道的小伙伴，麻烦帮忙解答一下】：<br>1、4G内存情况如下：<br>理论内存：0x1 0000 0000 = 4,194,304K<br>可用内存：0xfff8fc00 = 4,193,855K<br>预留区域：0x52400 = 329K<br>硬件使用：0x10000 = 64K<br>没能找到：0xE000 = 56K</p>
<p>msadsc_t结构体大小为40，使用内存总计为：<br>4,193,855K/4K*40=41,938,520=接近40M</p>
<p>2、2G内存情况如下<br>理论内存：0x8000 0000 =2,097,152K<br>可用内存：0x7ff8fc00 = 2,096,703K<br>预留区域：0x52400 = 329K<br>硬件使用：0x10000 = 64K<br>没能找到：0xE000 = 56K</p>
<p>msadsc_t结构体大小为40，使用内存总计为：<br>2,096,703K/4K*40=20,967,030=接近20M</p>
<p>3、1G内存情况如下<br>理论内存：0x4000 0000= 1,048,576K<br>可用内存：0x3ff8fc00 = 1,048,127K<br>预留区域：0x52400 = 329K<br>硬件使用：0x10000 = 64K<br>没能找到：0xE000 = 56K</p>
<p>msadsc_t结构体大小为40，使用内存总计为：<br>1,048,127K/4K*40=10,481,270=接近10M</p>
<p>三、如果想节约msadsc_t内存的话，感觉有几种方案：<br>1、最简单的方法，就是大内存时采用更大的分页，但应用在申请内存时，同样会有更多内存浪费<br>2、也可以用更复杂的页面管理机制，比如相同属性的连续页面不要用多个单独msadsc_t表示，而用一个msadsc_t表示并标明其范围，并通过skiplist等数据结构加速查询。但无论是申请内存还是归还内存时，性能会有所下降，感觉得不偿失。<br>3、页面分组情况较少的时候，可以通过每个组建立一个链表记录哪些页面属于某个链表，而msadsc_t中只记录地址等少量信息，不适合复杂系统。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-实现内存页分配与释放</title>
    <url>/2021/07/12/cao-zuo-xi-tong-shi-xian-nei-cun-ye-de-fen-pei-yu-shi-fang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="内存页的分配"><a href="#内存页的分配" class="headerlink" title="内存页的分配"></a>内存页的分配</h2><p>如果让你实现一次只分配一个页面，我相信这个问题很好解决，因为你只需要写一段循环代码，在其中遍历出一个空闲的 msadsc_t 结构，就可以返回了，这个算法就可以结束了</p>
<p>但现实却不容许我们这么简单地处理问题，我们内存管理器要为内核、驱动，还有应用提供服务，它们对请求内存页面的多少、内存页面是不是连续，内存页面所处的物理地址都有要求。</p>
<p><strong>内存分配的接口函数</strong></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//内存分配页面框架函数</span>
<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_divpages_fmwk</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mmobjp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrelpnr<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> mrtype<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flgs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//返回mrtype对应的内存区结构的指针</span>
    <span class="token class-name">memarea_t</span> <span class="token operator">*</span>marea <span class="token operator">=</span> <span class="token function">onmrtype_retn_marea</span><span class="token punctuation">(</span>mmobjp<span class="token punctuation">,</span> mrtype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> marea<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">uint_t</span> retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//内存分配的核心函数</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token function">mm_divpages_core</span><span class="token punctuation">(</span>marea<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retpnr<span class="token punctuation">,</span> flgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retmsa<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> retpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//内存分配页面接口</span>

<span class="token comment">//mmobjp->内存管理数据结构指针</span>
<span class="token comment">//pages->请求分配的内存页面数</span>
<span class="token comment">//retrealpnr->存放实际分配内存页面数的指针</span>
<span class="token comment">//mrtype->请求的分配内存页面的内存区类型</span>
<span class="token comment">//flgs->请求分配的内存页面的标志位</span>
<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_division_pages</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mmobjp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrealpnr<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> mrtype<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flgs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> mmobjp <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> retrealpnr <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">==</span> mrtype<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">uint_t</span> retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token function">mm_divpages_fmwk</span><span class="token punctuation">(</span>mmobjp<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retpnr<span class="token punctuation">,</span> mrtype<span class="token punctuation">,</span> flgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retmsa<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>retrealpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>retrealpnr <span class="token operator">=</span> retpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们内存管理代码的结构是：接口函数调用框架函数，框架函数调用核心函数。可以发现，这个接口函数返回的是一个 msadsc_t 结构的指针，如果是多个页面返回的就是起始页面对应的 msadsc_t 结构的指针。</p>
<p>为什么不直接返回内存的物理地址呢？因为我们物理内存管理器是最底层的内存管理器，而上层代码中可能需要页面的相关信息，所以直接返回页面对应 msadsc_t 结构的指针。</p>
<p>还有一个参数是用于返回实际分配的页面数的。比如，内核功能代码请求分配三个页面，我们的内存管理器不能分配三个页面，只能分配两个或四个页面，这时内存管理器就会分配四个页面返回，retrealpnr 指向的变量中就存放数字 4，表示实际分配页面的数量。</p>
<p>有了内存分配接口、框架函数，下面我们来实现内存分配的核心函数，代码如下</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token class-name">bool_t</span> <span class="token function">onmpgs_retn_bafhlst</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span><span class="token operator">*</span>retrelbafh<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span><span class="token operator">*</span>retdivbafh<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//获取bafhlst_t结构数组的开始地址</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhstat <span class="token operator">=</span> malckp<span class="token operator">-></span>ma_mdmdata<span class="token punctuation">.</span>dm_mdmlielst<span class="token punctuation">;</span>       
    <span class="token comment">//根据分配页面数计算出分配页面在dm_mdmlielst数组中下标</span>
    <span class="token class-name">sint_t</span> dividx <span class="token operator">=</span> <span class="token function">retn_divoder</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从第dividx个数组元素开始搜索</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">sint_t</span> idx <span class="token operator">=</span> dividx<span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> MDIVMER_ARR_LMAX<span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token comment">//如果第idx个数组元素对应的一次可分配连续的页面数大于等于请求的页面数，且其中的可分配对象大于0则返回 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bafhstat<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>af_oderpnr <span class="token operator">>=</span> pages <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&lt;</span> bafhstat<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>af_fobjnr<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token comment">//返回请求分配的bafhlst_t结构指针</span>
            <span class="token operator">*</span>retrelbafh <span class="token operator">=</span> <span class="token operator">&amp;</span>bafhstat<span class="token punctuation">[</span>dividx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//返回实际分配的bafhlst_t结构指针</span>
            <span class="token operator">*</span>retdivbafh <span class="token operator">=</span> <span class="token operator">&amp;</span>bafhstat<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>retrelbafh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>retdivbafh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_reldivpages_onmarea</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrelpnr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>retrelbhl <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>retdivbhl <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//根据页面数在内存区的m_mdmlielst数组中找出其中请求分配页面的bafhlst_t结构（retrelbhl）和实际要在其中分配页面的bafhlst_t结构(retdivbhl)</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> <span class="token function">onmpgs_retn_bafhlst</span><span class="token punctuation">(</span>malckp<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retrelbhl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retdivbhl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> rets<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">uint_t</span> retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//实际在bafhlst_t结构中分配页面</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token function">mm_reldpgsdivmsa_bafhl</span><span class="token punctuation">(</span>malckp<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retpnr<span class="token punctuation">,</span> retrelbhl<span class="token punctuation">,</span> retdivbhl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retmsa<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> retpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_divpages_core</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrealpnr<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flgs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint_t</span> retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token comment">//内存区加锁</span>
    <span class="token function">knl_spinlock_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mareap<span class="token operator">-></span>ma_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DMF_RELDIV <span class="token operator">==</span> flgs<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//分配内存</span>
        retmsa <span class="token operator">=</span> <span class="token function">mm_reldivpages_onmarea</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retpnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    retmsa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
ret_step<span class="token operator">:</span>
    <span class="token comment">//内存区锁</span>
    <span class="token function">knl_spinunlock_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mareap<span class="token operator">-></span>ma_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>retrealpnr <span class="token operator">=</span> retpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码中 onmpgs_retn_bafhlst 函数返回的两个 bafhlst_t 结构指针，若是相等的，则在 mm_reldpgsdivmsa_bafhl 函数中很容易处理，只要取出 bafhlst_t 结构中对应的 msadsc_t 结构返回就好了。</p>
<p>问题是很多时候它们不相等，这就要分隔连续的 msadsc_t 结构了，下面我们通过 mm_reldpgsdivmsa_bafhl 这个函数来处理这个问题，代码如下所示</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token class-name">bool_t</span> <span class="token function">mrdmb_add_msa_bafh</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msastat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msaend<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//把一段连续的msadsc_t结构加入到它所对应的bafhlst_t结构中</span>
    msastat<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    msastat<span class="token operator">-></span>md_odlink <span class="token operator">=</span> msaend<span class="token punctuation">;</span>
    msaend<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
    msaend<span class="token operator">-></span>md_odlink <span class="token operator">=</span> bafhp<span class="token punctuation">;</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msastat<span class="token operator">-></span>md_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bafhp<span class="token operator">-></span>af_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-></span>af_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-></span>af_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_divpages_opmsadsc</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msastat<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> mnr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>   <span class="token comment">//单个msadsc_t结构的情况 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mend <span class="token operator">==</span> msastat<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span><span class="token comment">//增加msadsc_t结构中分配计数，分配标志位设置为1</span>
        msastat<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">++</span><span class="token punctuation">;</span>
        msastat<span class="token operator">-></span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_ALLOC<span class="token punctuation">;</span>
        msastat<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
        msastat<span class="token operator">-></span>md_odlink <span class="token operator">=</span> mend<span class="token punctuation">;</span>
        <span class="token keyword">return</span> msastat<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    msastat<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">++</span><span class="token punctuation">;</span>
    msastat<span class="token operator">-></span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_ALLOC<span class="token punctuation">;</span>
    <span class="token comment">//多个msadsc_t结构的情况下，末端msadsc_t结构也设置已分配状态</span>
    mend<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">++</span><span class="token punctuation">;</span>
    mend<span class="token operator">-></span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_ALLOC<span class="token punctuation">;</span>
    msastat<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    msastat<span class="token operator">-></span>md_odlink <span class="token operator">=</span> mend<span class="token punctuation">;</span>
    <span class="token keyword">return</span> msastat<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">mm_retnmsaob_onbafhlst</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmend<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//取出一个msadsc_t结构</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>bafhp<span class="token operator">-></span>af_frelst<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span><span class="token punctuation">,</span> md_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从链表中删除</span>
    <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token operator">-></span>md_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//减少bafhlst_t结构中的msadsc_t计数</span>
    bafhp<span class="token operator">-></span>af_mobjnr<span class="token operator">--</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-></span>af_fobjnr<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">//增加分配计数</span>
    bafhp<span class="token operator">-></span>af_freindx<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">//返回msadsc_t结构</span>
    <span class="token operator">*</span>retmstat <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token comment">//返回当前msadsc_t结构连续的那个结尾的msadsc_t结构 </span>
    <span class="token operator">*</span>retmend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>tmp<span class="token operator">-></span>md_odlink<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>MF_OLKTY_BAFH <span class="token operator">==</span> tmp<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span><span class="token comment">//如果只单个msadsc_t结构，那就是它本身 </span>
        <span class="token operator">*</span>retmend <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_reldpgsdivmsa_bafhl</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrelpnr<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>relbfl<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>divbfl<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmstat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>retmend <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//处理相等的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>relbfl <span class="token operator">==</span> divbfl<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
    <span class="token comment">//从bafhlst_t结构中获取msadsc_t结构的开始与结束地址</span>
        rets <span class="token operator">=</span> <span class="token function">mm_retnmsaob_onbafhlst</span><span class="token punctuation">(</span>relbfl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmstat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmend<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置msadsc_t结构的相关信息表示已经删除</span>
        retmsa <span class="token operator">=</span> <span class="token function">mm_divpages_opmsadsc</span><span class="token punctuation">(</span>retmstat<span class="token punctuation">,</span> relbfl<span class="token operator">-></span>af_oderpnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回实际的分配页数</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> relbfl<span class="token operator">-></span>af_oderpnr<span class="token punctuation">;</span>
        <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//处理不等的情况</span>
    <span class="token comment">//从bafhlst_t结构中获取msadsc_t结构的开始与结束地址</span>
    rets <span class="token operator">=</span> <span class="token function">mm_retnmsaob_onbafhlst</span><span class="token punctuation">(</span>divbfl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmstat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmend<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">uint_t</span> divnr <span class="token operator">=</span> divbfl<span class="token operator">-></span>af_oderpnr<span class="token punctuation">;</span>
     <span class="token comment">//从高bafhlst_t数组元素中向下遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>tmpbfl <span class="token operator">=</span> divbfl <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> tmpbfl <span class="token operator">>=</span> relbfl<span class="token punctuation">;</span> tmpbfl<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//开始分割连续的msadsc_t结构，把剩下的一段连续的msadsc_t结构加入到对应该bafhlst_t结构中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mrdmb_add_msa_bafh</span><span class="token punctuation">(</span>tmpbfl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmstat<span class="token punctuation">[</span>tmpbfl<span class="token operator">-></span>af_oderpnr<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>retmstat<span class="token operator">-></span>md_odlink<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">"mrdmb_add_msa_bafh fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        retmstat<span class="token operator">-></span>md_odlink <span class="token operator">=</span> <span class="token operator">&amp;</span>retmstat<span class="token punctuation">[</span>tmpbfl<span class="token operator">-></span>af_oderpnr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        divnr <span class="token operator">-=</span> tmpbfl<span class="token operator">-></span>af_oderpnr<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    retmsa <span class="token operator">=</span> <span class="token function">mm_divpages_opmsadsc</span><span class="token punctuation">(</span>retmstat<span class="token punctuation">,</span> divnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retmsa<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> relbfl<span class="token operator">-></span>af_oderpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个算法将执行如下步骤：</p>
<ol>
<li>根据一个页面的请求，会返回 m_mdmlielst 数组中的第 0 个 bafhlst_t 结构。</li>
<li>如果第 0 个 bafhlst_t 结构中有 msadsc_t 结构就直接返回，若没有 msadsc_t 结构，就会继续查找 m_mdmlielst 数组中的第 1 个 bafhlst_t 结构。</li>
<li>如果第 1 个 bafhlst_t 结构中也没有 msadsc_t 结构，就会继续查找 m_mdmlielst 数组中的第 2 个 bafhlst_t 结构。</li>
<li>如果第 2 个 bafhlst_t 结构中有 msadsc_t 结构，记住第 2 个 bafhlst_t 结构中对应是 4 个连续的 msadsc_t 结构。这时让这 4 个连续的 msadsc_t 结构从第 2 个 bafhlst_t 结构中脱离。</li>
<li>把这 4 个连续的 msadsc_t 结构，对半分割成 2 个双 msadsc_t 结构，把其中一个双 msadsc_t 结构挂载到第 1 个 bafhlst_t 结构中。</li>
<li>把剩下一个双 msadsc_t 结构，继续对半分割成两个单 msadsc_t 结构，把其中一个单 msadsc_t 结构挂载到第 0 个 bafhlst_t 结构中，剩下一个单 msadsc_t 结构返回给请求者，完成内存分配。</li>
</ol>
<p><img src="https://static001.geekbang.org/resource/image/29/2a/299b8f21c876a2b324da7a2974e8302a.jpg?wh=3976x3118" alt="内存分配算法示意图"></p>
<h2 id="内存页的释放"><a href="#内存页的释放" class="headerlink" title="内存页的释放"></a>内存页的释放</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//释放内存页面核心</span>
<span class="token class-name">bool_t</span> <span class="token function">mm_merpages_core</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>marea<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token comment">//内存区加锁</span>
    <span class="token function">knl_spinlock_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>marea<span class="token operator">-></span>ma_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//针对一个内存区进行操作</span>
    rets <span class="token operator">=</span> <span class="token function">mm_merpages_onmarea</span><span class="token punctuation">(</span>marea<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//内存区解锁</span>
    <span class="token function">knl_spinunlock_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>marea<span class="token operator">-></span>ma_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//释放内存页面框架函数</span>
<span class="token class-name">bool_t</span> <span class="token function">mm_merpages_fmwk</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mmobjp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//获取要释放msadsc_t结构所在的内存区</span>
    <span class="token class-name">memarea_t</span> <span class="token operator">*</span>marea <span class="token operator">=</span> <span class="token function">onfrmsa_retn_marea</span><span class="token punctuation">(</span>mmobjp<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> marea<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//释放内存页面的核心函数</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> <span class="token function">mm_merpages_core</span><span class="token punctuation">(</span>marea<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> rets<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//释放内存页面接口</span>

<span class="token comment">//mmobjp->内存管理数据结构指针</span>
<span class="token comment">//freemsa->释放内存页面对应的首个msadsc_t结构指针</span>
<span class="token comment">//freepgs->请求释放的内存页面数</span>
<span class="token class-name">bool_t</span> <span class="token function">mm_merge_pages</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mmobjp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> mmobjp <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> freemsa <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">></span> freepgs<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//调用释放内存页面的框架函数</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> <span class="token function">mm_merpages_fmwk</span><span class="token punctuation">(</span>mmobjp<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> rets<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们的内存释放页面的代码的结构依然是：接口函数调用框架函数，框架函数调用核心函数，函数的返回值都是 bool 类型，即 TRUE 或者 FALSE，来表示内存页面释放操作成功与否。</p>
<p>我们从框架函数中可以发现，内存区是由 msadsc_t 结构中获取的，因为之前该结构中保留了所在内存区的类型，所以可以查到并返回内存区。</p>
<p>在释放内存页面的核心 mm_merpages_core 函数中，会调用 mm_merpages_onmarea 函数，下面我们来实现这个函数，代码如下。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token class-name">sint_t</span> <span class="token function">mm_merpages_opmsadsc</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafh<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fmend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>freemsa<span class="token operator">-></span>md_odlink<span class="token punctuation">;</span>
    <span class="token comment">//处理只有一个单页的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>freemsa <span class="token operator">==</span> fmend<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//页面的分配计数减1</span>
        freemsa<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> freemsa<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span><span class="token comment">//如果依然大于0说明它是共享页面 直接返回1指示不需要进行下一步操作</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//设置页未分配的标志</span>
        freemsa<span class="token operator">-></span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_NO_ALLOC<span class="token punctuation">;</span>
        freemsa<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
        freemsa<span class="token operator">-></span>md_odlink <span class="token operator">=</span> bafh<span class="token punctuation">;</span><span class="token comment">//指向所属的bafhlst_t结构</span>
        <span class="token comment">//返回2指示需要进行下一步操作</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//多个页面的超始页面和结束页面都要减一</span>
    freemsa<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">--</span><span class="token punctuation">;</span>
    fmend<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">//如果依然大于0说明它是共享页面 直接返回1指示不需要进行下一步操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> freemsa<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//设置起始、结束页页未分配的标志</span>
    freemsa<span class="token operator">-></span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_NO_ALLOC<span class="token punctuation">;</span>
    fmend<span class="token operator">-></span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_NO_ALLOC<span class="token punctuation">;</span>
    freemsa<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    <span class="token comment">//起始页面指向结束页面</span>
    freemsa<span class="token operator">-></span>md_odlink <span class="token operator">=</span> fmend<span class="token punctuation">;</span>
    fmend<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
    <span class="token comment">//结束页面指向所属的bafhlst_t结构</span>
    fmend<span class="token operator">-></span>md_odlink <span class="token operator">=</span> bafh<span class="token punctuation">;</span>
    <span class="token comment">//返回2指示需要进行下一步操作</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">onfpgs_retn_bafhlst</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span><span class="token operator">*</span>retrelbf<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmerbf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//获取bafhlst_t结构数组的开始地址</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhstat <span class="token operator">=</span> malckp<span class="token operator">-></span>ma_mdmdata<span class="token punctuation">.</span>dm_mdmlielst<span class="token punctuation">;</span>
    <span class="token comment">//根据分配页面数计算出分配页面在dm_mdmlielst数组中下标</span>
    <span class="token class-name">sint_t</span> dividx <span class="token operator">=</span> <span class="token function">retn_divoder</span><span class="token punctuation">(</span>freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回请求释放的bafhlst_t结构指针</span>
    <span class="token operator">*</span>retrelbf <span class="token operator">=</span> <span class="token operator">&amp;</span>bafhstat<span class="token punctuation">[</span>dividx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//返回最大释放的bafhlst_t结构指针</span>
    <span class="token operator">*</span>retmerbf <span class="token operator">=</span> <span class="token operator">&amp;</span>bafhstat<span class="token punctuation">[</span>MDIVMER_ARR_LMAX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">mm_merpages_onmarea</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>prcbf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> pocs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>retrelbf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>retmerbf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token comment">//根据freepgs返回请求释放的和最大释放的bafhlst_t结构指针</span>
    rets <span class="token operator">=</span> <span class="token function">onfpgs_retn_bafhlst</span><span class="token punctuation">(</span>malckp<span class="token punctuation">,</span> freepgs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retrelbf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmerbf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置msadsc_t结构的信息，完成释放，返回1表示不需要下一步合并操作，返回2表示要进行合并操作</span>
    <span class="token class-name">sint_t</span> mopms <span class="token operator">=</span> <span class="token function">mm_merpages_opmsadsc</span><span class="token punctuation">(</span>retrelbf<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> mopms<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//把msadsc_t结构进行合并然后加入对应bafhlst_t结构</span>
        <span class="token keyword">return</span> <span class="token function">mm_merpages_onbafhlst</span><span class="token punctuation">(</span>freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">,</span> retrelbf<span class="token punctuation">,</span> retmerbf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mopms<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在经过 mm_merpages_opmsadsc 函数操作之后，我们并没有将 msadsc_t 结构加入到对应的 bafhlst_t 结构中，这其实是在下一个函数完成的，那就是 mm_merpages_onbafhlst 这个函数。下面我们来实现它，代码如下所示。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token class-name">bool_t</span> <span class="token function">mpobf_add_msadsc</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemend<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    freemstat<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    <span class="token comment">//设置起始页面指向结束页</span>
    freemstat<span class="token operator">-></span>md_odlink <span class="token operator">=</span> freemend<span class="token punctuation">;</span>
    freemend<span class="token operator">-></span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
    <span class="token comment">//结束页面指向所属的bafhlst_t结构</span>
    freemend<span class="token operator">-></span>md_odlink <span class="token operator">=</span> bafhp<span class="token punctuation">;</span>
    <span class="token comment">//把起始页面挂载到所属的bafhlst_t结构中</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>freemstat<span class="token operator">-></span>md_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bafhp<span class="token operator">-></span>af_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//增加bafhlst_t结构的空闲页面对象和总的页面对象的计数</span>
    bafhp<span class="token operator">-></span>af_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-></span>af_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">bool_t</span> <span class="token function">mm_merpages_onbafhlst</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>relbf<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>merbf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">sint_t</span> rets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mnxs <span class="token operator">=</span> freemsa<span class="token punctuation">,</span> <span class="token operator">*</span>mnxe <span class="token operator">=</span> <span class="token operator">&amp;</span>freemsa<span class="token punctuation">[</span>freepgs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>tmpbf <span class="token operator">=</span> relbf<span class="token punctuation">;</span>
    <span class="token comment">//从实际要开始遍历，直到最高的那个bafhlst_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> tmpbf <span class="token operator">&lt;</span> merbf<span class="token punctuation">;</span> tmpbf<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//查看最大地址连续、且空闲msadsc_t结构，如释放的是第0个msadsc_t结构我们就去查找第1个msadsc_t结构是否空闲，且与第0个msadsc_t结构的地址是不是连续的</span>
        rets <span class="token operator">=</span> <span class="token function">mm_find_cmsa2blk</span><span class="token punctuation">(</span>tmpbf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mnxs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mnxe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> rets<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//把合并的msadsc_t结构（从mnxs到mnxe）加入到对应的bafhlst_t结构中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpobf_add_msadsc</span><span class="token punctuation">(</span>tmpbf<span class="token punctuation">,</span> mnxs<span class="token punctuation">,</span> mnxe<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>最核心的还是要对空闲页面进行合并，合并成更大的连续的内存页面</strong></p>
<p>比如，现在我们要释放一个页面，这个算法将执行如下步骤。</p>
<ol>
<li>释放一个页面，会返回 m_mdmlielst 数组中的第 0 个 bafhlst_t 结构。设置这个页面对应的 msadsc_t 结构的相关信息，表示已经执行了释放操作。</li>
<li>开始查看第 0 个 bafhlst_t 结构中有没有空闲的 msadsc_t，并且它和要释放的 msadsc_t 对应的物理地址是连续的。没有则把这个释放的 msadsc_t 挂载第 0 个 bafhlst_t 结构中，算法结束，否则进入下一步。</li>
<li>把第 0 个 bafhlst_t 结构中的 msadsc_t 结构拿出来与释放的 msadsc_t 结构，合并成 2 个连续且更大的 msadsc_t。继续查看第 1 个 bafhlst_t 结构中有没有空闲的 msadsc_t，而且这个空闲 msadsc_t 要和上一步合并的 2 个 msadsc_t 对应的物理地址是连续的。</li>
<li>没有则把这个合并的 2 个 msadsc_t 挂载第 1 个 bafhlst_t 结构中，算法结束，否则进入下一步。</li>
<li>把第 1 个 bafhlst_t 结构中的 2 个连续的 msadsc_t 结构，还有合并的 2 个地址连续的 msadsc_t 结构拿出来，合并成 4 个连续且更大的 msadsc_t 结构。</li>
<li>继续查看第 2 个 bafhlst_t 结构，有没有空闲的 msadsc_t 结构，并且它要和上一步合并的 4 个 msadsc_t 结构对应的物理地址是连续的。</li>
<li>没有则把这个合并的 4 个 msadsc_t 挂载第 2 个 bafhlst_t 结构中，算法结束。</li>
</ol>
<p><img src="https://static001.geekbang.org/resource/image/a2/34/a280682b0ee533984c4yya14dee67834.jpg?wh=4049x3320" alt="内存释放算法"></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-第一个C函数-实现板级初始化</title>
    <url>/2021/07/05/cao-zuo-xi-tong-di-yi-ge-c-han-shu-shi-xian-ban-ji-chu-shi-hua/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一个C函数"><a href="#第一个C函数" class="headerlink" title="第一个C函数"></a>第一个C函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">hal_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//第一步：初始化hal层</span>
    <span class="token comment">//第二步：初始化内核层</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>死循环避免函数返回</p>
<h2 id="hal层初始化"><a href="#hal层初始化" class="headerlink" title="hal层初始化"></a>hal层初始化</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_hal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//初始化平台</span>
    <span class="token comment">//初始化内存</span>
    <span class="token comment">//初始化中断</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>初始化平台、初始化内存、初始化中断的功能函数</p>
<h3 id="初始化平台"><a href="#初始化平台" class="headerlink" title="初始化平台"></a>初始化平台</h3><ol>
<li><p>把二级引导器建立的机器信息结构复制到 hal 层中的一个全局变量中，方便内核中的其它代码使用里面的信息，之后二级引导器建立的数据所占用的内存都会被释放。</p>
</li>
<li><p>要初始化图形显示驱动，内核在运行过程要在屏幕上输出信息</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">void</span> <span class="token function">machbstart_t_init</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//清零</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>initp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">init_machbstart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">machbstart_t</span> <span class="token operator">*</span>kmbsp <span class="token operator">=</span> <span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">;</span>
    <span class="token class-name">machbstart_t</span> <span class="token operator">*</span>smbsp <span class="token operator">=</span> MBSPADR<span class="token punctuation">;</span><span class="token comment">//物理地址1MB处</span>
    <span class="token function">machbstart_t_init</span><span class="token punctuation">(</span>kmbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//复制，要把地址转换成虚拟地址</span>
    <span class="token function">memcopy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>smbsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>kmbsp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//平台初始化函数</span>
<span class="token keyword">void</span> <span class="token function">init_halplaltform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//复制机器信息结构</span>
    <span class="token function">init_machbstart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化图形显示驱动</span>
    <span class="token function">init_bdvideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>kmachbsp结构体类型是 machbstart_t，这个结构和二级引导器所使用的一样</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//全局变量定义变量放在data段</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HAL_DEFGLOB_VARIABLE</span><span class="token expression"><span class="token punctuation">(</span>vartype<span class="token punctuation">,</span>varname<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
<span class="token expression">EXTERN  <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span></span><span class="token string">".data"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> vartype varname</span></span>

<span class="token function">HAL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span><span class="token punctuation">,</span>kmachbsp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>init_bdvideo函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_bdvideo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">dftgraph_t</span> <span class="token operator">*</span>kghp <span class="token operator">=</span> <span class="token operator">&amp;</span>kdftgh<span class="token punctuation">;</span>
    <span class="token comment">//初始化图形数据结构，里面放有图形模式，分辨率，图形驱动函数指针</span>
    <span class="token function">init_dftgraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始bga图形显卡的函数指针</span>
    <span class="token function">init_bga</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始vbe图形显卡的函数指针</span>
    <span class="token function">init_vbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//清空屏幕 为黑色</span>
    <span class="token function">fill_graph</span><span class="token punctuation">(</span>kghp<span class="token punctuation">,</span> <span class="token function">BGRA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//显示背景图片 </span>
    <span class="token function">set_charsdxwflush</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>dftgraph_t结构体</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_DFTGRAPH</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> gh_mode<span class="token punctuation">;</span>         <span class="token comment">//图形模式</span>
    <span class="token class-name">u64_t</span> gh_x<span class="token punctuation">;</span>            <span class="token comment">//水平像素点</span>
    <span class="token class-name">u64_t</span> gh_y<span class="token punctuation">;</span>            <span class="token comment">//垂直像素点</span>
    <span class="token class-name">u64_t</span> gh_framphyadr<span class="token punctuation">;</span>   <span class="token comment">//显存物理地址 </span>
    <span class="token class-name">u64_t</span> gh_fvrmphyadr<span class="token punctuation">;</span>   <span class="token comment">//显存虚拟地址</span>
    <span class="token class-name">u64_t</span> gh_fvrmsz<span class="token punctuation">;</span>       <span class="token comment">//显存大小</span>
    <span class="token class-name">u64_t</span> gh_onepixbits<span class="token punctuation">;</span>   <span class="token comment">//一个像素字占用的数据位数</span>
    <span class="token class-name">u64_t</span> gh_onepixbyte<span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> gh_vbemodenr<span class="token punctuation">;</span>    <span class="token comment">//vbe模式号</span>
    <span class="token class-name">u64_t</span> gh_bank<span class="token punctuation">;</span>         <span class="token comment">//显存的bank数</span>
    <span class="token class-name">u64_t</span> gh_curdipbnk<span class="token punctuation">;</span>    <span class="token comment">//当前bank</span>
    <span class="token class-name">u64_t</span> gh_nextbnk<span class="token punctuation">;</span>      <span class="token comment">//下一个bank</span>
    <span class="token class-name">u64_t</span> gh_banksz<span class="token punctuation">;</span>       <span class="token comment">//bank大小</span>
    <span class="token class-name">u64_t</span> gh_fontadr<span class="token punctuation">;</span>      <span class="token comment">//字库地址</span>
    <span class="token class-name">u64_t</span> gh_fontsz<span class="token punctuation">;</span>       <span class="token comment">//字库大小</span>
    <span class="token class-name">u64_t</span> gh_fnthight<span class="token punctuation">;</span>     <span class="token comment">//字体高度</span>
    <span class="token class-name">u64_t</span> gh_nxtcharsx<span class="token punctuation">;</span>    <span class="token comment">//下一字符显示的x坐标</span>
    <span class="token class-name">u64_t</span> gh_nxtcharsy<span class="token punctuation">;</span>    <span class="token comment">//下一字符显示的y坐标</span>
    <span class="token class-name">u64_t</span> gh_linesz<span class="token punctuation">;</span>       <span class="token comment">//字符行高</span>
    <span class="token class-name">pixl_t</span> gh_deffontpx<span class="token punctuation">;</span>   <span class="token comment">//默认字体大小</span>
    <span class="token class-name">u64_t</span> gh_chardxw<span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> gh_flush<span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> gh_framnr<span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> gh_fshdata<span class="token punctuation">;</span>      <span class="token comment">//刷新相关的</span>
    <span class="token class-name">dftghops_t</span> gh_opfun<span class="token punctuation">;</span>   <span class="token comment">//图形驱动操作函数指针结构体</span>
<span class="token punctuation">&#125;</span><span class="token class-name">dftgraph_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_DFTGHOPS</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//读写显存数据</span>
    <span class="token class-name">size_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> outp<span class="token punctuation">,</span><span class="token class-name">size_t</span> rdsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> inp<span class="token punctuation">,</span><span class="token class-name">size_t</span> wesz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_ioctrl<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> outp<span class="token punctuation">,</span><span class="token class-name">uint_t</span> iocode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//刷新</span>
    <span class="token keyword">void</span>   <span class="token punctuation">(</span><span class="token operator">*</span>dgo_flush<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_set_bank<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span> <span class="token class-name">sint_t</span> bnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//读写像素</span>
    <span class="token class-name">pixl_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_readpix<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">uint_t</span> x<span class="token punctuation">,</span><span class="token class-name">uint_t</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span>   <span class="token punctuation">(</span><span class="token operator">*</span>dgo_writepix<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">pixl_t</span> pix<span class="token punctuation">,</span><span class="token class-name">uint_t</span> x<span class="token punctuation">,</span><span class="token class-name">uint_t</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//直接读写像素 </span>
    <span class="token class-name">pixl_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_dxreadpix<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">uint_t</span> x<span class="token punctuation">,</span><span class="token class-name">uint_t</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span>   <span class="token punctuation">(</span><span class="token operator">*</span>dgo_dxwritepix<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">pixl_t</span> pix<span class="token punctuation">,</span><span class="token class-name">uint_t</span> x<span class="token punctuation">,</span><span class="token class-name">uint_t</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置x，y坐标和偏移</span>
    <span class="token class-name">sint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_set_xy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">uint_t</span> x<span class="token punctuation">,</span><span class="token class-name">uint_t</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_set_vwh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">uint_t</span> vwt<span class="token punctuation">,</span><span class="token class-name">uint_t</span> vhi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_set_xyoffset<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">uint_t</span> xoff<span class="token punctuation">,</span><span class="token class-name">uint_t</span> yoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取x，y坐标和偏移</span>
    <span class="token class-name">sint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_get_xy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">uint_t</span><span class="token operator">*</span> rx<span class="token punctuation">,</span><span class="token class-name">uint_t</span><span class="token operator">*</span> ry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_get_vwh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">uint_t</span><span class="token operator">*</span> rvwt<span class="token punctuation">,</span><span class="token class-name">uint_t</span><span class="token operator">*</span> rvhi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>dgo_get_xyoffset<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ghpdev<span class="token punctuation">,</span><span class="token class-name">uint_t</span><span class="token operator">*</span> rxoff<span class="token punctuation">,</span><span class="token class-name">uint_t</span><span class="token operator">*</span> ryoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token class-name">dftghops_t</span><span class="token punctuation">;</span>
<span class="token comment">//刷新显存</span>
<span class="token keyword">void</span> <span class="token function">flush_videoram</span><span class="token punctuation">(</span><span class="token class-name">dftgraph_t</span> <span class="token operator">*</span>kghp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    kghp<span class="token operator">-></span>gh_opfun<span class="token punctuation">.</span><span class="token function">dgo_flush</span><span class="token punctuation">(</span>kghp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后调用函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//在halinit.c文件中</span>
<span class="token keyword">void</span> <span class="token function">init_hal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">init_halplaltform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//在hal_start.c文件中</span>
<span class="token keyword">void</span> <span class="token function">hal_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">init_hal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化hal层，其中会调用初始化平台函数，在那里会调用初始化图形驱动</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h3 id="初始化内存"><a href="#初始化内存" class="headerlink" title="初始化内存"></a>初始化内存</h3><p>相比较二级引导器的内存布局信息，内存管理器需要保存更多的信息，最好是顺序的内存布局信息，这样可以增加额外的功能属性，同时降低代码的复杂度。</p>
<p>定义结构<code>s_PHYMMARGE</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_T_OSAPUSERRAM</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_T_RESERVRAM</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_T_HWUSERRAM</span> <span class="token expression"><span class="token number">8</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_T_ARACONRAM</span> <span class="token expression"><span class="token number">0xf</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_T_BUGRAM</span> <span class="token expression"><span class="token number">0xff</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_F_X86_32</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_F_X86_64</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_F_ARM_32</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_F_ARM_64</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMR_F_HAL_MASK</span> <span class="token expression"><span class="token number">0xff</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_PHYMMARGE</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">spinlock_t</span> pmr_lock<span class="token punctuation">;</span><span class="token comment">//保护这个结构是自旋锁</span>
    <span class="token class-name">u32_t</span> pmr_type<span class="token punctuation">;</span>     <span class="token comment">//内存地址空间类型</span>
    <span class="token class-name">u32_t</span> pmr_stype<span class="token punctuation">;</span>
    <span class="token class-name">u32_t</span> pmr_dtype<span class="token punctuation">;</span>    <span class="token comment">//内存地址空间的子类型，见上面的宏</span>
    <span class="token class-name">u32_t</span> pmr_flgs<span class="token punctuation">;</span>     <span class="token comment">//结构的标志与状态</span>
    <span class="token class-name">u32_t</span> pmr_stus<span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> pmr_saddr<span class="token punctuation">;</span>    <span class="token comment">//内存空间的开始地址</span>
    <span class="token class-name">u64_t</span> pmr_lsize<span class="token punctuation">;</span>    <span class="token comment">//内存空间的大小</span>
    <span class="token class-name">u64_t</span> pmr_end<span class="token punctuation">;</span>      <span class="token comment">//内存空间的结束地址</span>
    <span class="token class-name">u64_t</span> pmr_rrvmsaddr<span class="token punctuation">;</span><span class="token comment">//内存保留空间的开始地址</span>
    <span class="token class-name">u64_t</span> pmr_rrvmend<span class="token punctuation">;</span>  <span class="token comment">//内存保留空间的结束地址</span>
    <span class="token keyword">void</span><span class="token operator">*</span> pmr_prip<span class="token punctuation">;</span>     <span class="token comment">//结构的私有数据指针，以后扩展所用</span>
    <span class="token keyword">void</span><span class="token operator">*</span> pmr_extp<span class="token punctuation">;</span>     <span class="token comment">//结构的扩展数据指针，以后扩展所用</span>
<span class="token punctuation">&#125;</span><span class="token class-name">phymmarge_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有些情况下内核要另起炉灶，不想把所有的内存空间都交给内存管理器去管理，所以要保留一部分内存空间，这就是上面结构中那两个 pmr_rrvmsaddr、pmr_rrvmend 字段的作用。</p>
<p>有了数据结构，我们还要写代码来操作它：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">u64_t</span> <span class="token function">initpmrge_core</span><span class="token punctuation">(</span><span class="token class-name">e820map_t</span> <span class="token operator">*</span>e8sp<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> e8nr<span class="token punctuation">,</span> <span class="token class-name">phymmarge_t</span> <span class="token operator">*</span>pmargesp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> retnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e8nr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//根据一个e820map_t结构建立一个phymmarge_t结构</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">init_one_pmrge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e8sp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pmargesp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> retnr<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        retnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> retnr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init_phymmarge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp <span class="token operator">=</span> <span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">;</span>
    <span class="token class-name">phymmarge_t</span> <span class="token operator">*</span>pmarge_adr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> pmrgesz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//根据machbstart_t机器信息结构计算获得phymmarge_t结构的开始地址和大小</span>
    <span class="token function">ret_phymmarge_adrandsz</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pmarge_adr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pmrgesz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> tmppmrphyadr <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_nextwtpadr<span class="token punctuation">;</span>
    <span class="token class-name">e820map_t</span> <span class="token operator">*</span>e8p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">e820map_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mbsp<span class="token operator">-></span>mb_e820padr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立phymmarge_t结构</span>
    <span class="token class-name">u64_t</span> ipmgnr <span class="token operator">=</span> <span class="token function">initpmrge_core</span><span class="token punctuation">(</span>e8p<span class="token punctuation">,</span> mbsp<span class="token operator">-></span>mb_e820nr<span class="token punctuation">,</span> pmarge_adr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把phymmarge_t结构的地址大小个数保存machbstart_t机器信息结构中</span>
    mbsp<span class="token operator">-></span>mb_e820expadr <span class="token operator">=</span> tmppmrphyadr<span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_e820exnr <span class="token operator">=</span> ipmgnr<span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_e820exsz <span class="token operator">=</span> ipmgnr <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">phymmarge_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_nextwtpadr <span class="token operator">=</span> <span class="token function">PAGE_ALIGN</span><span class="token punctuation">(</span>mbsp<span class="token operator">-></span>mb_e820expadr <span class="token operator">+</span> mbsp<span class="token operator">-></span>mb_e820exsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//phymmarge_t结构中地址空间从低到高进行排序，我已经帮你写好了</span>
    <span class="token function">phymmarge_sort</span><span class="token punctuation">(</span>pmarge_adr<span class="token punctuation">,</span> ipmgnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据 e820map_t 结构数组，建立了一个 phymmarge_t 结构数组，init_one_pmrge 函数正是把 e820map_t 结构中的信息复制到 phymmarge_t 结构中来。</p>
<p>调用</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_halmm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">init_phymmarge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//init_memmgr();</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="初始化中断"><a href="#初始化中断" class="headerlink" title="初始化中断"></a>初始化中断</h3><p>在 x86 CPU 上，最多支持 256 个中断，还记得前面所说的中断表和中断门描述符吗，这意味着我们要准备 256 个中断门描述符和 256 个中断处理程序的入口。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_GATE</span>
<span class="token punctuation">&#123;</span>
        <span class="token class-name">u16_t</span>   offset_low<span class="token punctuation">;</span>     <span class="token comment">/* 偏移 */</span>
        <span class="token class-name">u16_t</span>   selector<span class="token punctuation">;</span>       <span class="token comment">/* 段选择子 */</span>
        <span class="token class-name">u8_t</span>    dcount<span class="token punctuation">;</span>         <span class="token comment">/* 该字段只在调用门描述符中有效。如果在利用调用门调用子程序时引起特权级的转换和堆栈的改变，需要将外层堆栈中的参数复制到内层堆栈。该双字计数字段就是用于说明这种情况发生时，要复制的双字参数的数量。*/</span>
        <span class="token class-name">u8_t</span>    attr<span class="token punctuation">;</span>           <span class="token comment">/* P(1) DPL(2) DT(1) TYPE(4) */</span>
        <span class="token class-name">u16_t</span>   offset_high<span class="token punctuation">;</span>    <span class="token comment">/* 偏移的高位段 */</span>
        <span class="token class-name">u32_t</span>   offset_high_h<span class="token punctuation">;</span>
        <span class="token class-name">u32_t</span>   offset_resv<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">gate_t</span><span class="token punctuation">;</span>
<span class="token comment">//定义中断表</span>
<span class="token function">HAL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">gate_t</span><span class="token punctuation">,</span>x64_idt<span class="token punctuation">)</span><span class="token punctuation">[</span>IDTMAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>中断表其实是个 gate_t 结构的数组，由 CPU 的 IDTR 寄存器指向，IDTMAX 为 256</p>
<p>定义函数给中断表设置数据</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//vector 向量也是中断号</span>
<span class="token comment">//desc_type 中断门类型，中断门，陷阱门</span>
<span class="token comment">//handler 中断处理程序的入口地址</span>
<span class="token comment">//privilege 中断门的权限级别</span>
<span class="token keyword">void</span> <span class="token function">set_idt_desc</span><span class="token punctuation">(</span><span class="token class-name">u8_t</span> vector<span class="token punctuation">,</span> <span class="token class-name">u8_t</span> desc_type<span class="token punctuation">,</span> <span class="token class-name">inthandler_t</span> handler<span class="token punctuation">,</span> <span class="token class-name">u8_t</span> privilege<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">gate_t</span> <span class="token operator">*</span>p_gate <span class="token operator">=</span> <span class="token operator">&amp;</span>x64_idt<span class="token punctuation">[</span>vector<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> base <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span>handler<span class="token punctuation">;</span>
    p_gate<span class="token operator">-></span>offset_low <span class="token operator">=</span> base <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>
    p_gate<span class="token operator">-></span>selector <span class="token operator">=</span> SELECTOR_KERNEL_CS<span class="token punctuation">;</span>
    p_gate<span class="token operator">-></span>dcount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    p_gate<span class="token operator">-></span>attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>desc_type <span class="token operator">|</span> <span class="token punctuation">(</span>privilege <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p_gate<span class="token operator">-></span>offset_high <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u16_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>base <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p_gate<span class="token operator">-></span>offset_high_h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>base <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p_gate<span class="token operator">-></span>offset_resv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码，正是按照要求，把这些数据填入中断门描述符中的。有了中断门之后，还差中断处理程序，中断处理程序只负责这三件事：</p>
<ol>
<li>保护 CPU 寄存器，即中断发生时的程序运行的上下文。</li>
<li>调用中断处理程序，这个程序可以是修复异常的，可以是设备驱动程序中对设备响应的程序。</li>
<li>恢复 CPU 寄存器，即恢复中断时程序运行的上下文，使程序继续运行。</li>
</ol>
<p>先来写好完成以上三个功能的汇编宏代码，避免写 256 遍同样的代码，代码如下</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">&#x2F;&#x2F;保存中断后的寄存器
%macro  SAVEALL  0
  push rax
  push rbx
  push rcx
  push rdx
  push rbp
  push rsi
  push rdi
  push r8
  push r9
  push r10
  push r11
  push r12
  push r13
  push r14
  push r15
  xor r14,r14
  mov r14w,ds
  push r14
  mov r14w,es
  push r14
  mov r14w,fs
  push r14
  mov r14w,gs
  push r14
%endmacro
&#x2F;&#x2F;恢复中断后寄存器
%macro  RESTOREALL  0
  pop r14
  mov gs,r14w
  pop r14 
  mov fs,r14w
  pop r14
  mov es,r14w
  pop r14
  mov ds,r14w
  pop r15
  pop r14
  pop r13
  pop r12
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdi
  pop rsi
  pop rbp
  pop rdx
  pop rcx
  pop rbx
  pop rax
  iretq
%endmacro
&#x2F;&#x2F;保存异常下的寄存器
%macro  SAVEALLFAULT 0
  push rax
  push rbx
  push rcx
  push rdx
  push rbp
  push rsi
  push rdi
  push r8
  push r9
  push r10
  push r11
  push r12
  push r13
  push r14
  push r15
  xor r14,r14
  mov r14w,ds
  push r14
  mov r14w,es
  push r14
  mov r14w,fs
  push r14
  mov r14w,gs
  push r14
%endmacro
&#x2F;&#x2F;恢复异常下寄存器
%macro  RESTOREALLFAULT  0
  pop r14
  mov gs,r14w
  pop r14 
  mov fs,r14w
  pop r14
  mov es,r14w
  pop r14
  mov ds,r14w
  pop r15
  pop r14
  pop r13
  pop r12
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdi
  pop rsi
  pop rbp
  pop rdx
  pop rcx
  pop rbx
  pop rax
  add rsp,8
  iretq
%endmacro
&#x2F;&#x2F;没有错误码CPU异常
%macro  SRFTFAULT 1
  push    _NOERRO_CODE
  SAVEALLFAULT
  mov r14w,0x10
  mov ds,r14w
  mov es,r14w
  mov fs,r14w
  mov gs,r14w
  mov   rdi,%1 ;rdi, rsi
  mov   rsi,rsp
  call   hal_fault_allocator
  RESTOREALLFAULT
%endmacro
&#x2F;&#x2F;CPU异常
%macro  SRFTFAULT_ECODE 1
  SAVEALLFAULT
  mov r14w,0x10
  mov ds,r14w
  mov es,r14w
  mov fs,r14w
  mov gs,r14w
  mov   rdi,%1
  mov   rsi,rsp
  call   hal_fault_allocator
  RESTOREALLFAULT
%endmacro
&#x2F;&#x2F;硬件中断
%macro  HARWINT  1
  SAVEALL
  mov r14w,0x10
  mov ds,r14w
  mov es,r14w
  mov fs,r14w
  mov gs,r14w
  mov  rdi, %1
  mov   rsi,rsp
  call    hal_intpt_allocator
  RESTOREALL
%endmacro<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有的 CPU 异常，CPU 自动把异常码压入到栈中，而有的 CPU 异常没有异常码，为了统一，我们对没有异常码的<strong>手动压入一个常数，维持栈的平衡</strong>。</p>
<p>有了中断异常处理的宏，我们还要它们变成中断异常的处理程序入口点函数。汇编函数其实就是一个标号加一段汇编代码，C 编译器把 C 语言函数编译成汇编代码后，也是标号加汇编代码，函数名就是标号</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//除法错误异常 比如除0</span>
exc_divide_error<span class="token operator">:</span>
  SRFTFAULT <span class="token number">0</span>
<span class="token comment">//单步执行异常</span>
exc_single_step_exception<span class="token operator">:</span>
  SRFTFAULT <span class="token number">1</span>
exc_nmi<span class="token operator">:</span>
  SRFTFAULT <span class="token number">2</span>
<span class="token comment">//调试断点异常</span>
exc_breakpoint_exception<span class="token operator">:</span>
  SRFTFAULT <span class="token number">3</span>
<span class="token comment">//溢出异常</span>
exc_overflow<span class="token operator">:</span>
  SRFTFAULT <span class="token number">4</span>
<span class="token comment">//段不存在异常</span>
exc_segment_not_present<span class="token operator">:</span>
  SRFTFAULT_ECODE <span class="token number">11</span>
<span class="token comment">//栈异常</span>
exc_stack_exception<span class="token operator">:</span>
  SRFTFAULT_ECODE <span class="token number">12</span>
<span class="token comment">//通用异常</span>
exc_general_protection<span class="token operator">:</span>
  SRFTFAULT_ECODE <span class="token number">13</span>
<span class="token comment">//缺页异常</span>
exc_page_fault<span class="token operator">:</span>
  SRFTFAULT_ECODE <span class="token number">14</span>
hxi_exc_general_intpfault<span class="token operator">:</span>
  SRFTFAULT <span class="token number">256</span>
<span class="token comment">//硬件1～7号中断</span>
hxi_hwint00<span class="token operator">:</span>
  <span class="token function">HARWINT</span>  <span class="token punctuation">(</span>INT_VECTOR_IRQ0<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span>
hxi_hwint01<span class="token operator">:</span>
  <span class="token function">HARWINT</span>  <span class="token punctuation">(</span>INT_VECTOR_IRQ0<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
hxi_hwint02<span class="token operator">:</span>
  <span class="token function">HARWINT</span>  <span class="token punctuation">(</span>INT_VECTOR_IRQ0<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>
hxi_hwint03<span class="token operator">:</span>
  <span class="token function">HARWINT</span>  <span class="token punctuation">(</span>INT_VECTOR_IRQ0<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span>
hxi_hwint04<span class="token operator">:</span>
  <span class="token function">HARWINT</span>  <span class="token punctuation">(</span>INT_VECTOR_IRQ0<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>
hxi_hwint05<span class="token operator">:</span>
  <span class="token function">HARWINT</span>  <span class="token punctuation">(</span>INT_VECTOR_IRQ0<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span>
hxi_hwint06<span class="token operator">:</span>
  <span class="token function">HARWINT</span>  <span class="token punctuation">(</span>INT_VECTOR_IRQ0<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span>
hxi_hwint07<span class="token operator">:</span>
  <span class="token function">HARWINT</span>  <span class="token punctuation">(</span>INT_VECTOR_IRQ0<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有了中断程序入口地址，就可以设置中断门描述符</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_idt_descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">//一开始把所有中断的处理程序设置为保留的通用处理程序</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u16_t</span> intindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> intindx <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> intindx<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">set_idt_desc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u8_t</span><span class="token punctuation">)</span>intindx<span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> hxi_exc_general_intpfault<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_DIVIDE<span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> exc_divide_error<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_DEBUG<span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> exc_single_step_exception<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_NMI<span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> exc_nmi<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_BREAKPOINT<span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> exc_breakpoint_exception<span class="token punctuation">,</span> PRIVILEGE_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_OVERFLOW<span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> exc_overflow<span class="token punctuation">,</span> PRIVILEGE_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//篇幅所限，未全部展示</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_PAGE_FAULT<span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> exc_page_fault<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_IRQ0 <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> hxi_hwint00<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_IRQ0 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> hxi_hwint01<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_IRQ0 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> hxi_hwint02<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_idt_desc</span><span class="token punctuation">(</span>INT_VECTOR_IRQ0 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> DA_386IGate<span class="token punctuation">,</span> hxi_hwint03<span class="token punctuation">,</span> PRIVILEGE_KRNL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//篇幅所限，未全部展示</span>
     <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_halintupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">init_idt_descriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_intfltdsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是，前面我们只是解决了中断的 CPU 相关部分，而 CPU 只是响应中断，但是并不能解决产生中断的问题。比如缺页中断来了，我们要解决内存地址映射关系，程序才可以继续运行。再比如硬盘中断来了，我们要读取硬盘的数据，要处理这问题，就要写好相应的处理函数。</p>
<p><img src="https://static001.geekbang.org/resource/image/fd/7a/fd2cd9e5b63cd7e52cd68b65e81aee7a.jpg" alt="中断框架设计图"></p>
<p>中断异常描述符</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_INTFLTDSC</span><span class="token punctuation">&#123;</span>    
    <span class="token class-name">spinlock_t</span>  i_lock<span class="token punctuation">;</span>    
    <span class="token class-name">u32_t</span>       i_flg<span class="token punctuation">;</span>    
    <span class="token class-name">u32_t</span>       i_stus<span class="token punctuation">;</span>    
    <span class="token class-name">uint_t</span>      i_prity<span class="token punctuation">;</span>        <span class="token comment">//中断优先级    </span>
    <span class="token class-name">uint_t</span>      i_irqnr<span class="token punctuation">;</span>        <span class="token comment">//中断号    </span>
    <span class="token class-name">uint_t</span>      i_deep<span class="token punctuation">;</span>         <span class="token comment">//中断嵌套深度    </span>
    <span class="token class-name">u64_t</span>       i_indx<span class="token punctuation">;</span>         <span class="token comment">//中断计数    </span>
    <span class="token class-name">list_h_t</span>    i_serlist<span class="token punctuation">;</span>      <span class="token comment">//也可以使用中断回调函数的方式</span>
    <span class="token class-name">uint_t</span>      i_sernr<span class="token punctuation">;</span>        <span class="token comment">//中断回调函数个数   </span>
    <span class="token class-name">list_h_t</span>    i_serthrdlst<span class="token punctuation">;</span>   <span class="token comment">//中断线程链表头    </span>
    <span class="token class-name">uint_t</span>      i_serthrdnr<span class="token punctuation">;</span>    <span class="token comment">//中断线程个数    </span>
    <span class="token keyword">void</span><span class="token operator">*</span>       i_onethread<span class="token punctuation">;</span>    <span class="token comment">//只有一个中断线程时直接用指针    </span>
    <span class="token keyword">void</span><span class="token operator">*</span>       i_rbtreeroot<span class="token punctuation">;</span>   <span class="token comment">//如果中断线程太多则按优先级组成红黑树</span>
    <span class="token class-name">list_h_t</span>    i_serfisrlst<span class="token punctuation">;</span>      
    <span class="token class-name">uint_t</span>      i_serfisrnr<span class="token punctuation">;</span>       
    <span class="token keyword">void</span><span class="token operator">*</span>       i_msgmpool<span class="token punctuation">;</span>     <span class="token comment">//可能的中断消息池    </span>
    <span class="token keyword">void</span><span class="token operator">*</span>       i_privp<span class="token punctuation">;</span>    
    <span class="token keyword">void</span><span class="token operator">*</span>       i_extp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token class-name">intfltdsc_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果内核或者设备驱动程序要安装一个中断处理函数，就要先申请一个 intserdsc_t 结构体，然后把中断函数的地址写入其中，最后把这个结构挂载到对应的 intfltdsc_t 结构中的 i_serfisrlst 链表中。</p>
<p>为什么不能直接把中断处理函数放在 intfltdsc_t 结构中呢，还要多此一举搞个 intserdsc_t 结构体呢？</p>
<p>因为我们的计算机中可能有很多设备，每个设备都可能产生中断，但是中断控制器的中断信号线是有限的。你可以这样理解：中断控制器最多只能产生几十号中断号，而设备不止几十个，所以会有多个设备共享一根中断信号线。这就导致一个中断发生后，无法确定是哪个设备产生的中断，所以我们干脆让设备驱动程序来决定，因为它是最了解设备的。这里我们让这个 intfltdsc_t 结构上的所有中断处理函数都依次执行，查看是不是自己的设备产生了中断，如果是就处理，不是则略过。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//定义intfltdsc_t结构数组大小为256</span>
<span class="token function">HAL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">intfltdsc_t</span><span class="token punctuation">,</span>machintflt<span class="token punctuation">)</span><span class="token punctuation">[</span>IDTMAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>实现中断异常分发函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//中断处理函数</span>
<span class="token keyword">void</span> <span class="token function">hal_do_hwint</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> intnumb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>krnlsframp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>    
    <span class="token class-name">intfltdsc_t</span> <span class="token operator">*</span>ifdscp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token comment">//根据中断号获取中断异常描述符地址    </span>
    ifdscp <span class="token operator">=</span> <span class="token function">hal_retn_intfltdsc</span><span class="token punctuation">(</span>intnumb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//对断异常描述符加锁并中断    </span>
    <span class="token function">hal_spinlock_saveflg_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifdscp<span class="token operator">-></span>i_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    ifdscp<span class="token operator">-></span>i_indx<span class="token operator">++</span><span class="token punctuation">;</span>    
    ifdscp<span class="token operator">-></span>i_deep<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">//运行中断处理的回调函数</span>
    <span class="token function">hal_run_intflthandle</span><span class="token punctuation">(</span>intnumb<span class="token punctuation">,</span> krnlsframp<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    ifdscp<span class="token operator">-></span>i_deep<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">//解锁并恢复中断状态    </span>
    <span class="token function">hal_spinunlock_restflg_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifdscp<span class="token operator">-></span>i_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//异常分发器</span>
<span class="token keyword">void</span> <span class="token function">hal_fault_allocator</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> faultnumb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>krnlsframp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//我们的异常处理回调函数也是放在中断异常描述符中的</span>
    <span class="token function">hal_do_hwint</span><span class="token punctuation">(</span>faultnumb<span class="token punctuation">,</span> krnlsframp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//中断分发器</span>
<span class="token keyword">void</span> <span class="token function">hal_hwint_allocator</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> intnumb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>krnlsframp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">hal_do_hwint</span><span class="token punctuation">(</span>intnumb<span class="token punctuation">,</span> krnlsframp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>hal_run_intflthandle负责调用中断处理函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">hal_run_intflthandle</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> ifdnr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>sframe<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>    
    <span class="token class-name">intserdsc_t</span> <span class="token operator">*</span>isdscp<span class="token punctuation">;</span>    
    <span class="token class-name">list_h_t</span> <span class="token operator">*</span>lst<span class="token punctuation">;</span>
    <span class="token comment">//根据中断号获取中断异常描述符地址    </span>
    <span class="token class-name">intfltdsc_t</span> <span class="token operator">*</span>ifdscp <span class="token operator">=</span> <span class="token function">hal_retn_intfltdsc</span><span class="token punctuation">(</span>ifdnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历i_serlist链表    </span>
    <span class="token function">list_for_each</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifdscp<span class="token operator">-></span>i_serlist<span class="token punctuation">)</span>    
    <span class="token punctuation">&#123;</span>   
        <span class="token comment">//获取i_serlist链表上对象即intserdsc_t结构</span>
        isdscp <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> <span class="token class-name">intserdsc_t</span><span class="token punctuation">,</span> s_list<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//调用中断处理回调函数      </span>
        isdscp<span class="token operator">-></span><span class="token function">s_handle</span><span class="token punctuation">(</span>ifdnr<span class="token punctuation">,</span> isdscp<span class="token operator">-></span>s_device<span class="token punctuation">,</span> sframe<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="初始化中断控制器"><a href="#初始化中断控制器" class="headerlink" title="初始化中断控制器"></a>初始化中断控制器</h3><p>把 CPU 端的中断搞定了以后，还有设备端的中断，这个可以交给设备驱动程序，但是 CPU 和设备之间的中断控制器，还需要我们出面解决。</p>
<p>多个设备的中断信号线都会连接到中断控制器上，中断控制器可以决定启用或者屏蔽哪些设备的中断，还可以决定设备中断之间的优先线，所以它才叫中断控制器</p>
<p>x86 平台上的中断控制器有多种，最开始是 8259A，然后是 IOAPIC，最新的是 MSI-X。为了简单的说明原理，我们选择了 8259A 中断控制器。</p>
<p>8259A 在任何 x86 平台上都可以使用，x86 平台使用了两片 8259A 芯片，以级联的方式存在。它拥有 15 个中断源（即可以有 15 个中断信号接入）。</p>
<p><img src="https://static001.geekbang.org/resource/image/4d/09/4d81f7feb668abf30c5cced619549709.jpg" alt="8259A控制器框架图"></p>
<p>上面直接和 CPU 连接的是主 8259A，下面的是从 8259A，每一个 8259A 芯片都有两个 I/O 端口，我们可以通过它们对 8259A 进行编程。</p>
<p>主 8259A 的端口地址是 0x20，0x21；从 8259A 的端口地址是 0xA0，0xA1</p>
<p>下面我们来做代码初始化，我们程序员可以向 8259A 写两种命令字： ICW 和 OCW；ICW 这种命令字用来实现 8259a 芯片的初始化。而 OCW 这种命令用来向 8259A 发布命令，以对其进行控制。OCW 可以在 8259A 被初始化之后的任何时候被使用</p>
<p>8259.c</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_i8259</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//初始化主从8259a</span>
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>ZIOPT<span class="token punctuation">,</span> ICW1<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>SIOPT<span class="token punctuation">,</span> ICW1<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>ZIOPT1<span class="token punctuation">,</span> ZICW2<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>SIOPT1<span class="token punctuation">,</span> SICW2<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>ZIOPT1<span class="token punctuation">,</span> ZICW3<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>SIOPT1<span class="token punctuation">,</span> SICW3<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>ZIOPT1<span class="token punctuation">,</span> ICW4<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>SIOPT1<span class="token punctuation">,</span> ICW4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//屏蔽全部中断源</span>
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>ZIOPT1<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">out_u8_p</span><span class="token punctuation">(</span>SIOPT1<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="进入内核层"><a href="#进入内核层" class="headerlink" title="进入内核层"></a>进入内核层</h3><p>由于内核层是从 hal 层进入的，必须在 hal_start() 函数中被调用，所以在此完成这个函数——init_krl()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_krl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> 
    <span class="token comment">//禁止函数返回    </span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">hal_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>   
    <span class="token comment">//初始化hal层 </span>
    <span class="token function">init_hal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化内核层    </span>
    <span class="token function">init_krl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote>
<p>一、HAL层调用链<br>hal_start()</p>
<p>A、先去处理HAL层的初始化<br>-&gt;init_hal()</p>
<p>-&gt;-&gt;init_halplaltform()初始化平台<br>-&gt;-&gt;-&gt;init_machbstart()<br>主要是把二级引导器建立的机器信息结构，复制到了hal层一份给内核使用，同时也为释放二级引导器占用内存做好准备。<br>其做法就是拷贝了一份mbsp到kmbsp，其中用到了虚拟地址转换hyadr_to_viradr<br>-&gt;-&gt;-&gt;init_bdvideo()<br>初始化图形机构<br>初始化BGA显卡 或 VBE图形显卡信息【函数指针的使用】<br>清空屏幕<br>找到”background.bmp”，并显示背景图片<br>-&gt;-&gt;-&gt;-&gt;hal_dspversion（）<br>输出版本号等信息【vsprintfk】<br>其中，用ret_charsinfo根据字体文件获取字符像素信息</p>
<p>-&gt;-&gt;move_img2maxpadr()<br>将移动initldrsve.bin到最大地址</p>
<p>-&gt;-&gt;init_halmm()初始化内存<br>-&gt;-&gt;-&gt;init_phymmarge<br>申请phymmarge_t内存<br>根据 e820map_t 结构数组，复制数据到phymmarge_t 结构数组<br>按内存开始地址进行排序</p>
<p>-&gt;-&gt;init_halintupt();初始化中断<br>-&gt;-&gt;-&gt;init_descriptor();初始化GDT描述符x64_gdt<br>-&gt;-&gt;-&gt;init_idt_descriptor();初始化IDT描述符x64_idt，绑定了中断编号及中断处理函数<br>-&gt;-&gt;-&gt;init_intfltdsc();初始化中断异常表machintflt，拷贝了中断相关信息<br>-&gt;-&gt;-&gt;init_i8259();初始化8529芯片中断<br>-&gt;-&gt;-&gt;i8259_enabled_line(0);好像是取消mask，开启中断请求</p>
<p>最后，跳转去处理内核初始化<br>-&gt;init_krl()</p>
<p>二、中断调用链，以硬件中断为例<br>A、kernel.inc中，通过宏定义，进行了中断定义。以硬件中断为例，可以在kernel.inc中看到：<br>宏为HARWINT，硬件中断分发器函数为hal_hwint_allocator<br>%macro HARWINT 1<br>  保存现场……<br>  mov rdi, %1<br>  mov rsi,rsp<br>  call hal_hwint_allocator<br>  恢复现场……<br>%endmacro</p>
<p>B、而在kernel.asm中，定义了各种硬件中断编号，比如hxi_hwint00，作为中断处理入口<br>ALIGN 16<br>hxi_hwint00:<br>  HARWINT (INT_VECTOR_IRQ0+0)</p>
<p>C、有硬件中断时，会先到达中断处理入口，然后调用到硬件中断分发器函数hal_hwint_allocator<br>第一个参数为中断编号，在rdi<br>第二个参数为中断发生时的栈指针，在rsi<br>然后调用异常处理函数hal_do_hwint</p>
<p>D、hal_do_hwint<br>加锁<br>调用中断回调函数hal_run_intflthandle<br>释放锁</p>
<p>E、hal_run_intflthandle<br>先获取中断异常表machintflt<br>然后调用i_serlist 链表上所有挂载intserdsc_t 结构中的中断处理的回调函数，是否处理由函数自己判断</p>
<p>F、中断处理完毕</p>
<p>G、异常处理类似，只是触发源头不太一样而已</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>火绒安全一面病毒样本分析</title>
    <url>/2021/03/15/huo-rong-an-quan-yi-mian-bing-du-yang-ben-fen-xi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Summary ：</p>
<p>病毒高危行为：</p>
<ol>
<li>请求一系列加密的未知IP的443端口，连接可能与其他恶意软件通讯;尝试HTTP但是全都失败了</li>
<li>使用了大量的微软提供的加密函数，已知是AES对称加密</li>
<li>过程中怀疑使用了代码混淆</li>
<li>存在多处绕检测，反调试行为：比如频繁分配内存调用native方法，存在用另一个用户开启线程；多处使用了RDTSC指令来比对执行时间检测虚拟化或反调试；存在大量延迟尝试绕检测；存在LdrLoadDll动态调用绕检测；可能读取PEB信息检测调试器；修改token权限</li>
</ol>
<p>MD5</p>
<p>974d669e861896a0ebd61c7f2d6e8729</p>
<p>SHA-1</p>
<p>3166a8b05fab2c455586e717210bdf1dad621fc1</p>
<p>SHA-256</p>
<p>b00e7f74539cf39940c9044b6ac1d131a23c896c7905d71a087a01245232ada3</p>
<p>Vhash</p>
<p>0150366d556”z</p>
<p>Authentihash</p>
<p>85badbaa56eef4169eb3c0127d9dace88a0b65b5965ad5a146a3477ab38914d4</p>
<p>SSDEEP</p>
<p>3072:9Wql7iWCRq3JV0npTvzY7hEsZNhh8J3Wn:9DNiWn52k7hEsBh</p>
<p>TLSH</p>
<p>T1B8D3490AE7D782B1FE9601B0167EB73F997152216B159EC3C7A01C20AD512E3A33E76D</p>
<p>File type</p>
<p>Win32 EXE</p>
<p>Magic</p>
<p>PE32 executable for MS Windows (GUI) Intel 80386 32-bit</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519513950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<h2 id="调试过程logs"><a href="#调试过程logs" class="headerlink" title="调试过程logs"></a>调试过程logs</h2><p>查完文件基本信息之后发现不是常见的vc/C++程序,直接拉到OD里面跑起来,试了一下平时用的一些脱壳方法完全不凑效,发现该程序的PE比较奇怪导入和导出表地址均为0,</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195223606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>于是开始单步调试大法</p>
<p>程序一定需要运行时动态加载未加载完的dll,所以我打开内存映射窗口,看着主窗口,一遍单步一遍观察内存情况同时适当的跳过一些未知的加密循环,光标所在行的上一个call eax为Sleep大约3秒然后光标处加载剩余dll(function0040C2F0),随后马上进入一个Function 00416870,</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519532954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195337838.png"></p>
<p>Function 00416870大概应该可以确定是程序的主体逻辑了.(本来尝试过dump 但是dump之后还是无法运行 大概是动态解密的关系吧)</p>
<p>进来16870之后是一个包含大量Sleep，获取CPU时钟相关API的函数，除此之外还有一个子调用，其中主要功能大概为遍历某个文件夹下的所有文件</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519535379.png"></p>
<p>随后经过一系列Sleephe GetTickCount，再后面看到几个消息处理的API一直到RtlAddVectoredExceptionHandler。然后出现一个子调用call Function 405B30</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195400583.png"></p>
<p>进入之后看到上面有几个子调用然后出现一个ConvertStringSecurityDescriptorToSecurityDescriptorW CreateMutexW</p>
<p>查阅MSDN之后，前者通常用于转换安全描述符，结合后面的CreateMutexW打开或者创建互斥量可以得出，这段代码大概率是在打开与当前病毒进程文件同名的信号互斥量，判断信号互斥量是否存在，防止病毒行为的二次执行。</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195420314.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195425502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>那么我大胆推测病毒的主要功能就在这个代码的上方，结合ida的F5 我认为Function0041C6E0（v3 = mainfunction((int)v17, 0);） 包含了大量逻辑</p>
<p>v3 = mainfunction((int)v17, 0);</p>
<p>v4 = 1;</p>
<p>if ( !v3 )</p>
<p>{</p>
<p>sub_4121B0(v16, 50);</p>
<p>if ( ConvertStringSecurityDescriptorToSecurityDescriptorW(v16, 1, &amp;v10, 0) )</p>
<p>{</p>
<p>v11 = v15;</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>v10 = 0;</p>
<p>v11 = 0;</p>
<p>}</p>
<p>v5 = sub_41A120();</p>
<p>v15[0] = 12;</p>
<p>v15[2] = 0;</p>
<p>LODWORD(v13) = -1640531527 * v5;</p>
<p>HIDWORD(v13) = -1640531527 * sub_41A120();</p>
<p>v15[1] = v10;</p>
<p>v14 = sub_403020(v17, 2 * v2, v13, HIDWORD(v13));</p>
<p>if ( dword_41F138(&amp;v13, &amp;v12) &lt; 0 )</p>
<p>{</p>
<p>sub_4121B0(v17, 119);</p>
<p>sub_401CB0(v17, 128, v17, v13, v14);</p>
<p>v12 = v17;</p>
<p>}</p>
<p>v6 = sub_4121B0(v16, 27);</p>
<p>sub_41DD90((char *)v16 + 2 * v6, v12, 100);</p>
<p>v7 = createMute(v11, 1, v16);</p>
<p>*this = v7;</p>
<p>if ( v10 )</p>
<p>{</p>
<p>localFree(v10);</p>
<p>v7 = *this;</p>
<p>}</p>
<p>if ( !v7 || (v8 = getLastError(), v4 = 1, v8 != 183) )</p>
<p>v4 = 0;</p>
<p>}</p>
<p>return v4;</p>
<p>进入这个函数 发现非常非常的长，再逐行分析的话非常不容易，于是我查找所有的模块间调用同时查找所有模块中的名称，查看一下是否有一些敏感的api调用。</p>
<p><strong>以下为我整理的可疑函数：</strong></p>
<p>加密：</p>
<p>00406D10 CryptAcquireContextW,CryptImportKey,CryptSetKeyParam,CryptSetKeyParam,CryptDecrypt,CryptReleaseContext,CryptDestroyKey</p>
<p>0040E760 CryptAcquireContextW,CryptCreateHash,CryptHashData,CryptGetHashParam,CryptGetHashParam,CryptDestroyHash,CryptReleaseContext</p>
<p>0041A890 CryptStringToBinaryW,CryptStringToBinaryW</p>
<p>0040E300 CryptBinaryToStringW,CryptBinaryToStringW</p>
<p>网络：（函数在OD 中并没有执行 可能是因为检测到调试器吧？unsure ）</p>
<p>00415C80 WSAStartup WSACleanup HeapCreate GetProcessHeap RtlAllocateHeap FreeAddrInfoW getaddrinfo FreeAddrInfoW RtlFreeHeap</p>
<p>004067A0 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,FindCloseChangeNotification</p>
<p>00407870 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,RevertToSelf,DuplicateTokenEx,CloseHandle,AdjustTokenPrivileges,CloseHandle</p>
<p>0040DB40 GetStartupInfoW,GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,OpenProcess,OpenProcessToken,GetTokenInformation,AllocateAndInitializeSid,EqualSid,OpenProcessToken,RevertToSelf,DuplicateTokenEx,GetTokenInformation,GetTokenInformation,LookupAccountSidW,CreateProcessAsUserW,GetLastError,CloseHandle,CloseHandle,CloseHandle,AdjustTokenPrivileges,CloseHandle</p>
<p>0040BFB0 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,CloseHandle,</p>
<p>可能的 <strong>反调试，绕检测</strong>：</p>
<p>004021A0 RtlReAllocateHeap,NtDelayExecution,NtDelayExecution,</p>
<p>0041C6E0 NtQuerySstemInformation,NtQueryObject,GetCurrentProcess,NtQuerySystemInformation,OpenProcess,DuplicateHandle,NtQueryObject,NtQueryObject,NtQueryObject,FindCloseChangeNotification,FindCloseChangeNotification（CheckRemoteDebuggerPresent中会调用NtQueryInformationProcess函数）</p>
<p>004116E0 GetProcAddress,NtQueryInformationProcess</p>
<p>00408810 rdtsc 通过统计时间，判断当前环境是否是虚拟</p>
<p>0041B7A0 GetAdaptersInfo,GetAdaptersInfo 获取网络适配器信息</p>
<p>0040B4D0 LdrLoadDll,未公开的内核调用加载dll</p>
<p>大量的延迟函数：</p>
<p>419FD0 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>403643 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>4021D6 NtDelayExecution</p>
<p>408416 Sleep</p>
<p>4171A8 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>可能用另一个用户启动线程：</p>
<p>0040DB40 GetStartupInfoW,GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,OpenProcess,OpenProcessToken,GetTokenInformation,AllocateAndInitializeSid,EqualSid,OpenProcessToken,RevertToSelf,DuplicateTokenEx,GetTokenInformation,GetTokenInformation,LookupAccountSidW,CreateProcessAsUserW,GetLastError,CloseHandle,CloseHandle,CloseHandle,AdjustTokenPrivileges,CloseHandle,</p>
<p>动态调用api ：</p>
<p>00405940 LoadLibraryW,GetProcAddress,</p>
<p>程序大致流程和逻辑</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195450215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>设置了一个计时器和消息处理，然后创建了heap，在最下面的if出call 405b30</p>
<p>来到405b30</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195459926.png"></p>
<p>遍历完目录之后进入41c6e0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195507771.png"></p>
<p><img src="https://img-blog.csdnimg.cn/2021031519551368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195518213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>综合上述信息可得v117的结果应该是通过rdtsc测量时间来检测虚拟化</p>
<p>那么从125行到172行一定是具体检测的逻辑，对于具体怎么测量我不是很清楚</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195528177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195556134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>变量v5处再次调用41a120应该是测量前后两次时间差作比较的</p>
<p>接下来又出现3个子调用</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195606502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第一个</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195618417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>4195a0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195625538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>408c30</p>
<p>存在循环和位运算，和上一个函数的入参密码相关</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195632473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第二个</p>
<p>打开句柄调整token权限</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195640745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第三个</p>
<p>408810是之前的rdtsc指令，getTickCount上下都存在多个rdtsc</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195648111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>执行完第三个函数之后的变量v106和v117存在大量相似的计算和比较</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195654271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>V106还额外执行了上图的3个函数，结合逻辑可以得出上述的推测应该是正确的，即通过106和117获取检测虚拟化，同时在第一个调用处尝试隐藏一些信息（4195a0每次进入循环虚拟机就卡死了，不知道具体是在做什么样的加密）</p>
<p>接下来到label58</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195701820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>4148c0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195707249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195713860.png"></p>
<p>执行到返回</p>
<p>中间又是包含一堆数学计算</p>
<p>然后出现一个入参包括v24，即上面计算结果的一个复制对象句柄函数</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195724185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>进入41a120之后发现又是一堆rdtsc和位运算</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195730252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>跟v69执行同样的操作在下面还有个v72=sub_41a120();</p>
<p>函数结尾处 停止监视通知更改句柄</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195736632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>该函数执行完后if判断通过</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195744915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195750986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>V7后面的操作应该就是判断是否重复执行了，所以该函数分析结束</p>
<p>返回到外层函数</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195758652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>40e940</p>
<p>生成sid 判断sid相等</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195804672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>40e5d0</p>
<p>StrStrlW GetSystemDirectoryW</p>
<p>大致逻辑下图</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195812311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>其中的41A840</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195817977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>返回a1不超过a2的第一个0地址</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195825768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>8460函数里面逻辑比价复杂</p>
<p>总体上应该就是一个获取目录比较确定目录同时包含加密解密的过程</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195832964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195838328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195843623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>在Function 00416870函数主体中一路分析</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195852806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195900682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195907423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>直到此处 <strong>发现第一个网络连接httpAPiCalled</strong>，具体调用时数据如下图</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195919279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/2021031519593035.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>跟进dword_41f044的函数看到出现了http相关的api</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195936813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>可以推测这个函数所在的循环 会循环请求ip地址列表中的ip，由于没有网络安全方面的工具，无法检测目标ip的安全性</p>
<p>继续调试</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195942671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>这个函数明显发送了请求 并 <strong>且返回了请求失败</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195951512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><strong>我在httpcall的地方留了断电 ，F9直接发现了第二个尝试请求的ip</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315200000492.png"></p>
<p><strong>继续F9</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315200005929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>我在realrequest的地方F9至少等待了5次以上，不清楚这个</p>
<p>于是我打开wireshark对目标ip进行监视</p>
<p><img src="https://img-blog.csdnimg.cn/20210315200016488.png"></p>
<p>192.168.88.135 51.77.112.255 TCP 66 49942 → 443 [SYN] Seq=0 Win=64240 Len=0 MSS=1460 WS=256 SACK_PERM=1</p>
<p>关于其连接知道的信息只有这么多了，未知的具体网络行为</p>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>病毒分析</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-硬件到软件启动初始化-设置工作模式与环境</title>
    <url>/2021/06/25/cao-zuo-xi-tong-she-zhi-gong-zuo-mo-shi-yu-huan-jing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>部分代码来源于极客时间《操作系统45讲》，这里记录了我自己操作的过程和思路</p>
</blockquote>
<h1 id="建立计算机（磁盘）"><a href="#建立计算机（磁盘）" class="headerlink" title="建立计算机（磁盘）"></a>建立计算机（磁盘）</h1><p>一个常规操作系统的启动如下图：</p>
<p><img src="https://pic.innnovation.cn//img/20210625225319.jpeg" alt="HelloOS引导流程"></p>
<p>而这里的helloOS中的文件我们称之为内核镜像文件，我们可以引导GRUB加载一个或者多个文件</p>
<p>多文件加载时grub会解析如下图的文件然后加载：</p>
<p><img src="https://pic.innnovation.cn//img/20210625225827.png" alt="内核映像文件格式"></p>
<p>映像文件头描述符和文件描述符如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//映像文件头描述符</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_mlosrddsc</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> mdc_mgic<span class="token punctuation">;</span> <span class="token comment">//映像文件标识</span>
    <span class="token class-name">u64_t</span> mdc_sfsum<span class="token punctuation">;</span><span class="token comment">//未使用</span>
    <span class="token class-name">u64_t</span> mdc_sfsoff<span class="token punctuation">;</span><span class="token comment">//未使用</span>
    <span class="token class-name">u64_t</span> mdc_sfeoff<span class="token punctuation">;</span><span class="token comment">//未使用</span>
    <span class="token class-name">u64_t</span> mdc_sfrlsz<span class="token punctuation">;</span><span class="token comment">//未使用</span>
    <span class="token class-name">u64_t</span> mdc_ldrbk_s<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的开始偏移</span>
    <span class="token class-name">u64_t</span> mdc_ldrbk_e<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的结束偏移</span>
    <span class="token class-name">u64_t</span> mdc_ldrbk_rsz<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的实际大小</span>
    <span class="token class-name">u64_t</span> mdc_ldrbk_sum<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的校验和</span>
    <span class="token class-name">u64_t</span> mdc_fhdbk_s<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述的开始偏移</span>
    <span class="token class-name">u64_t</span> mdc_fhdbk_e<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述的结束偏移</span>
    <span class="token class-name">u64_t</span> mdc_fhdbk_rsz<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述的实际大小</span>
    <span class="token class-name">u64_t</span> mdc_fhdbk_sum<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述的校验和</span>
    <span class="token class-name">u64_t</span> mdc_filbk_s<span class="token punctuation">;</span><span class="token comment">//映像文件中文件数据的开始偏移</span>
    <span class="token class-name">u64_t</span> mdc_filbk_e<span class="token punctuation">;</span><span class="token comment">//映像文件中文件数据的结束偏移</span>
    <span class="token class-name">u64_t</span> mdc_filbk_rsz<span class="token punctuation">;</span><span class="token comment">//映像文件中文件数据的实际大小</span>
    <span class="token class-name">u64_t</span> mdc_filbk_sum<span class="token punctuation">;</span><span class="token comment">//映像文件中文件数据的校验和</span>
    <span class="token class-name">u64_t</span> mdc_ldrcodenr<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的文件头描述符的索引号</span>
    <span class="token class-name">u64_t</span> mdc_fhdnr<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述符有多少个</span>
    <span class="token class-name">u64_t</span> mdc_filnr<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头有多少个</span>
    <span class="token class-name">u64_t</span> mdc_endgic<span class="token punctuation">;</span><span class="token comment">//映像文件结束标识</span>
    <span class="token class-name">u64_t</span> mdc_rv<span class="token punctuation">;</span><span class="token comment">//映像文件版本</span>
<span class="token punctuation">&#125;</span><span class="token class-name">mlosrddsc_t</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FHDSC_NMAX</span> <span class="token expression"><span class="token number">192</span> </span><span class="token comment">//文件名长度</span></span>
<span class="token comment">//文件头描述符</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_fhdsc</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> fhd_type<span class="token punctuation">;</span><span class="token comment">//文件类型</span>
    <span class="token class-name">u64_t</span> fhd_subtype<span class="token punctuation">;</span><span class="token comment">//文件子类型</span>
    <span class="token class-name">u64_t</span> fhd_stuts<span class="token punctuation">;</span><span class="token comment">//文件状态</span>
    <span class="token class-name">u64_t</span> fhd_id<span class="token punctuation">;</span><span class="token comment">//文件id</span>
    <span class="token class-name">u64_t</span> fhd_intsfsoff<span class="token punctuation">;</span><span class="token comment">//文件在映像文件位置开始偏移</span>
    <span class="token class-name">u64_t</span> fhd_intsfend<span class="token punctuation">;</span><span class="token comment">//文件在映像文件的结束偏移</span>
    <span class="token class-name">u64_t</span> fhd_frealsz<span class="token punctuation">;</span><span class="token comment">//文件实际大小</span>
    <span class="token class-name">u64_t</span> fhd_fsum<span class="token punctuation">;</span><span class="token comment">//文件校验和</span>
    <span class="token keyword">char</span>   fhd_name<span class="token punctuation">[</span>FHDSC_NMAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//文件名</span>
<span class="token punctuation">&#125;</span><span class="token class-name">fhdsc_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我用的是windows10+VMware的方式进行开发：</p>
<p>我在VMware中先建立了虚拟机：</p>
<ul>
<li>1GB</li>
<li>1CPU</li>
<li>100MB硬盘</li>
<li>其他64位</li>
</ul>
<p>在Ubuntu64bit下生产硬盘</p>
<p>在虚拟机中开辟一块全0的100MB的虚拟磁盘</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">
<span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">512</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>hd.img <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">204800</span>

<span class="token punctuation">;</span>bs:表示块大小，这里是512字节
<span class="token punctuation">;</span>if：表示输入文件，/dev/zero就是Linux下专门返回0数据的设备文件，读取它就返回0
<span class="token punctuation">;</span>of：表示输出文件，即我们的硬盘文件。
<span class="token punctuation">;</span>count：表示输出多少块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后将这个文件转换为可识别的虚拟磁盘：</p>
<ul>
<li>将文件转为设备并设置回环设备</li>
<li>格式化为EXT4文件系统</li>
<li>挂在虚拟磁盘到目录下</li>
<li>安装GRUB</li>
</ul>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> losetup -a <span class="token comment">#查看所有设备，我的机器上已经有十几个设备了，不能使用这些设备的名称</span>
<span class="token function">sudo</span> losetup /dev/loop15 hd.img <span class="token comment">#0-14都被占用了</span>
<span class="token function">sudo</span> mkfs.ext4 -q /dev/loop15
<span class="token function">sudo</span> <span class="token function">mount</span> -o loop ./hd.img ./hdisk/ <span class="token punctuation">;</span>挂载硬盘文件
<span class="token function">sudo</span> <span class="token function">mkdir</span> ./hdisk/boot/ <span class="token punctuation">;</span>建立boot目录
第一步挂载虚拟硬盘文件为loop0回环设备
<span class="token function">sudo</span> losetup /dev/loop15 hd.img
<span class="token function">sudo</span> <span class="token function">mount</span> -o loop ./hd.img ./hdisk/ <span class="token punctuation">;</span>挂载硬盘文件
第二步安装GRUB
<span class="token function">sudo</span> grub-install --boot-directory<span class="token operator">=</span>./hdisk/boot/ --force --allow-floppy /dev/loop15
；--boot-directory 指向先前我们在虚拟硬盘中建立的boot目录。
；--force --allow-floppy ：指向我们的虚拟硬盘设备文件/dev/loop0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>安装完毕后用sudo在**/hdisk/boot/grub/** 目录下建立一个<strong>grub.cfg 文本文件</strong>,grub会通过该文件找到系统镜像</p>
<p>grub.cfg</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">
menuentry <span class="token string">'HelloOS'</span> <span class="token punctuation">&#123;</span> <span class="token comment">#名字随意</span>
insmod part_msdos
insmod ext2
<span class="token builtin class-name">set</span> <span class="token assign-left variable">root</span><span class="token operator">=</span><span class="token string">'hd0'</span> <span class="token comment">#我的机器只能指定hd0，表示第一块磁盘引导启动</span>
multiboot2 /boot/HelloOS.eki <span class="token comment">#加载boot目录下的HelloOS.eki文件</span>
boot <span class="token comment">#引导启动</span>
<span class="token punctuation">&#125;</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout_style</span><span class="token operator">=</span>menu
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;timeout&#125;</span>"</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#等待10秒钟自动启动</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>硬盘设置好后如图，hdisk文件夹中就是hd.img磁盘镜像中的内容，修改hdisk即可修改磁盘</p>
<p><img src="https://pic.innnovation.cn//img/20210625231753.png" alt="image-20210625231752977"></p>
<p>然后将hd.img复制到物理机，通过StarWindConverter软件转换img磁盘格式为vmdk格式（让VMware可以加载）</p>
<h1 id="建造二级引导器"><a href="#建造二级引导器" class="headerlink" title="建造二级引导器"></a>建造二级引导器</h1><p>课程开源代码<a href="https://gitee.com/lmos/cosmos">https://gitee.com/lmos/cosmos</a></p>
<p>先设计一个数据结构存放机器信息</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MACHBSTART</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span>   mb_krlinitstack<span class="token punctuation">;</span><span class="token comment">//内核栈地址</span>
    <span class="token class-name">u64_t</span>   mb_krlitstacksz<span class="token punctuation">;</span><span class="token comment">//内核栈大小</span>
    <span class="token class-name">u64_t</span>   mb_imgpadr<span class="token punctuation">;</span><span class="token comment">//操作系统映像</span>
    <span class="token class-name">u64_t</span>   mb_imgsz<span class="token punctuation">;</span><span class="token comment">//操作系统映像大小</span>
    <span class="token class-name">u64_t</span>   mb_bfontpadr<span class="token punctuation">;</span><span class="token comment">//操作系统字体地址</span>
    <span class="token class-name">u64_t</span>   mb_bfontsz<span class="token punctuation">;</span><span class="token comment">//操作系统字体大小</span>
    <span class="token class-name">u64_t</span>   mb_fvrmphyadr<span class="token punctuation">;</span><span class="token comment">//机器显存地址</span>
    <span class="token class-name">u64_t</span>   mb_fvrmsz<span class="token punctuation">;</span><span class="token comment">//机器显存大小</span>
    <span class="token class-name">u64_t</span>   mb_cpumode<span class="token punctuation">;</span><span class="token comment">//机器CPU工作模式</span>
    <span class="token class-name">u64_t</span>   mb_memsz<span class="token punctuation">;</span><span class="token comment">//机器内存大小</span>
    <span class="token class-name">u64_t</span>   mb_e820padr<span class="token punctuation">;</span><span class="token comment">//机器e820数组地址</span>
    <span class="token class-name">u64_t</span>   mb_e820nr<span class="token punctuation">;</span><span class="token comment">//机器e820数组元素个数</span>
    <span class="token class-name">u64_t</span>   mb_e820sz<span class="token punctuation">;</span><span class="token comment">//机器e820数组大小</span>
    <span class="token comment">//……</span>
    <span class="token class-name">u64_t</span>   mb_pml4padr<span class="token punctuation">;</span><span class="token comment">//机器页表数据地址</span>
    <span class="token class-name">u64_t</span>   mb_subpageslen<span class="token punctuation">;</span><span class="token comment">//机器页表个数</span>
    <span class="token class-name">u64_t</span>   mb_kpmapphymemsz<span class="token punctuation">;</span><span class="token comment">//操作系统映射空间大小</span>
    <span class="token comment">//……</span>
    <span class="token class-name">graph_t</span> mb_ghparm<span class="token punctuation">;</span><span class="token comment">//图形信息</span>
<span class="token punctuation">&#125;</span><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">machbstart_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下图为课程插图</p>
<p><img src="https://static001.geekbang.org/resource/image/31/1e/3169e9db4549ab036c2de269788a281e.jpg?wh=1636*846" alt="二级引导器功能规划图"></p>
<p>接着实现GRUB头</p>
<p>流程：初始化 CPU 的寄存器，加载 GDT，切换到 CPU 的保护模式</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">
MBT_HDR_FLAGS  EQU 0x00010003
MBT_HDR_MAGIC  EQU 0x1BADB002
MBT2_MAGIC  EQU 0xe85250d6
global _start
extern inithead_entry
[section .text]
[bits 32]
_start:
  jmp _entry
align 4
mbt_hdr:
  dd MBT_HDR_MAGIC
  dd MBT_HDR_FLAGS
  dd -(MBT_HDR_MAGIC+MBT_HDR_FLAGS)
  dd mbt_hdr
  dd _start
  dd 0
  dd 0
  dd _entry
ALIGN 8
mbhdr:
  DD  0xE85250D6
  DD  0
  DD  mhdrend - mbhdr
  DD  -(0xE85250D6 + 0 + (mhdrend - mbhdr))
  DW  2, 0
  DD  24
  DD  mbhdr
  DD  _start
  DD  0
  DD  0
  DW  3, 0
  DD  12
  DD  _entry 
  DD  0  
  DW  0, 0
  DD  8
mhdrend:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关中断，加载GDT</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">
_entry:
  cli           ；关中断
  in al, 0x70 
  or al, 0x80  
  out 0x70,al  ；关掉不可屏蔽中断   
  lgdt [GDT_PTR] ；加载GDT地址到GDTR寄存器
  jmp dword 0x8 :_32bits_mode ；长跳转刷新CS影子寄存器
  ;………………
;GDT全局段描述符表
GDT_START:
knull_dsc: dq 0
kcode_dsc: dq 0x00cf9e000000ffff
kdata_dsc: dq 0x00cf92000000ffff
k16cd_dsc: dq 0x00009e000000ffff ；16位代码段描述符
k16da_dsc: dq 0x000092000000ffff ；16位数据段描述符
GDT_END:
GDT_PTR:
GDTLEN  dw GDT_END-GDT_START-1  ;GDT界限
GDTBASE  dd GDT_ST  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>初始化段寄存器和通用寄存器、栈寄存器，为C函数做准备</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">
_32bits_mode：
  mov ax, 0x10
  mov ds, ax
  mov ss, ax
  mov es, ax
  mov fs, ax
  mov gs, ax
  xor eax,eax
  xor ebx,ebx
  xor ecx,ecx
  xor edx,edx
  xor edi,edi
  xor esi,esi
  xor ebp,ebp
  xor esp,esp
  mov esp,0x7c00 ；设置栈顶为0x7c00
  call inithead_entry ；调用inithead_entry函数在inithead.c中实现
  jmp 0x200000  ；跳转到0x200000地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>于是实现inithead_entry函数</p>
<p>函数中调用write_realintsvefile write_ldrkrlfile主要作用就是把映像文件中的 initldrsve.bin 文件和 initldrkrl.bin 文件写入到特定的内存地址空间中加载地址在宏中定义</p>
<p>而加载时又依赖find_file 和 m2mcopy函数</p>
<p>find_file 函数负责扫描映像文件中的文件头描述符，对比其中的文件名，然后返回对应的文件头描述符的地址，这样就可以得到文件在映像文件中的位置和大小了。</p>
<p>m2mcopy就是复制镜像到内存空间操作。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MDC_ENDGIC</span> <span class="token expression"><span class="token number">0xaaffaaffaaffaaff</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MDC_RVGIC</span> <span class="token expression"><span class="token number">0xffaaffaaffaaffaa</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">REALDRV_PHYADR</span> <span class="token expression"><span class="token number">0x1000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMGFILE_PHYADR</span> <span class="token expression"><span class="token number">0x4000000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMGKRNL_PHYADR</span> <span class="token expression"><span class="token number">0x2000000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LDRFILEADR</span> <span class="token expression">IMGFILE_PHYADR</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MLOSDSC_OFF</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MRDDSC_ADR</span> <span class="token expression"><span class="token punctuation">(</span><span class="token class-name">mlosrddsc_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>LDRFILEADR<span class="token operator">+</span><span class="token number">0x1000</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">void</span> <span class="token function">inithead_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">write_realintsvefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write_ldrkrlfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//写initldrsve.bin文件到特定的内存中</span>
<span class="token keyword">void</span> <span class="token function">write_realintsvefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">fhdsc_t</span> <span class="token operator">*</span>fhdscstart <span class="token operator">=</span> <span class="token function">find_file</span><span class="token punctuation">(</span><span class="token string">"initldrsve.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fhdscstart <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"not file initldrsve.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">m2mcopy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fhdscstart<span class="token operator">-></span>fhd_intsfsoff<span class="token punctuation">)</span> <span class="token operator">+</span> LDRFILEADR<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>REALDRV_PHYADR<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">sint_t</span><span class="token punctuation">)</span>fhdscstart<span class="token operator">-></span>fhd_frealsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//写initldrkrl.bin文件到特定的内存中</span>
<span class="token keyword">void</span> <span class="token function">write_ldrkrlfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">fhdsc_t</span> <span class="token operator">*</span>fhdscstart <span class="token operator">=</span> <span class="token function">find_file</span><span class="token punctuation">(</span><span class="token string">"initldrkrl.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fhdscstart <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"not file initldrkrl.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">m2mcopy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fhdscstart<span class="token operator">-></span>fhd_intsfsoff<span class="token punctuation">)</span> <span class="token operator">+</span> LDRFILEADR<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ILDRKRL_PHYADR<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">sint_t</span><span class="token punctuation">)</span>fhdscstart<span class="token operator">-></span>fhd_frealsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//在映像文件中查找对应的文件</span>
<span class="token class-name">fhdsc_t</span> <span class="token operator">*</span><span class="token function">find_file</span><span class="token punctuation">(</span><span class="token class-name">char_t</span> <span class="token operator">*</span>fname<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">mlosrddsc_t</span> <span class="token operator">*</span>mrddadrs <span class="token operator">=</span> MRDDSC_ADR<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mrddadrs<span class="token operator">-></span>mdc_endgic <span class="token operator">!=</span> MDC_ENDGIC <span class="token operator">||</span>
        mrddadrs<span class="token operator">-></span>mdc_rv <span class="token operator">!=</span> MDC_RVGIC <span class="token operator">||</span>
        mrddadrs<span class="token operator">-></span>mdc_fhdnr <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span>
        mrddadrs<span class="token operator">-></span>mdc_filnr <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"no mrddsc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">s64_t</span> rethn <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">fhdsc_t</span> <span class="token operator">*</span>fhdscstart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fhdsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>mrddadrs<span class="token operator">-></span>mdc_fhdbk_s<span class="token punctuation">)</span> <span class="token operator">+</span> LDRFILEADR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mrddadrs<span class="token operator">-></span>mdc_fhdnr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmpl</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> fhdscstart<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fhd_name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            rethn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">s64_t</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ok_l<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    rethn <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
ok_l<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rethn <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"not find file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>fhdscstart<span class="token punctuation">[</span>rethn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在前面的GRUB头部分最后一行代码jmp 0x200000</p>
<p>跳转地址正好是initldrkrl.bin内存中的地址，该模块即为二级引导器主模块</p>
<p>由于模块改变，还需要加载 GDTR 和 IDTR 寄存器，然后初始化 CPU 相关的寄存器</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">
_entry:
  cli
  lgdt [GDT_PTR]；加载GDT地址到GDTR寄存器
  lidt [IDT_PTR]；加载IDT地址到IDTR寄存器
  jmp dword 0x8 :_32bits_mode；长跳转刷新CS影子寄存器
_32bits_mode:
  mov ax, 0x10  ; 数据段选择子(目的)
  mov ds, ax
  mov ss, ax
  mov es, ax
  mov fs, ax
  mov gs, ax
  xor eax,eax
  xor ebx,ebx
  xor ecx,ecx
  xor edx,edx
  xor edi,edi
  xor esi,esi
  xor ebp,ebp
  xor esp,esp
  mov esp,0x90000 ；使得栈底指向了0x90000
  call ldrkrl_entry ；调用ldrkrl_entry函数
  xor ebx,ebx
  jmp 0x2000000 ；跳转到0x2000000的内存地址
  jmp $
GDT_START:
knull_dsc: dq 0
kcode_dsc: dq 0x00cf9a000000ffff ;a-e
kdata_dsc: dq 0x00cf92000000ffff
k16cd_dsc: dq 0x00009a000000ffff ；16位代码段描述符
k16da_dsc: dq 0x000092000000ffff ；16位数据段描述符
GDT_END:
GDT_PTR:
GDTLEN  dw GDT_END-GDT_START-1  ;GDT界限
GDTBASE  dd GDT_START

IDT_PTR:
IDTLEN  dw 0x3ff
IDTBAS  dd 0  ；这是BIOS中断表的地址和长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="如何调用bios中断"><a href="#如何调用bios中断" class="headerlink" title="如何调用bios中断"></a>如何调用bios中断</h2><p>C语言运行在32位保护模式下，而中断在16位实模式下工作</p>
<p>于是需要实现一个切换运行模式的功能，流程如下：</p>
<ol>
<li>保存 C 语言环境下的 CPU 上下文 ，即保护模式下的所有通用寄存器、段寄存器、程序指针寄存器，栈寄存器，把它们都保存在内存中。</li>
<li>切换回实模式，调用 BIOS 中断，把 BIOS 中断返回的相关结果，保存在内存中。</li>
<li>切换回保护模式，重新加载第 1 步中保存的寄存器。这样 C 语言代码才能重新恢复执行。</li>
</ol>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">
realadr_call_entry:
  pushad     ;保存通用寄存器
  push    ds
  push    es
  push    fs ;保存4个段寄存器
  push    gs
  call save_eip_jmp ；调用save_eip_jmp 
  pop  gs
  pop  fs
  pop  es      ;恢复4个段寄存器
  pop  ds
  popad       ;恢复通用寄存器
  ret
save_eip_jmp:
  pop esi  ；弹出call save_eip_jmp时保存的eip到esi寄存器中， 
  mov [PM32_EIP_OFF],esi ；把eip保存到特定的内存空间中
  mov [PM32_ESP_OFF],esp ；把esp保存到特定的内存空间中
  jmp dword far [cpmty_mode]；长跳转这里表示把cpmty_mode处的第一个4字节装入eip，把其后的2字节装入cs
cpmty_mode:
  dd 0x1000
  dw 0x18
  jmp $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>jmp dword far [cpmty_mode]后面的0x18正是GDT 中的 16 位代码段描述符，偏址0x1000是要运行的代码</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">
[bits 16]
_start:
_16_mode:
  mov  bp,0x20 ;0x20是指向GDT中的16位数据段描述符 
  mov  ds, bp
  mov  es, bp
  mov  ss, bp
  mov  ebp, cr0
  and  ebp, 0xfffffffe
  mov  cr0, ebp ；CR0.P&#x3D;0 关闭保护模式
  jmp  0:real_entry ；刷新CS影子寄存器，真正进入实模式
real_entry:
  mov bp, cs
  mov ds, bp
  mov es, bp
  mov ss, bp ；重新设置实模式下的段寄存器 都是CS中值，即为0 
  mov sp, 08000h ；设置栈
  mov bp,func_table
  add bp,ax
  call [bp] ；调用函数表中的汇编函数，ax是C函数中传递进来的
  cli
  call disable_nmi
  mov  ebp, cr0
  or  ebp, 1
  mov  cr0, ebp ；CR0.P&#x3D;1 开启保护模式
  jmp dword 0x8 :_32bits_mode
[BITS 32]
_32bits_mode:
  mov bp, 0x10
  mov ds, bp
  mov ss, bp；重新设置保护模式下的段寄存器0x10是32位数据段描述符的索引
  mov esi,[PM32_EIP_OFF]；加载先前保存的EIP
  mov esp,[PM32_ESP_OFF]；加载先前保存的ESP
  jmp esi ；eip&#x3D;esi 回到了realadr_call_entry函数中

func_table:  ;函数表
  dw _getmmap ；获取内存布局视图的函数
  dw _read ；读取硬盘的函数
    dw _getvbemode ；获取显卡VBE模式 
    dw _getvbeonemodeinfo ；获取显卡VBE模式的数据
    dw _setvbemode ；设置显卡VBE模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="进入二级引导器主函数"><a href="#进入二级引导器主函数" class="headerlink" title="进入二级引导器主函数"></a>进入二级引导器主函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">void</span> <span class="token function">ldrkrl_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">init_bstartparm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//收集机器环境信息的主函数</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1、grub启动后，选择对应的启动菜单项，grub会通过自带文件系统驱动，定位到对应的eki文件

2、grub会尝试加载eki文件【eki文件需要满足grub多协议引导头的格式要求】
这些是在imginithead.asm中实现的，所以要包括：
A、grub文件头，包括魔数、grub1和grub2支持等
B、定位的_start符号等

3、grub校验成功后，会调用_start，然跳转到_entry
A、_entry中:关闭中断
B、加载GDT
C、然后进入_32bits_mode，清理寄存器，设置栈顶
D、调用inithead_entry【C】

4、inithead_entry.c
A、从imginithead.asm进入后，首先进入函数调用inithead_entry
B、初始化光标，清屏
C、从eki文件内部，找到initldrsve.bin文件，并分别拷贝到内存的指定物理地址
D、从eki文件内部，找到initldrkrl.bin文件，并分别拷贝到内存的指定物理地址
E、返回imginithead.asm

5、imginithead.asm中继续执行
jmp 0x200000
而这个位置，就是initldrkrl.bin在内存的位置ILDRKRL_PHYADR
所以后面要执行initldrkrl.bin的内容

6、这样就到了ldrkrl32.asm的_entry
A、将GDT加载到GDTR寄存器【内存】
B、将IDT加载到IDTR寄存器【中断】
C、跳转到_32bits_mode
初始寄存器
初始化栈
调用ldrkrl_entry【C】

7、ldrkrlentry.c
A、初始化光标，清屏
B、收集机器参数init_bstartparm【C】

8、bstartparm.c
A、初始化machbstart_t
B、各类初始化函数，填充machbstart_t的内容
C、返回

9、ldrkrlentry.c
A、返回

10、ldrkrl32.asm
A、跳转到0x2000000地址继续执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="探查和搜集信息"><a href="#探查和搜集信息" class="headerlink" title="探查和搜集信息"></a>探查和搜集信息</h1><p>在引导器主函数中，需要检查 CPU 是否支持 64 位的工作模式、收集内存布局信息，看看是不是合乎我们操作系统的最低运行要求，还要设置操作系统需要的 MMU 页表、设置显卡模式、释放中文字体文件</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ldrkrl_entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">init_bstartparm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//收集机器环境信息的主函数</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//=========================================================</span>

<span class="token comment">//初始化machbstart_t结构体，清0,并设置一个标志</span>
<span class="token keyword">void</span> <span class="token function">machbstart_t_init</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span><span class="token operator">*</span> initp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>initp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-></span>mb_migc<span class="token operator">=</span>MBS_MIGC<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init_bstartparm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">machbstart_t</span><span class="token operator">*</span> mbsp <span class="token operator">=</span> MBSPADR<span class="token punctuation">;</span><span class="token comment">//1MB的内存地址</span>
    <span class="token function">machbstart_t_init</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码中的结构体为1MB包含机器基本信息的结构体</p>
<h2 id="检查cpu"><a href="#检查cpu" class="headerlink" title="检查cpu"></a>检查cpu</h2><p>chk_cpuid、chk_cpu_longmode 来干两件事，一个是检查 CPU 否支持 CPUID 指令，然后另一个用 CPUID 指令检查 CPU 支持 64 位长模式</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//通过改写Eflags寄存器的第21位，观察其位的变化判断是否支持CPUID</span>
<span class="token keyword">int</span> <span class="token function">chk_cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> rets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
        <span class="token string">"pushfl \n\t"</span>
        <span class="token string">"popl %%eax \n\t"</span>
        <span class="token string">"movl %%eax,%%ebx \n\t"</span>
        <span class="token string">"xorl $0x0200000,%%eax \n\t"</span>
        <span class="token string">"pushl %%eax \n\t"</span>
        <span class="token string">"popfl \n\t"</span>
        <span class="token string">"pushfl \n\t"</span>
        <span class="token string">"popl %%eax \n\t"</span>
        <span class="token string">"xorl %%ebx,%%eax \n\t"</span>
        <span class="token string">"jz 1f \n\t"</span>
        <span class="token string">"movl $1,%0 \n\t"</span>
        <span class="token string">"jmp 2f \n\t"</span>
        <span class="token string">"1: movl $0,%0 \n\t"</span>
        <span class="token string">"2: \n\t"</span>
        <span class="token operator">:</span> <span class="token string">"=c"</span><span class="token punctuation">(</span>rets<span class="token punctuation">)</span>
        <span class="token operator">:</span>
        <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//检查CPU是否支持长模式</span>
<span class="token keyword">int</span> <span class="token function">chk_cpu_longmode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> rets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
        <span class="token string">"movl $0x80000000,%%eax \n\t"</span>
        <span class="token string">"cpuid \n\t"</span> <span class="token comment">//把eax中放入0x80000000调用CPUID指令</span>
        <span class="token string">"cmpl $0x80000001,%%eax \n\t"</span><span class="token comment">//看eax中返回结果</span>
        <span class="token string">"setnb %%al \n\t"</span> <span class="token comment">//不为0x80000001,则不支持0x80000001号功能</span>
        <span class="token string">"jb 1f \n\t"</span>
        <span class="token string">"movl $0x80000001,%%eax \n\t"</span>
        <span class="token string">"cpuid \n\t"</span><span class="token comment">//把eax中放入0x800000001调用CPUID指令，检查edx中的返回数据</span>
        <span class="token string">"bt $29,%%edx  \n\t"</span> <span class="token comment">//长模式 支持位  是否为1</span>
        <span class="token string">"setcb %%al \n\t"</span>
        <span class="token string">"1: \n\t"</span>
        <span class="token string">"movzx %%al,%%eax \n\t"</span>
        <span class="token operator">:</span> <span class="token string">"=a"</span><span class="token punctuation">(</span>rets<span class="token punctuation">)</span>
        <span class="token operator">:</span>
        <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//检查CPU主函数</span>
<span class="token keyword">void</span> <span class="token function">init_chkcpu</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">chk_cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"Your CPU is not support CPUID sys is die!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CLI_HALT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">chk_cpu_longmode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"Your CPU is not support 64bits mode sys is die!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">CLI_HALT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    mbsp<span class="token operator">-></span>mb_cpumode <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span><span class="token comment">//如果成功则设置机器信息结构的cpu模式为64位</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="获取内存布局"><a href="#获取内存布局" class="headerlink" title="获取内存布局"></a>获取内存布局</h2><p>init_mem函数</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ETYBAK_ADR</span> <span class="token expression"><span class="token number">0x2000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PM32_EIP_OFF</span> <span class="token expression"><span class="token punctuation">(</span>ETYBAK_ADR<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PM32_ESP_OFF</span> <span class="token expression"><span class="token punctuation">(</span>ETYBAK_ADR<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">E80MAP_NR</span> <span class="token expression"><span class="token punctuation">(</span>ETYBAK_ADR<span class="token operator">+</span><span class="token number">64</span><span class="token punctuation">)</span></span><span class="token comment">//保存e820map_t结构数组元素个数的地址</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">E80MAP_ADRADR</span> <span class="token expression"><span class="token punctuation">(</span>ETYBAK_ADR<span class="token operator">+</span><span class="token number">68</span><span class="token punctuation">)</span> </span><span class="token comment">//保存e820map_t结构数组的开始地址</span></span>
<span class="token keyword">void</span> <span class="token function">init_mem</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">e820map_t</span> <span class="token operator">*</span>retemp<span class="token punctuation">;</span>
    <span class="token class-name">u32_t</span> retemnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>retemp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retemnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>retemnr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"no e820map\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//根据e820map_t结构数据检查内存大小</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chk_memsize</span><span class="token punctuation">(</span>retemp<span class="token punctuation">,</span> retemnr<span class="token punctuation">,</span> <span class="token number">0x100000</span><span class="token punctuation">,</span> <span class="token number">0x8000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"Your computer is low on memory, the memory cannot be less than 128MB!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    mbsp<span class="token operator">-></span>mb_e820padr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>retemp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把e820map_t结构数组的首地址传给mbsp->mb_e820padr </span>
    mbsp<span class="token operator">-></span>mb_e820nr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span>retemnr<span class="token punctuation">;</span><span class="token comment">//把e820map_t结构数组元素个数传给mbsp->mb_e820nr </span>
    mbsp<span class="token operator">-></span>mb_e820sz <span class="token operator">=</span> retemnr <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">e820map_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把e820map_t结构数组大小传给mbsp->mb_e820sz </span>
    mbsp<span class="token operator">-></span>mb_memsz <span class="token operator">=</span> <span class="token function">get_memsize</span><span class="token punctuation">(</span>retemp<span class="token punctuation">,</span> retemnr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据e820map_t结构数据计算内存大小。</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token class-name">e820map_t</span> <span class="token operator">*</span><span class="token operator">*</span>retemp<span class="token punctuation">,</span> <span class="token class-name">u32_t</span> <span class="token operator">*</span>retemnr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">realadr_call_entry</span><span class="token punctuation">(</span><span class="token function">RLINTNR</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>retemnr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>E80MAP_NR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>retemp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">e820map_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>E80MAP_ADRADR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>内存信息结构体</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RAM_USABLE</span> <span class="token expression"><span class="token number">1</span> </span><span class="token comment">//可用内存</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RAM_RESERV</span> <span class="token expression"><span class="token number">2</span> </span><span class="token comment">//保留内存不可使用</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RAM_ACPIREC</span> <span class="token expression"><span class="token number">3</span> </span><span class="token comment">//ACPI表相关的</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RAM_ACPINVS</span> <span class="token expression"><span class="token number">4</span> </span><span class="token comment">//ACPI NVS空间</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RAM_AREACON</span> <span class="token expression"><span class="token number">5</span> </span><span class="token comment">//包含坏内存</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_e820</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> saddr<span class="token punctuation">;</span>    <span class="token comment">/* 内存开始地址 */</span>
    <span class="token class-name">u64_t</span> lsize<span class="token punctuation">;</span>    <span class="token comment">/* 内存大小 */</span>
    <span class="token class-name">u32_t</span> type<span class="token punctuation">;</span>    <span class="token comment">/* 内存类型 */</span>
<span class="token punctuation">&#125;</span><span class="token class-name">e820map_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>mmap函数中调用了bios中断原因是，通过调中断获取e820map结构数组</p>
<p>其调用了实模式下的_getmmap函数来获取，代码如下</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">
_getmmap:
  push ds
  push es
  push ss
  mov esi,0
  mov dword[E80MAP_NR],esi
  mov dword[E80MAP_ADRADR],E80MAP_ADR ;e820map结构体开始地址
  xor ebx,ebx
  mov edi,E80MAP_ADR
loop:
  mov eax,0e820h ;获取e820map结构参数
  mov ecx,20    ;e820map结构大小
  mov edx,0534d4150h ;获取e820map结构参数必须是这个数据
  int 15h  ;BIOS的15h中断
  jc .1
  add edi,20
  cmp edi,E80MAP_ADR+0x1000
  jg .1
  inc esi
  cmp ebx,0
  jne loop ;循环获取e820map结构
  jmp .2
.1:
  mov esi,0    ;出错处理，e820map结构数组元素个数为0
.2:
  mov dword[E80MAP_NR],esi ;e820map结构数组元素个数
  pop ss
  pop es
  pop ds
  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="初始化内核栈"><a href="#初始化内核栈" class="headerlink" title="初始化内核栈"></a>初始化内核栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IKSTACK_PHYADR</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x90000</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IKSTACK_SIZE</span> <span class="token expression"><span class="token number">0x1000</span></span></span>
<span class="token comment">//初始化内核栈</span>
<span class="token keyword">void</span> <span class="token function">init_krlinitstack</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token function">move_krlimg</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x8f000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x1001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"iks_moveimg err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    mbsp<span class="token operator">-></span>mb_krlinitstack <span class="token operator">=</span> IKSTACK_PHYADR<span class="token punctuation">;</span><span class="token comment">//栈顶地址</span>
    mbsp<span class="token operator">-></span>mb_krlitstacksz <span class="token operator">=</span> IKSTACK_SIZE<span class="token punctuation">;</span> <span class="token comment">//栈大小是4KB</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>内核空间为：0x8f000～（0x8f000+0x1001）</p>
<p>检查他们于其他空间是否有冲突即可</p>
<h2 id="放置内核文件与字库文件"><a href="#放置内核文件与字库文件" class="headerlink" title="放置内核文件与字库文件"></a>放置内核文件与字库文件</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token comment">//放置内核文件</span>
<span class="token keyword">void</span> <span class="token function">init_krlfile</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token comment">//在映像中查找相应的文件，并复制到对应的地址，并返回文件的大小，这里是查找kernel.bin文件</span>
    <span class="token class-name">u64_t</span> sz <span class="token operator">=</span> <span class="token function">r_file_to_padr</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> IMGKRNL_PHYADR<span class="token punctuation">,</span> <span class="token string">"kernel.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> sz<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"r_file_to_padr err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//放置完成后更新机器信息结构中的数据</span>
    mbsp<span class="token operator">-></span>mb_krlimgpadr <span class="token operator">=</span> IMGKRNL_PHYADR<span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_krlsz <span class="token operator">=</span> sz<span class="token punctuation">;</span>
    <span class="token comment">//mbsp->mb_nextwtpadr始终要保持指向下一段空闲内存的首地址 </span>
    mbsp<span class="token operator">-></span>mb_nextwtpadr <span class="token operator">=</span> <span class="token function">P4K_ALIGN</span><span class="token punctuation">(</span>mbsp<span class="token operator">-></span>mb_krlimgpadr <span class="token operator">+</span> mbsp<span class="token operator">-></span>mb_krlsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_kalldendpadr <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_krlimgpadr <span class="token operator">+</span> mbsp<span class="token operator">-></span>mb_krlsz<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//放置字库文件</span>
<span class="token keyword">void</span> <span class="token function">init_defutfont</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u64_t</span> sz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//获取下一段空闲内存空间的首地址 </span>
    <span class="token class-name">u32_t</span> dfadr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_nextwtpadr<span class="token punctuation">;</span>
<span class="token comment">//在映像中查找相应的文件，并复制到对应的地址，并返回文件的大小，这里是查找font.fnt文件</span>
    sz <span class="token operator">=</span> <span class="token function">r_file_to_padr</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> dfadr<span class="token punctuation">,</span> <span class="token string">"font.fnt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> sz<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"r_file_to_padr err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//放置完成后更新机器信息结构中的数据</span>
    mbsp<span class="token operator">-></span>mb_bfontpadr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>dfadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_bfontsz <span class="token operator">=</span> sz<span class="token punctuation">;</span>
    <span class="token comment">//更新机器信息结构中下一段空闲内存的首地址  </span>
    mbsp<span class="token operator">-></span>mb_nextwtpadr <span class="token operator">=</span> <span class="token function">P4K_ALIGN</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>dfadr<span class="token punctuation">)</span> <span class="token operator">+</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_kalldendpadr <span class="token operator">=</span> mbsp<span class="token operator">-></span>mb_bfontpadr <span class="token operator">+</span> mbsp<span class="token operator">-></span>mb_bfontsz<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用 r_file_to_padr 函数在映像中查找 kernel.bin 和 font.fnt 文件，并复制到对应的空闲内存空间中</p>
<h2 id="建立-MMU-页表数据"><a href="#建立-MMU-页表数据" class="headerlink" title="建立 MMU 页表数据"></a>建立 MMU 页表数据</h2><p>内核虚拟地址空间从 0xffff800000000000 开始，所以我们这个虚拟地址映射到从物理地址 0 开始，大小都是 0x400000000 即 16GB，也就是说我们要虚拟地址空间：0xffff800000000000～0xffff800400000000 映射到物理地址空间 0～0x400000000。</p>
<p>采用长模式下的 2MB 分页方式</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KINITPAGE_PHYADR</span> <span class="token expression"><span class="token number">0x1000000</span></span></span>
<span class="token keyword">void</span> <span class="token function">init_bstartpages</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//顶级页目录</span>
    <span class="token class-name">u64_t</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>KINITPAGE_PHYADR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16MB地址处</span>
    <span class="token comment">//页目录指针</span>
    <span class="token class-name">u64_t</span> <span class="token operator">*</span>pdpte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>KINITPAGE_PHYADR <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//页目录</span>
    <span class="token class-name">u64_t</span> <span class="token operator">*</span>pde <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>KINITPAGE_PHYADR <span class="token operator">+</span> <span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//物理地址从0开始</span>
    <span class="token class-name">u64_t</span> adr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token function">move_krlimg</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>KINITPAGE_PHYADR<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"move_krlimg err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//将顶级页目录、页目录指针的空间清0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> mi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mi <span class="token operator">&lt;</span> PGENTY_SIZE<span class="token punctuation">;</span> mi<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        p<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        pdpte<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//映射</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> pdei <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pdei <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> pdei<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        pdpte<span class="token punctuation">[</span>pdei<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span>pde <span class="token operator">|</span> KPDPTE_RW <span class="token operator">|</span> KPDPTE_P<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> pdeii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pdeii <span class="token operator">&lt;</span> PGENTY_SIZE<span class="token punctuation">;</span> pdeii<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span><span class="token comment">//大页KPDE_PS 2MB，可读写KPDE_RW，存在KPDE_P</span>
            pde<span class="token punctuation">[</span>pdeii<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> adr <span class="token operator">|</span> KPDE_PS <span class="token operator">|</span> KPDE_RW <span class="token operator">|</span> KPDE_P<span class="token punctuation">;</span>
            adr <span class="token operator">+=</span> <span class="token number">0x200000</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        pde <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span>pde <span class="token operator">+</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//让顶级页目录中第0项和第((KRNL_VIRTUAL_ADDRESS_START) >> KPML4_SHIFT) &amp; 0x1ff项，指向同一个页目录指针页  </span>
    p<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span>KRNL_VIRTUAL_ADDRESS_START<span class="token punctuation">)</span> <span class="token operator">>></span> KPML4_SHIFT<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1ff</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span>pdpte <span class="token operator">|</span> KPML4_RW <span class="token operator">|</span> KPML4_P<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token punctuation">)</span>pdpte <span class="token operator">|</span> KPML4_RW <span class="token operator">|</span> KPML4_P<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把页表首地址保存在机器信息结构中</span>
    mbsp<span class="token operator">-></span>mb_pml4padr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>KINITPAGE_PHYADR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_subpageslen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">0x2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mbsp<span class="token operator">-></span>mb_kpmapphymemsz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x400000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>映射的核心逻辑由<strong>两重循环控制</strong>，外层循环控制页目录指针顶，只有 16 项，其中每一项都指向一个页目录，每个页目录中有 512 个物理页地址</p>
<p>物理地址每次增加 2MB，这是由 26～30 行的内层循环控制，每执行一次外层循环就要执行 512 次内层循环。<br>顶级页目录中第 0 项和第 ((KRNL_VIRTUAL_ADDRESS_START) &gt;&gt; KPML4_SHIFT) &amp; 0x1ff 项，指向同一个页目录指针页，这样的话就能让虚拟地址：0xffff800000000000～0xffff800400000000 和虚拟地址：0～0x400000000，访问到同一个物理地址空间 0～0x400000000，这样做是有目的，内核在启动初期，<strong>虚拟地址和物理地址要保持相同</strong>。</p>
<h2 id="设置图形模式"><a href="#设置图形模式" class="headerlink" title="设置图形模式"></a>设置图形模式</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">void</span> <span class="token function">init_graph</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span><span class="token operator">*</span> mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//初始化图形数据结构</span>
    <span class="token function">graph_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mbsp<span class="token operator">-></span>mb_ghparm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取VBE模式，通过BIOS中断</span>
    <span class="token function">get_vbemode</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取一个具体VBE模式的信息，通过BIOS中断</span>
    <span class="token function">get_vbemodeinfo</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置VBE模式，通过BIOS中断</span>
    <span class="token function">set_vbemodeinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>VBE 是显卡的一个图形规范标准，它定义了显卡的几种图形模式，每个模式包括屏幕分辨率，像素格式与大小，显存大小。调用 BIOS 10h 中断可以返回这些数据结构。</p>
<p>我们选择使用了 VBE 的 118h 模式，该模式下屏幕分辨率为 1024x768，显存大小是 16.8MB。显存开始地址一般为 0xe0000000</p>
<p>屏幕分辨率为 1024x768，即把屏幕分成 768 行，每行 1024 个像素点，但每个像素点占用显存的 32 位数据（4 字节，红、绿、蓝、透明各占 8 位）。我们只要往对应的显存地址写入相应的像素数据，屏幕对应的位置就能显示了。</p>
<p>像素点结构体如下</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_PIXCL</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u8_t</span> cl_b<span class="token punctuation">;</span> <span class="token comment">//蓝</span>
    <span class="token class-name">u8_t</span> cl_g<span class="token punctuation">;</span> <span class="token comment">//绿</span>
    <span class="token class-name">u8_t</span> cl_r<span class="token punctuation">;</span> <span class="token comment">//红</span>
    <span class="token class-name">u8_t</span> cl_a<span class="token punctuation">;</span> <span class="token comment">//透明</span>
<span class="token punctuation">&#125;</span><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">pixcl_t</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BGRA</span><span class="token expression"><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">(</span>r<span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>g<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//通常情况下用pixl_t 和 BGRA宏</span>
<span class="token keyword">typedef</span> <span class="token class-name">u32_t</span> <span class="token class-name">pixl_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>像素点和显存位置对应如下</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">u32_t</span><span class="token operator">*</span> dispmem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u32_t</span><span class="token operator">*</span><span class="token punctuation">)</span>mbsp<span class="token operator">-></span>mb_ghparm<span class="token punctuation">.</span>gh_framphyadr<span class="token punctuation">;</span>
dispmem<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> pix<span class="token punctuation">;</span>
<span class="token comment">//x，y是像素的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<h2 id="连结操作"><a href="#连结操作" class="headerlink" title="连结操作"></a>连结操作</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">void</span> <span class="token function">init_bstartparm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp <span class="token operator">=</span> MBSPADR<span class="token punctuation">;</span>
    <span class="token function">machbstart_t_init</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//检查CPU</span>
    <span class="token function">init_chkcpu</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取内存布局</span>
    <span class="token function">init_mem</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化内核栈</span>
    <span class="token function">init_krlinitstack</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//放置内核文件</span>
    <span class="token function">init_krlfile</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//放置字库文件</span>
    <span class="token function">init_defutfont</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_meme820</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立MMU页表</span>
    <span class="token function">init_bstartpages</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置图形模式</span>
    <span class="token function">init_graph</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="显示logo"><a href="#显示logo" class="headerlink" title="显示logo"></a>显示logo</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token keyword">void</span> <span class="token function">logo</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span><span class="token operator">*</span> mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">u32_t</span> retadr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sz<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//在映像文件中获取logo.bmp文件</span>
    <span class="token function">get_file_rpadrandsz</span><span class="token punctuation">(</span><span class="token string">"logo.bmp"</span><span class="token punctuation">,</span>mbsp<span class="token punctuation">,</span><span class="token operator">&amp;</span>retadr<span class="token punctuation">,</span><span class="token operator">&amp;</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>retadr<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">kerror</span><span class="token punctuation">(</span><span class="token string">"logo getfilerpadrsz err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//显示logo文件中的图像数据</span>
    <span class="token function">bmp_print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>retadr<span class="token punctuation">,</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">init_graph</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span><span class="token operator">*</span> mbsp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>    
    <span class="token comment">//……前面代码省略</span>
    <span class="token comment">//显示</span>
    <span class="token function">logo</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>logo为24位位图文件</p>
<p>在图格式的文件中，除了文件头的数据就是图形像素点的数据，只不过 24 位的位图每个像素占用 3 字节，并且位置是倒排的，即第一个像素的数据是在文件的最后，依次类推。我们只要依次将位图文件的数据，按照倒排次序写入显存中，这样就可以显示了</p>
<p>把二级引导器的文件和 logo 文件打包成映像文件，然后放在虚拟硬盘中。复制文件到虚拟硬盘中得先 mount，然后复制，最后转换成 VDI 格式的虚拟硬盘，再挂载到虚拟机上启动就行了。这也是为什么要手动建立硬盘的原因，打包命令如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lmoskrlimg -m k -lhf initldrimh.bin -o Cosmos.eki -f initldrsve.bin initldrkrl.bin font.fnt logo.bmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="进入OS"><a href="#进入OS" class="headerlink" title="进入OS"></a>进入OS</h2><p>调用 Cosmos 第一个 C 函数之前，我们依然要写一小段汇编代码，切换 CPU 到长模式，初始化 CPU 寄存器和 C 语言要用的栈。因为目前代码执行流在二级引导器中，进入到 Cosmos 中这样在二级引导器中初始过的东西都不能用了。因为 CPU 进入了长模式，寄存器的位宽都变了，所以需要重新初始化</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">
[section .start.text]
[BITS 32]
_start:
    cli
    mov ax,0x10
    mov ds,ax
    mov es,ax
    mov ss,ax
    mov fs,ax
    mov gs,ax
    lgdt [eGdtPtr]        
    ;开启 PAE
    mov eax, cr4
    bts eax, 5                      ; CR4.PAE &#x3D; 1
    mov cr4, eax
    mov eax, PML4T_BADR             ;加载MMU顶级页目录
    mov cr3, eax  
    ;开启 64bits long-mode
    mov ecx, IA32_EFER
    rdmsr
    bts eax, 8                      ; IA32_EFER.LME &#x3D;1
    wrmsr
    ;开启 PE 和 paging
    mov eax, cr0
    bts eax, 0                      ; CR0.PE &#x3D;1
    bts eax, 31
    ;开启 CACHE       
    btr eax,29                    ; CR0.NW&#x3D;0
    btr eax,30                    ; CR0.CD&#x3D;0  CACHE
    mov cr0, eax                    ; IA32_EFER.LMA &#x3D; 1
    jmp 08:entry64
[BITS 64]
entry64:
    mov ax,0x10
    mov ds,ax
    mov es,ax
    mov ss,ax
    mov fs,ax
    mov gs,ax
    xor rax,rax
    xor rbx,rbx
    xor rbp,rbp
    xor rcx,rcx
    xor rdx,rdx
    xor rdi,rdi
    xor rsi,rsi
    xor r8,r8
    xor r9,r9
    xor r10,r10
    xor r11,r11
    xor r12,r12
    xor r13,r13
    xor r14,r14
    xor r15,r15
    mov rbx,MBSP_ADR
    mov rax,KRLVIRADR
    mov rcx,[rbx+KINITSTACK_OFF]
    add rax,rcx
    xor rcx,rcx
    xor rbx,rbx
    mov rsp,rax
    push 0
    push 0x8
    mov rax,hal_start                 ;调用内核主函数
    push rax
    dw 0xcb48
    jmp $
[section .start.data]
[BITS 32]
x64_GDT:
enull_x64_dsc:  dq 0  
ekrnl_c64_dsc:  dq 0x0020980000000000   ; 64-bit 内核代码段
ekrnl_d64_dsc:  dq 0x0000920000000000   ; 64-bit 内核数据段
euser_c64_dsc:  dq 0x0020f80000000000   ; 64-bit 用户代码段
euser_d64_dsc:  dq 0x0000f20000000000   ; 64-bit 用户数据段
eGdtLen      equ  $ - enull_x64_dsc   ; GDT长度
eGdtPtr:    dw eGdtLen - 1      ; GDT界限
        dq ex64_GDT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>1～11 行表示加载 70～75 行的 GDT，13～17 行是设置 MMU 并加载在二级引导器中准备好的 MMU 页表，19～30 行是开启长模式并打开 Cache，34～54 行则是初始化长模式下的寄存器，55～61 行是读取二级引导器准备的机器信息结构中的栈地址，并用这个数据设置 RSP 寄存器。</p>
<p>最关键的是 63～66 行，它开始把 8 和 hal_start 函数的地址压入栈中。dw 0xcb48 是直接写一条指令的机器码——0xcb48，这是一条返回指令。这个返回指令有点特殊，它会把栈中的数据分别弹出到 RIP，CS 寄存器，这正是为了调用我们 os 的第一个 C 函数 hal_start。</p>
<h2 id="小结2"><a href="#小结2" class="headerlink" title="小结2"></a>小结2</h2><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">11、返回到bstartparm.c
调用了chkcpmm.c的init_bstartpages

12、然后调用到了fs.c的move_krlimg函数申请了内存，建立了MMU页表：
顶级页目录，开始于0x1000000
页目录指针目录，开始于0x1001000，，共16项 ，其中每一项都指向一个页目录
页目录，开始于0x1002000， 每页指向512 个物理页，每页2MB【 0x200000】

让物理地址p[0]和虚拟地址p[((KRNL_VIRTUAL_ADDRESS_START) &gt;&gt; KPML4_SHIFT) &amp; 0x1ff]，指向同一个页目录指针页，确保内核在启动初期，虚拟地址和物理地址要保持相同
没搞清楚为什么虚拟地址是这个，也暂时没搞清楚为何要指向(u64_t)((u32_t)pdpte | KPML4_RW | KPML4_P)

最后，把页表首地址保存在机器信息结构中

13、返回到bstartparm.c
调用了graph.c的init_graph
A、初始化了数据结构

B、调用init_bgadevice
首先获取GBA设备ID
检查设备最大分辨率
设置显示参数，并将参数保存到mbsp结构中

C、如果不是图形模式，要通过BIOS中断进行切换，设置显示参数，并将参数保存到mbsp结构中：
获取VBE模式，通过BIOS中断
获取一个具体VBE模式的信息，通过BIOS中断
设置VBE模式，通过BIOS中断
这三个方法同样用到了realadr_call_entry，调用路径与上面_getmmap类似，不再展开

D、初始化了一块儿内存
感觉会与物理地址与虚拟地址之间转换由一定关系

E、进行logo显示
调用get_file_rpadrandsz定位到位图文件
调用bmp_print，读入像素点，BGRA转换
最后调用write_pixcolor，写入到mbsp-&gt;mb_ghparm正确的位置，图像就显示出来了

14、然后一路返回
到bstartparm.c的init_bstartparm
到ldrkrlentry.c的ldrkrl_entry
到ldrkrl32.asm的call ldrkrl_entry
再往下是jmp 0x2000000
这个地址就是IMGKRNL_PHYADR，就是刚才放Cosmos.eki的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>webFlux及相关知识点理解和学习</title>
    <url>/2021/07/10/webflux-xue-xi-ji-yuan-li-xing-li-jie/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>本人英语渣渣，但是学习较新的知识还是选择外面的世界多看看，某度的引擎真的是毒瘤，本文概念和词汇可能包含机翻部分，欢迎大神们批评指针</p>
<p>Quote:<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-new-framework">https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-new-framework</a></p>
</blockquote>
<p>我们先看看Spring为什么要创造WebFlux:</p>
<blockquote>
<p>Part of the answer is the need for a non-blocking web stack to handle concurrency with a small number of threads and scale with fewer hardware resources. Servlet 3.1 did provide an API for non-blocking I/O. However, using it leads away from the rest of the Servlet API, where contracts are synchronous (<code>Filter</code>, <code>Servlet</code>) or blocking (<code>getParameter</code>, <code>getPart</code>). This was the motivation for a new common API to serve as a foundation across any non-blocking runtime. That is important because of servers (such as Netty) that are well-established in the async, non-blocking space.</p>
<p>The other part of the answer is functional programming. Much as the addition of annotations in Java 5 created opportunities (such as annotated REST controllers or unit tests), the addition of lambda expressions in Java 8 created opportunities for functional APIs in Java. This is a boon for non-blocking applications and continuation-style APIs (as popularized by <code>CompletableFuture</code> and <a href="http://reactivex.io/">ReactiveX</a>) that allow declarative composition of asynchronous logic. At the programming-model level, Java 8 enabled Spring WebFlux to offer functional web endpoints alongside annotated controllers.</p>
</blockquote>
<p>总结</p>
<ul>
<li>需要一个非阻塞的Web技术栈来处理具有少量线程的并发并使用较少的硬件资源进行扩展，Servlet3.1之后提供了NIO非阻塞式API以及Netty都提供了支持</li>
<li>Java的函数式编程（functional programming）支持，lambda表达式提供了函数式API，允许异步逻辑的声明式组合的非阻塞应用程序</li>
</ul>
<p>那么所以学习WebFlux之前必须了解两个东西<code>lambda</code>、<code>Stream</code></p>
<p>lambda和流API都是Java8才有的（21年3.16JDK16发布），这里就不对lambda和Stream的使用做介绍了，我们主要研究一下实现原理</p>
<h1 id="lambda实现原理"><a href="#lambda实现原理" class="headerlink" title="lambda实现原理"></a>lambda实现原理</h1><p>初看lambda表达式，感觉就是一个匿名函数（类比匿名内部类），所以我推测当时出这个功能就是Java程序员发现Java只能传递对象，没办法传递函数，大致的使用场景可能是这样的</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeFunc</span><span class="token punctuation">(</span>函数引用<span class="token punctuation">,</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// todo 用传入的方法打印word变量</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这段代码要是换成C来，只要往这个方法传入一个函数指针即可（函数入口地址）</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">printWord</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明函数</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义函数指针</span>
fun_ptr<span class="token operator">=</span>printWord<span class="token punctuation">;</span><span class="token comment">//把printWord函数地址赋值给fun_ptr</span>
<span class="token punctuation">(</span><span class="token operator">*</span>fun_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接调用</span>
<span class="token function">another_func</span><span class="token punctuation">(</span>fun_ptr<span class="token punctuation">,</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//间接调用，回调函数就是用这种方式实现的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么Java怎么办解决这个问题呢，前面提到了匿名内部类，lambda最初开发的时候可能真的是从这里启发来的，用一个接口(匿名类的父类接口)包裹住这个方法，传接口对象进去就可以了</p>
<p>为了研究这个问题 上代码，用反编译工具查看底层字节码研究原理</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">main</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Wrapper</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token class-name">String</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeFunc</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span> w<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        w<span class="token punctuation">.</span><span class="token function">myPrint</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 匿名内部类写法</span>
        <span class="token function">executeFunc</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token class-name">String</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 个性化拓展，例如在打印之前记录时间什么的</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"Hello Lambda!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// lambda写法</span>
        <span class="token function">executeFunc</span><span class="token punctuation">(</span>w <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 个性化拓展，例如在打印之前记录时间什么的</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"Hello Lambda!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们看lambda这部分的字节码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// class version 55.0 (55)</span>
<span class="token comment">// access flags 0x20</span>
<span class="token keyword">class</span> main<span class="token operator">/</span><span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">// compiled from: Solution.java</span>
  <span class="token comment">// access flags 0x19</span>
  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> INNERCLASS java<span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">MethodHandles</span>$<span class="token class-name">Lookup</span> java<span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">MethodHandles</span> <span class="token class-name">Lookup</span>

  <span class="token comment">// access flags 0x0</span>
  <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   L0
    LINENUMBER <span class="token number">8</span> L0
    ALOAD <span class="token number">0</span>
    INVOKESPECIAL java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    RETURN
   L1
    LOCALVARIABLE <span class="token keyword">this</span> <span class="token class-name">Lmain</span><span class="token operator">/</span><span class="token class-name">Solution</span><span class="token punctuation">;</span> L0 L1 <span class="token number">0</span>
    MAXSTACK <span class="token operator">=</span> <span class="token number">1</span>
    MAXLOCALS <span class="token operator">=</span> <span class="token number">1</span>

  <span class="token comment">// access flags 0x8</span>
  <span class="token keyword">static</span> <span class="token function">executeFunc</span><span class="token punctuation">(</span><span class="token class-name">Lmain</span><span class="token operator">/</span><span class="token class-name">Wrapper</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   L0
    LINENUMBER <span class="token number">11</span> L0
    ALOAD <span class="token number">0</span>
    ALOAD <span class="token number">1</span>
    INVOKEINTERFACE main<span class="token operator">/</span><span class="token class-name">Wrapper</span><span class="token punctuation">.</span>myPrint <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span> <span class="token punctuation">(</span>itf<span class="token punctuation">)</span>
   L1
    LINENUMBER <span class="token number">12</span> L1
    RETURN
   L2
    LOCALVARIABLE w <span class="token class-name">Lmain</span><span class="token operator">/</span><span class="token class-name">Wrapper</span><span class="token punctuation">;</span> L0 L2 <span class="token number">0</span>
    LOCALVARIABLE word <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span> L0 L2 <span class="token number">1</span>
    MAXSTACK <span class="token operator">=</span> <span class="token number">2</span>
    MAXLOCALS <span class="token operator">=</span> <span class="token number">2</span>

  <span class="token comment">// access flags 0x9</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   L0
    LINENUMBER <span class="token number">26</span> L0
    <span class="token class-name">INVOKEDYNAMIC</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Lmain</span><span class="token operator">/</span><span class="token class-name">Wrapper</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>
      <span class="token comment">// handle kind 0x6 : INVOKESTATIC</span>
      java<span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">LambdaMetafactory</span><span class="token punctuation">.</span><span class="token function">metafactory</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">MethodHandles</span>$<span class="token class-name">Lookup</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">MethodType</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">MethodType</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">MethodHandle</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">MethodType</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span>invoke<span class="token operator">/</span><span class="token class-name">CallSite</span><span class="token punctuation">;</span>
      <span class="token comment">// arguments:</span>
      <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token punctuation">,</span> 
      <span class="token comment">// handle kind 0x6 : INVOKESTATIC</span>
      main<span class="token operator">/</span><span class="token class-name">Solution</span><span class="token punctuation">.</span>lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token punctuation">,</span> 
      <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    <span class="token punctuation">]</span>
    LDC <span class="token string">"Hello Lambda!"</span>
    INVOKESTATIC main<span class="token operator">/</span><span class="token class-name">Solution</span><span class="token punctuation">.</span>executeFunc <span class="token punctuation">(</span><span class="token class-name">Lmain</span><span class="token operator">/</span><span class="token class-name">Wrapper</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   L1
    LINENUMBER <span class="token number">31</span> L1
    RETURN
   L2
    LOCALVARIABLE args <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span> L0 L2 <span class="token number">0</span>
    MAXSTACK <span class="token operator">=</span> <span class="token number">2</span>
    MAXLOCALS <span class="token operator">=</span> <span class="token number">1</span>

  <span class="token comment">// access flags 0x100A</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> synthetic lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   L0
    LINENUMBER <span class="token number">28</span> L0
    GETSTATIC java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token operator">:</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span><span class="token punctuation">;</span>
    ALOAD <span class="token number">0</span>
    INVOKEVIRTUAL java<span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span><span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   L1
    LINENUMBER <span class="token number">29</span> L1
    RETURN
   L2
    LOCALVARIABLE w <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span> L0 L2 <span class="token number">0</span>
    MAXSTACK <span class="token operator">=</span> <span class="token number">2</span>
    MAXLOCALS <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意一行代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> synthetic lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token comment">//line 61</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>synthetic这个词的意思是“人造的; (人工)合成的; 综合(型)的”，作为关键字，它表示该方法由编译器自动生成。简言之，把它当做void，这是一个无返回值的静态方法，叫lambda$main$0，接受一个String类型的参数。里面又有一系列操作</p>
<p>编译器把我们写的lambda表达式转换成了一个<strong>静态的私有函数</strong>，通过调用这个函数来解决传递一段代码的问题</p>
<p>那么还剩下一个问题，JVM是通过什么知道如何执行该私有函数呢，这就得翻阅<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html">Oracle官方文档</a>的The invokedynamic Instruction章节</p>
<p><code>INVOKEDYNAMIC</code>指令，顾名思义，就是动态激活。那这个动态是怎么理解的？这里的”动态”意思是，在运行时才确定，这个调用lambda函数的下一步指向哪里。在初始状态（程序编译成字节码后但未运行时），这个标记是空的，不会执行任何动作。当程序开始执行时，具体一点就是发生字节码的43行，初始化就开始了。在运行时确定，无外乎反射，仔细看43行的一大串包，也确实是通过反射实现的</p>
<h1 id="Stream实现原理"><a href="#Stream实现原理" class="headerlink" title="Stream实现原理"></a>Stream实现原理</h1><p>先上一张copy的速查表格</p>
<table>
<thead>
<tr>
<th align="center">Stream操作分类</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">中间操作(Intermediate operations)</td>
<td>无状态(Stateless)</td>
<td>unordered() filter() map() mapToInt() mapToLong() mapToDouble() flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td>
</tr>
<tr>
<td align="center"></td>
<td>有状态(Stateful)</td>
<td>distinct() sorted() sorted() limit() skip()</td>
</tr>
<tr>
<td align="center">结束操作(Terminal operations)</td>
<td>非短路操作</td>
<td>forEach() forEachOrdered() toArray() reduce() collect() max() min() count()</td>
</tr>
<tr>
<td align="center"></td>
<td>短路操作(short-circuiting)</td>
<td>anyMatch() allMatch() noneMatch() findFirst() findAny()</td>
</tr>
</tbody></table>
<p><img src="https://pic.innnovation.cn//img/20210710222024.png" alt="Stream结构示意图"></p>
<blockquote>
<p>原理解释引用自:<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/6-Stream%20Pipelines.md">https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/6-Stream%20Pipelines.md</a></p>
</blockquote>
<h3 id="gt-gt-操作如何记录"><a href="#gt-gt-操作如何记录" class="headerlink" title="&gt;&gt; 操作如何记录"></a>&gt;&gt; 操作如何记录</h3><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/Java_stream_pipeline_classes.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/Java_stream_pipeline_classes.png?raw=true" alt="Java_stream_pipeline_classes"></a></p>
<p>注意这里使用的是“<em>操作(operation)<em>”一词，指的是“Stream中间操作”的操作，很多Stream操作会需要一个回调函数（Lambda表达式），因此一个完整的操作是&lt;*数据来源，操作，回调函数*&gt;构成的三元组。Stream中使用Stage的概念来描述一个完整的操作，并用某种实例化后的</em>PipelineHelper</em>来代表Stage，将具有先后顺序的各个Stage连到一起，就构成了整个流水线。跟Stream相关类和接口的继承关系图示。</p>
<p>还有<em>IntPipeline, LongPipeline, DoublePipeline</em>没在图中画出，这三个类专门为三种基本类型（不是包装类型）而定制的，跟<em>ReferencePipeline</em>是并列关系。图中<em>Head</em>用于表示第一个Stage，即调用调用诸如<em>Collection.stream()*方法产生的Stage，很显然这个Stage里不包含任何操作；*StatelessOp*和*StatefulOp</em>分别表示无状态和有状态的Stage，对应于无状态和有状态的中间操作。</p>
<p>Stream流水线组织结构示意图如下：</p>
<p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/Stream_pipeline_example.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/Stream_pipeline_example.png?raw=true" alt="Stream_pipeline_example"></a></p>
<p>图中通过<code>Collection.stream()</code>方法得到<em>Head</em>也就是stage0，紧接着调用一系列的中间操作，不断产生新的Stream。<strong>这些Stream对象以双向链表的形式组织在一起，构成整个流水线，由于每个Stage都记录了前一个Stage和本次的操作以及回调函数，依靠这种结构就能建立起对数据源的所有操作</strong>。这就是Stream记录操作的方式。</p>
<h3 id="gt-gt-操作如何叠加"><a href="#gt-gt-操作如何叠加" class="headerlink" title="&gt;&gt; 操作如何叠加"></a>&gt;&gt; 操作如何叠加</h3><p>以上只是解决了操作记录的问题，要想让流水线起到应有的作用我们需要一种将所有操作叠加到一起的方案。你可能会觉得这很简单，只需要从流水线的head开始依次执行每一步的操作（包括回调函数）就行了。这听起来似乎是可行的，但是你忽略了前面的Stage并不知道后面Stage到底执行了哪种操作，以及回调函数是哪种形式。换句话说，只有当前Stage本身才知道该如何执行自己包含的动作。这就需要有某种协议来协调相邻Stage之间的调用关系。</p>
<p>这种协议由<em>Sink</em>接口完成，<em>Sink</em>接口包含的方法如下表所示：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>void begin(long size)</td>
<td>开始遍历元素之前调用该方法，通知Sink做好准备。</td>
</tr>
<tr>
<td>void end()</td>
<td>所有元素遍历完成之后调用，通知Sink没有更多的元素了。</td>
</tr>
<tr>
<td>boolean cancellationRequested()</td>
<td>是否可以结束操作，可以让短路操作尽早结束。</td>
</tr>
<tr>
<td>void accept(T t)</td>
<td>遍历元素时调用，接受一个待处理元素，并对元素进行处理。Stage把自己包含的操作和回调方法封装到该方法里，前一个Stage只需要调用当前Stage.accept(T t)方法就行了。</td>
</tr>
</tbody></table>
<p>有了上面的协议，相邻Stage之间调用就很方便了，每个Stage都会将自己的操作封装到一个Sink里，前一个Stage只需调用后一个Stage的<code>accept()</code>方法即可，并不需要知道其内部是如何处理的。当然对于有状态的操作，Sink的<code>begin()</code>和<code>end()</code>方法也是必须实现的。比如Stream.sorted()是一个有状态的中间操作，其对应的Sink.begin()方法可能创建一个盛放结果的容器，而accept()方法负责将元素添加到该容器，最后end()负责对容器进行排序。对于短路操作，<code>Sink.cancellationRequested()</code>也是必须实现的，比如Stream.findFirst()是短路操作，只要找到一个元素，cancellationRequested()就应该返回<em>true</em>，以便调用者尽快结束查找。Sink的四个接口方法常常相互协作，共同完成计算任务。<strong>实际上Stream API内部实现的的本质，就是如何重写Sink的这四个接口方法</strong>。</p>
<p>有了Sink对操作的包装，Stage之间的调用问题就解决了，执行时只需要从流水线的head开始对数据源依次调用每个Stage对应的Sink.{begin(), accept(), cancellationRequested(), end()}方法就可以了。一种可能的Sink.accept()方法流程是这样的：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">U</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token number">1.</span> 使用当前<span class="token class-name">Sink</span>包装的回调函数处理u
    <span class="token number">2.</span> 将处理结果传递给流水线下游的<span class="token class-name">Sink</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>Sink接口的其他几个方法也是按照这种[处理-&gt;转发]的模型实现。下面我们结合具体例子看看Stream的中间操作是如何将自身的操作包装成Sink以及Sink是如何将处理结果转发给下一个Sink的。先看Stream.map()方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Stream.map()，调用该方法将产生一个新的Stream</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> P_OUT<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StatelessOp</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">StreamShape</span><span class="token punctuation">.</span>REFERENCE<span class="token punctuation">,</span>
                                 <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>NOT_SORTED <span class="token operator">|</span> <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>NOT_DISTINCT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token annotation punctuation">@Override</span> <span class="token comment">/*opWripSink()方法返回由回调函数包装而成Sink*/</span>
        <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">></span></span> <span class="token function">opWrapSink</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> downstream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sink<span class="token punctuation">.</span>ChainedReference</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>downstream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">P_OUT</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">R</span> r <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. 使用当前Sink包装的回调函数mapper处理u</span>
                    downstream<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 将处理结果传递给流水线下游的Sink</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码看似复杂，其实逻辑很简单，就是将回调函数<em>mapper</em>包装到一个Sink当中。由于Stream.map()是一个无状态的中间操作，所以map()方法返回了一个StatelessOp内部类对象（一个新的Stream），调用这个新Stream的opWripSink()方法将得到一个包装了当前回调函数的Sink。</p>
<p>再来看一个复杂一点的例子。Stream.sorted()方法将对Stream中的元素进行排序，显然这是一个有状态的中间操作，因为读取所有元素之前是没法得到最终顺序的。抛开模板代码直接进入问题本质，sorted()方法是如何将操作封装成Sink的呢？sorted()一种可能封装的Sink代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Stream.sort()方法用到的Sink实现</span>
<span class="token keyword">class</span> <span class="token class-name">RefSortingSink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRefSortingSink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span><span class="token comment">// 存放用于排序的元素</span>
    <span class="token class-name">RefSortingSink</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> downstream<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>downstream<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// 创建一个存放排序元素的列表</span>
        list <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 只有元素全部接收之后才能开始排序</span>
        downstream<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cancellationWasRequested<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 下游Sink不包含短路操作</span>
            list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>downstream<span class="token operator">::</span><span class="token function">accept</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 将处理结果传递给流水线下游的Sink</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 下游Sink包含短路操作</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 每次都调用cancellationRequested()询问是否可以结束处理。</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>downstream<span class="token punctuation">.</span><span class="token function">cancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                downstream<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 将处理结果传递给流水线下游的Sink</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        downstream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. 使用当前Sink包装动作处理t，只是简单的将元素添加到中间列表当中</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码完美的展现了Sink的四个接口方法是如何协同工作的：</p>
<ol>
<li>首先begin()方法告诉Sink参与排序的元素个数，方便确定中间结果容器的的大小；</li>
<li>之后通过accept()方法将元素添加到中间结果当中，最终执行时调用者会不断调用该方法，直到遍历所有元素；</li>
<li>最后end()方法告诉Sink所有元素遍历完毕，启动排序步骤，排序完成后将结果传递给下游的Sink；</li>
<li>如果下游的Sink是短路操作，将结果传递给下游时不断询问下游cancellationRequested()是否可以结束处理。</li>
</ol>
<h3 id="gt-gt-叠加之后的操作如何执行"><a href="#gt-gt-叠加之后的操作如何执行" class="headerlink" title="&gt;&gt; 叠加之后的操作如何执行"></a>&gt;&gt; 叠加之后的操作如何执行</h3><p><a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/Figures/Stream_pipeline_Sink.png"><img src="https://github.com/CarpenterLee/JavaLambdaInternals/raw/master/Figures/Stream_pipeline_Sink.png?raw=true" alt="Stream_pipeline_Sink"></a></p>
<p>Sink完美封装了Stream每一步操作，并给出了[处理-&gt;转发]的模式来叠加操作。这一连串的齿轮已经咬合，就差最后一步拨动齿轮启动执行。是什么启动这一连串的操作呢？也许你已经想到了启动的原始动力就是结束操作(Terminal Operation)，一旦调用某个结束操作，就会触发整个流水线的执行。</p>
<p>结束操作之后不能再有别的操作，所以结束操作不会创建新的流水线阶段(Stage)，直观的说就是流水线的链表不会在往后延伸了。结束操作会创建一个包装了自己操作的Sink，这也是流水线中最后一个Sink，这个Sink只需要处理数据而不需要将结果传递给下游的Sink（因为没有下游）。对于Sink的[处理-&gt;转发]模型，结束操作的Sink就是调用链的出口。</p>
<p>我们再来考察一下上游的Sink是如何找到下游Sink的。一种可选的方案是在<em>PipelineHelper</em>中设置一个Sink字段，在流水线中找到下游Stage并访问Sink字段即可。但Stream类库的设计者没有这么做，而是设置了一个<code>Sink AbstractPipeline.opWrapSink(int flags, Sink downstream)</code>方法来得到Sink，该方法的作用是返回一个新的包含了当前Stage代表的操作以及能够将结果传递给downstream的Sink对象。为什么要产生一个新对象而不是返回一个Sink字段？这是因为使用opWrapSink()可以将当前操作与下游Sink（上文中的downstream参数）结合成新Sink。试想只要从流水线的最后一个Stage开始，不断调用上一个Stage的opWrapSink()方法直到最开始（不包括stage0，因为stage0代表数据源，不包含操作），就可以得到一个代表了流水线上所有操作的Sink，用代码表示就是这样：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// AbstractPipeline.wrapSink()</span>
<span class="token comment">// 从下游向上游不断包装Sink。如果最初传入的sink代表结束操作，</span>
<span class="token comment">// 函数返回时就可以得到一个代表了流水线上所有操作的Sink。</span>
<span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> <span class="token function">wrapSink</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>E_OUT<span class="token punctuation">></span></span> sink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AbstractPipeline</span> p<span class="token operator">=</span><span class="token class-name">AbstractPipeline</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span>depth <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">=</span>p<span class="token punctuation">.</span>previousStage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sink <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">opWrapSink</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>previousStage<span class="token punctuation">.</span>combinedFlags<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span><span class="token punctuation">)</span> sink<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在流水线上从开始到结束的所有的操作都被包装到了一个Sink里，执行这个Sink就相当于执行整个流水线，执行Sink的代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// AbstractPipeline.copyInto(), 对spliterator代表的数据执行wrappedSink代表的操作。</span>
<span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">copyInto</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> wrappedSink<span class="token punctuation">,</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> spliterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>SHORT_CIRCUIT<span class="token punctuation">.</span><span class="token function">isKnown</span><span class="token punctuation">(</span><span class="token function">getStreamAndOpFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        wrappedSink<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>spliterator<span class="token punctuation">.</span><span class="token function">getExactSizeIfKnown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通知开始遍历</span>
        spliterator<span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span>wrappedSink<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 迭代</span>
        wrappedSink<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通知遍历结束</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码首先调用wrappedSink.begin()方法告诉Sink数据即将到来，然后调用spliterator.forEachRemaining()方法对数据进行迭代（Spliterator是容器的一种迭代器，[参阅](<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/3-Lambda">https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/3-Lambda</a> and Collections.md#spliterator)），最后调用wrappedSink.end()方法通知Sink数据处理结束。逻辑如此清晰。</p>
<h3 id="gt-gt-执行后的结果在哪里"><a href="#gt-gt-执行后的结果在哪里" class="headerlink" title="&gt;&gt; 执行后的结果在哪里"></a>&gt;&gt; 执行后的结果在哪里</h3><p>最后一个问题是流水线上所有操作都执行后，用户所需要的结果（如果有）在哪里？首先要说明的是不是所有的Stream结束操作都需要返回结果，有些操作只是为了使用其副作用(<em>Side-effects</em>)，比如使用<code>Stream.forEach()</code>方法将结果打印出来就是常见的使用副作用的场景（事实上，除了打印之外其他场景都应避免使用副作用），对于真正需要返回结果的结束操作结果存在哪里呢？</p>
<blockquote>
<p>特别说明：副作用不应该被滥用，也许你会觉得在Stream.forEach()里进行元素收集是个不错的选择，就像下面代码中那样，但遗憾的是这样使用的正确性和效率都无法保证，因为Stream可能会并行执行。大多数使用副作用的地方都可以使用[归约操作](<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams">https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams</a> API(II).md)更安全和有效的完成。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误的收集方式</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Unnecessary use of side-effects!</span>
<span class="token comment">// 正确的收集方式</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>results <span class="token operator">=</span>
     stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// No side-effects!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>回到流水线执行结果的问题上来，需要返回结果的流水线结果存在哪里呢？这要分不同的情况讨论，下表给出了各种有返回结果的Stream结束操作。</p>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>对应的结束操作</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>anyMatch() allMatch() noneMatch()</td>
</tr>
<tr>
<td>Optional</td>
<td>findFirst() findAny()</td>
</tr>
<tr>
<td>归约结果</td>
<td>reduce() collect()</td>
</tr>
<tr>
<td>数组</td>
<td>toArray()</td>
</tr>
</tbody></table>
<ol>
<li>对于表中返回boolean或者Optional的操作（Optional是存放 一个 值的容器）的操作，由于值返回一个值，只需要在对应的Sink中记录这个值，等到执行结束时返回就可以了。</li>
<li>对于归约操作，最终结果放在用户调用时指定的容器中（容器类型通过[收集器](<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams">https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams</a> API(II).md#收集器)指定）。collect(), reduce(), max(), min()都是归约操作，虽然max()和min()也是返回一个Optional，但事实上底层是通过调用[reduce()](<a href="https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams">https://github.com/CarpenterLee/JavaLambdaInternals/blob/master/5-Streams</a> API(II).md#多面手reduce)方法实现的。</li>
<li>对于返回是数组的情况，毫无疑问的结果会放在数组当中。这么说当然是对的，但在最终返回数组之前，结果其实是存储在一种叫做<em>Node</em>的数据结构中的。Node是一种多叉树结构，元素存储在树的叶子当中，并且一个叶子节点可以存放多个元素。这样做是为了并行执行方便。关于Node的具体结构，我们会在下一节探究Stream如何并行执行时给出详细说明。</li>
</ol>
<p>我们直接举个栗子</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"马六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"三"</span><span class="token punctuation">,</span><span class="token string">"五"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"五"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>操作是如何记录下来的?</strong></p>
<ol>
<li>Head记录Stream起始操作</li>
<li>StatelessOp记录中间操作</li>
<li>StatefulOp记录有状态的中间操作<br>这三个操作实例化会指向其父类<code>AbstractPipeline</code>,也就是在<code>AbstractPipeline</code>中建立了双向链表</li>
</ol>
<p>对于Head</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AbstractPipeline</span><span class="token punctuation">(</span><span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> source<span class="token punctuation">,</span>
                 <span class="token keyword">int</span> sourceFlags<span class="token punctuation">,</span> <span class="token keyword">boolean</span> parallel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>previousStage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//首操作上一步为null    </span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sourceSpliterator <span class="token operator">=</span> source<span class="token punctuation">;</span> <span class="token comment">//数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sourceStage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//Head操作</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sourceOrOpFlags <span class="token operator">=</span> sourceFlags <span class="token operator">&amp;</span> <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>STREAM_MASK<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>combinedFlags <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>sourceOrOpFlags <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>INITIAL_OPS_VALUE<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>parallel <span class="token operator">=</span> parallel<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于其他Stage:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AbstractPipeline</span><span class="token punctuation">(</span><span class="token class-name">AbstractPipeline</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> E_IN<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> previousStage<span class="token punctuation">,</span> <span class="token keyword">int</span> opFlags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>previousStage<span class="token punctuation">.</span>linkedOrConsumed<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>MSG_STREAM_LINKED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    previousStage<span class="token punctuation">.</span>linkedOrConsumed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//双向链表的建立</span>
    previousStage<span class="token punctuation">.</span>nextStage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>previousStage <span class="token operator">=</span> previousStage<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sourceStage <span class="token operator">=</span> previousStage<span class="token punctuation">.</span>sourceStage<span class="token punctuation">;</span>        
    <span class="token keyword">this</span><span class="token punctuation">.</span>depth <span class="token operator">=</span> previousStage<span class="token punctuation">.</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        
    
    <span class="token keyword">this</span><span class="token punctuation">.</span>sourceOrOpFlags <span class="token operator">=</span> opFlags <span class="token operator">&amp;</span> <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>OP_MASK<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>combinedFlags <span class="token operator">=</span> <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span><span class="token function">combineOpFlags</span><span class="token punctuation">(</span>opFlags<span class="token punctuation">,</span> previousStage<span class="token punctuation">.</span>combinedFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">opIsStateful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        sourceStage<span class="token punctuation">.</span>sourceAnyStateful <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调用过程如此用双向链表串联起来,每一步都得知其上一步与下一步的操作.</p>
<p><img src="https://pic4.zhimg.com/80/v2-e13fc52100682a9b250e414f1de96753_720w.jpg" alt="img"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">data<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>“三”<span class="token punctuation">,</span>”五”<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>“五”<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>操作是如何叠加的?</strong></p>
<p><code>Sink&lt;T&gt;</code>接口:</p>
<ol>
<li>void begin(long size),循环开始前调用,通知每个Stage做好准备</li>
<li>void end(),循环结束时调用,依次调用每个Stage的end方法,处理结果</li>
<li>boolean cancellationRequested(),判断是否可以提前结束循环</li>
<li>void accept(T value),每一步的处理</li>
</ol>
<p>其子类之一ChainedReference:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ChainedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> E_OUT<span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E_OUT<span class="token punctuation">></span></span> downstream<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">ChainedReference</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E_OUT<span class="token punctuation">></span></span> downstream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>downstream <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>downstream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        downstream<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        downstream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">cancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> downstream<span class="token punctuation">.</span><span class="token function">cancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例Filter:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> P_OUT<span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StatelessOp</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">,</span> P_OUT<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">StreamShape</span><span class="token punctuation">.</span>REFERENCE<span class="token punctuation">,</span>
                                 <span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>NOT_SIZED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">></span></span> <span class="token function">opWrapSink</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">></span></span> sink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sink<span class="token punctuation">.</span>ChainedReference</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">,</span> P_OUT<span class="token punctuation">></span></span><span class="token punctuation">(</span>sink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    downstream<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">P_OUT</span> u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">//条件成立则传递给下一个操作,也因为如此所以有状态的操作必须放到</span>
                    <span class="token comment">//end方法里面</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        downstream<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再例如sorted():</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token class-name">Nodes</span><span class="token punctuation">.</span>MAX_ARRAY_SIZE<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">Nodes</span><span class="token punctuation">.</span>BAD_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    list <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> size<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    downstream<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cancellationWasRequested<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>downstream<span class="token operator">::</span><span class="token function">accept</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>downstream<span class="token punctuation">.</span><span class="token function">cancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            downstream<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    downstream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><img src="https://pic3.zhimg.com/80/v2-034ec3fcaeb99bac2df782df981dbf7a_720w.jpg" alt="img"></p>
<p><strong>叠加后如何执行?</strong></p>
<p>执行操作是由终端操作来触发的,例如foreach操作</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> P_OUT<span class="token punctuation">></span></span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//evaluate就是开关,一旦调用就立即执行整个Stream    </span>
    <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token class-name">ForEachOps</span><span class="token punctuation">.</span><span class="token function">makeRef</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行前会对操作从末尾到起始反向包裹起来,得到调用链</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Sink</span> <span class="token function">opWrapSink</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_OUT<span class="token punctuation">></span></span> sink<span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这个Sink是终端操作所对应的Sink</span>
<span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> <span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> <span class="token function">wrapSink</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>E_OUT<span class="token punctuation">></span></span> sink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>sink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">AbstractPipeline</span> p<span class="token operator">=</span><span class="token class-name">AbstractPipeline</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span>depth <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">=</span>p<span class="token punctuation">.</span>previousStage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sink <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">opWrapSink</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>previousStage<span class="token punctuation">.</span>combinedFlags<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span><span class="token punctuation">)</span> sink<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://pic1.zhimg.com/80/v2-899dd62d7ccd05f47d914d2b678e95dc_720w.jpg" alt="img"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">copyInto</span><span class="token punctuation">(</span><span class="token class-name">Sink</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> wrappedSink<span class="token punctuation">,</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> spliterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>wrappedSink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StreamOpFlag</span><span class="token punctuation">.</span>SHORT_CIRCUIT<span class="token punctuation">.</span><span class="token function">isKnown</span><span class="token punctuation">(</span><span class="token function">getStreamAndOpFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//依次执行调用链</span>
        wrappedSink<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>spliterator<span class="token punctuation">.</span><span class="token function">getExactSizeIfKnown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spliterator<span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span>wrappedSink<span class="token punctuation">)</span><span class="token punctuation">;</span>
        wrappedSink<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">copyIntoWithCancel</span><span class="token punctuation">(</span>wrappedSink<span class="token punctuation">,</span> spliterator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>有状态的中间操作何时执行?</strong></p>
<p>例如sorted()操作,其依赖上一次操作的结果集,按照调用链来说结果集必须在accept()调用完才会产生.那也就说明sorted操作需要在end中,然后再重新开启调用链.</p>
<p><strong>sorted的end方法</strong>:</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
     downstream<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cancellationWasRequested<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>downstream<span class="token operator">::</span><span class="token function">accept</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>
     <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span>downstream<span class="token punctuation">.</span><span class="token function">cancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
             downstream<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span>
     downstream<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么就相当于sorted给原有操作断路了一次,然后又重新接上,再次遍历.</p>
<p><img src="https://pic3.zhimg.com/80/v2-0d0ef60a9b3a1d5c81910064a9bcaa02_720w.jpg" alt="img"></p>
<p><strong>如何收集到结果?</strong></p>
<p>foreach是不需要收集到结果的,但是对于collect这样的操作是需要拿到最终end产生的结果.end产生的结果在最后一个Sink中,这样的操作最终都会提供一个取出数据的get方法.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> <span class="token class-name">R</span> <span class="token function">evaluateSequential</span><span class="token punctuation">(</span><span class="token class-name">PipelineHelper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> helper<span class="token punctuation">,</span>
                                    <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span>P_IN<span class="token punctuation">></span></span> spliterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">return</span> helper<span class="token punctuation">.</span><span class="token function">wrapAndCopyInto</span><span class="token punctuation">(</span><span class="token function">makeSink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spliterator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="WebFlux"><a href="#WebFlux" class="headerlink" title="WebFlux"></a>WebFlux</h1><p>关于WebFlux，阅读官网文档会发现有这些单词</p>
<blockquote>
<p>We touched on “non-blocking” and “functional” but what does reactive mean?</p>
<p>The term, “reactive,” refers to programming models that are built around reacting to change — network components reacting to I/O events, UI controllers reacting to mouse events, and others. In that sense, non-blocking is reactive, because, instead of being blocked, we are now in the mode of reacting to notifications as operations complete or data becomes available.</p>
<p>There is also another important mechanism that we on the Spring team associate with “reactive” and that is non-blocking back pressure. In synchronous, imperative code, blocking calls serve as a natural form of back pressure that forces the caller to wait. In non-blocking code, it becomes important to control the rate of events so that a fast producer does not overwhelm its destination.</p>
</blockquote>
<p>其中有几个关键词：响应式、异步非阻塞、背压。这就是WebFlux的概念核心</p>
<p>先上图</p>
<p><img src="https://pic.innnovation.cn//img/20210710223351.png" alt="WebFlux并发模型"></p>
<p>WebFlux模型主要依赖响应式编程库Reactor，Reactor 有两种模型，Flux 和 Mono，提供了非阻塞、支持回压机制的异步流处理能力。WebFlux API接收普通Publisher作为输入，在内部使其适配Reactor类型，使用它并返回Flux或Mono作为输出。</p>
<p>我们平时开发过程中只要在Controller中控制每个接口的Publisher入参和Mono返回值(web项目用mono比较多吧)就可以顺利使用WebFlux框架完成业务，并不需要关注黑盒中的东西。</p>
<p>上图中我们主要到从Http客户端到Spring Controller到Service到数据库之间所有的请求全部是Flux，即全部各个节点之间都是异步非阻塞，如果一个系统完全遵守Flux的模型开发，将会大大提高系统的吞吐量，比如Mybatis、JDBC等技术将不推荐使用，因为他们本质都是同步操作，这样还是会使得请求在最后的同步IO管线上堆积。对于底层的数据源来说，MongoDB, Redis, 和 Cassandra 可以直接以reactive的方式支持Spring Data。似乎目前公司的持久层还是用的JPA和mybatis，这样的话也许会使数据库服务器的并发连接成为系统的短板。</p>
<p><img src="https://pic.innnovation.cn//img/20210712095123.png" alt="mvc对比WebFlux"></p>
<p>我整理了一张反应式组件的图</p>
<p><img src="https://pic.innnovation.cn//img/20210710224942.png" alt="反应式组件关系"></p>
<p>其中JDK9的响应式流其实本质上完全跟JDK8的同步流不是一个东西，Project Reactor其实就是根据JDK9响应流接口1：1做的设计</p>
<p>Reactor官方javadoc</p>
<table>
<thead>
<tr>
<th align="left">Package</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/adapter/package-summary.html">reactor.adapter</a></td>
<td align="left">Adapt <a href="https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/Publisher.html?is-external=true"><code>Publisher</code></a> to Java 9+ <a href="https://projectreactor.io/docs/core/snapshot/api/reactor/adapter/JdkFlowAdapter.html"><code>Flow.Publisher</code></a>.</td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/core/package-summary.html">reactor.core</a></td>
<td align="left">Core components of the framework supporting extensions to the Reactive Stream programming model.</td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/core/publisher/package-summary.html">reactor.core.publisher</a></td>
<td align="left">Provide for <a href="https://projectreactor.io/docs/core/snapshot/api/reactor/core/publisher/Flux.html"><code>Flux</code></a>, <a href="https://projectreactor.io/docs/core/snapshot/api/reactor/core/publisher/Mono.html"><code>Mono</code></a> composition API and <a href="https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/Processor.html?is-external=true"><code>Processor</code></a> implementations</td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/core/scheduler/package-summary.html">reactor.core.scheduler</a></td>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/core/scheduler/Scheduler.html"><code>Scheduler</code></a> contract and static registry and factory methods in <a href="https://projectreactor.io/docs/core/snapshot/api/reactor/core/scheduler/Schedulers.html"><code>Schedulers</code></a>.</td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/util/package-summary.html">reactor.util</a></td>
<td align="left">Miscellaneous utility classes, such as loggers, tuples or queue suppliers and implementations.</td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/util/annotation/package-summary.html">reactor.util.annotation</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/util/concurrent/package-summary.html">reactor.util.concurrent</a></td>
<td align="left">Queue <a href="https://projectreactor.io/docs/core/snapshot/api/reactor/util/concurrent/Queues.html"><code>suppliers and utilities</code></a> Used for operational serialization (serializing threads) or buffering (asynchronous boundary).</td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/util/context/package-summary.html">reactor.util.context</a></td>
<td align="left">Miscellaneous utility classes, such as loggers, tuples or queue suppliers and implementations.</td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/util/function/package-summary.html">reactor.util.function</a></td>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/util/function/Tuples.html"><code>Tuples</code></a> provide a type-safe way to specify multiple parameters.</td>
</tr>
<tr>
<td align="left"><a href="https://projectreactor.io/docs/core/snapshot/api/reactor/util/retry/package-summary.html">reactor.util.retry</a></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>JDK Flow API</p>
<table>
<thead>
<tr>
<th align="left">Modifier and Type</th>
<th align="left">Class</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>static interface </code></td>
<td align="left"><code>Flow.Processor&lt;T,R&gt;</code></td>
<td align="left">A component that acts as both a Subscriber and Publisher.</td>
</tr>
<tr>
<td align="left"><code>static interface </code></td>
<td align="left"><code>Flow.Publisher&lt;T&gt;</code></td>
<td align="left">A producer of items (and related control messages) received by Subscribers.</td>
</tr>
<tr>
<td align="left"><code>static interface </code></td>
<td align="left"><code>Flow.Subscriber&lt;T&gt;</code></td>
<td align="left">A receiver of messages.</td>
</tr>
<tr>
<td align="left"><code>static interface </code></td>
<td align="left"><code>Flow.Subscription</code></td>
<td align="left">Message control linking a <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Publisher.html"><code>Flow.Publisher</code></a> and <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/Flow.Subscriber.html"><code>Flow.Subscriber</code></a>.</td>
</tr>
</tbody></table>
<p>观察对比，其中adapter做的就是对jdk9流做的适配，无论是哪个，他们都围绕一个非常关键的设计模式：<strong>观察者模式</strong></p>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p><img src="https://pic.innnovation.cn//img/20210712102620.svg" alt="观察者模式UML图"></p>
<p>对注册到Subject(对应Publisher) 的Observer(对应Subcriber)，当发生需要通知的方法时，通知所有集合中的observer对象</p>
<p>Java实现</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">EventSource</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">></span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token class-name">String</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>observer <span class="token operator">-></span> observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scanSystemIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">notifyObservers</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverDemo</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter Text: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EventSource</span> eventSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        eventSource<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>event <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received response: "</span> <span class="token operator">+</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        eventSource<span class="token punctuation">.</span><span class="token function">scanSystemIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Project-Reactor"><a href="#Project-Reactor" class="headerlink" title="Project Reactor"></a>Project Reactor</h1><h2 id="Flux-amp-Mono"><a href="#Flux-amp-Mono" class="headerlink" title="Flux &amp; Mono"></a>Flux &amp; Mono</h2><p><code>Flux&lt;T&gt;</code>是一个标准的Reactive Streams规范中的<code>Publisher&lt;T&gt;</code>，它代表一个包含了[0…N]个元素的异步序列流。在Reactive Streams规范中，针对流中每个元素，订阅者将会监听这三个事件：<code>onNext</code>、<code>onComplete</code>、<code>onError</code>。</p>
<p><code>Mono&lt;T&gt;</code>是一个特殊的<code>Flux&lt;T&gt;</code>，它代表一个仅包含1个元素的异步序列流。因为只有一个元素，所以订阅者只需要监听<code>onComplete</code>、<code>onError</code></p>
<h3 id="创建并订阅Flux或Mono"><a href="#创建并订阅Flux或Mono" class="headerlink" title="创建并订阅Flux或Mono"></a>创建并订阅Flux或Mono</h3><p>创建Flux或Mono的最简单方法，是使用那些工厂方法，如<code>just</code>、<code>fromIterable</code>、<code>empty</code>、<code>range</code>。当需要订阅它们时，可以调用如下几个重载的方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//仅订阅并触发流，不做其它处理</span>

<span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理流中的每个元素</span>

<span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">,</span>
          <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span> errorConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理流中的元素、处理相应的异常</span>

<span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">,</span>
          <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span> errorConsumer<span class="token punctuation">,</span>
          <span class="token class-name">Runnable</span> completeConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理流中的元素、处理相应的异常；当流结束时，可以执行一些内容</span>

<span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">,</span>
          <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Throwable</span><span class="token punctuation">></span></span> errorConsumer<span class="token punctuation">,</span>
          <span class="token class-name">Runnable</span> completeConsumer<span class="token punctuation">,</span>
          <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Subscription</span><span class="token punctuation">></span></span> subscriptionConsumer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后一个参数Subscription，代表处理一个元素的生命周期，也是Reactive Streams规范中定义的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="编程的方式创建Flux"><a href="#编程的方式创建Flux" class="headerlink" title="编程的方式创建Flux"></a>编程的方式创建Flux</h3><p><code>generate</code>、<code>create</code>、<code>push</code>、<code>handle</code>方法支持以编程的方式创建<code>Flux</code>，使创建方式更加灵活。</p>
<p><code>generate</code>方法创建的流是同步的，流内元素是有序的，依次被订阅者消费。</p>
<p><code>create</code>方法以异步、多线程的方式创建流。</p>
<p><code>push</code>方法以异步、单线程的方式创建流。</p>
<p><code>handle</code>方法是一个示例方法，它类似于<code>generate</code>，将一个已经存在的流，转换成同步的流。</p>
<p>以下是<code>generate</code>方法的一个简单示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> flux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>state<span class="token punctuation">,</span> sink<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
      sink<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">"3 x "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> sink<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** 流中的元素依次是：
3 x 0 = 0
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
**/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>使用静态工厂方法<code>fromIterable</code>创建一个<code>Flux</code>对象，而<code>flatMap</code>、<code>filter</code>等非静态方法即所谓操作符，多种操作符组合使用，可以对数据流的元素进行复杂处理。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> words <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"th"</span><span class="token punctuation">,</span> <span class="token string">"qu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> manyLetters <span class="token operator">=</span> <span class="token class-name">Flux</span>
        <span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>word <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step1="</span> <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step2="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step3="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
manyLetters<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Result="</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/** 输出结果：
Step1=th
Step2=t
Step3=t
Result=t

Step2=h
Step3=h
Result=h

Step1=qu
Step2=q
Step3=q
Result=q

Step2=u
Step3=u
Result=u
**/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>观察manyLetters变量的结构，Flux之所以支持对流中数据的链式调用，是因为每一步返回的Flux对象都被上一个Flux对象包含。</p>
<p><img src="https://pic.innnovation.cn//img/20210712125221.png" alt="manyLetters"></p>
<p><strong>manyLetters</strong></p>
<blockquote>
<p>组合的操作符(Operator)对流中数据进行处理，实际上是对<code>Publisher</code>发布消息前的功能增强，使元素可以在发布之前被加工处理好。</p>
</blockquote>
<p>如果仅看上面这种使用方式，看起来与Java 8的Stream差不多，并没有体现异步的特性，数据流在一开始就是确定的。假如不存在异步处理，使用Reactor就没有什么意义了。</p>
<p>与Java 8的Stream不同，Reactor支持以异步的方式创建<code>Flux</code>，看如下代码片段，MongoDB与Reactor结合使用：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">MongoCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">></span></span> collection<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Restaurant</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">RestaurantTransfer</span><span class="token operator">::</span><span class="token function">toDomainObject</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token operator">::</span><span class="token function">isPresent</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">ReactiveRestaurantRepository</span> repository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveRestaurantRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Restaurant</span><span class="token punctuation">></span></span> flux <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    flux<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>public static &lt;T&gt; Flux&lt;T&gt; from(Publisher&lt;? extends T&gt; source)</code>方法接收一个<code>org.reactivestreams.Publisher</code>参数，该对象是由MongoDB的Reactive客户端API创建的，MongoDB通过该对象，将DB中的数据，链接到Reactor的流中。</p>
<p>当调用subscribe方法后，一个发布-订阅的机制形成，只有当对象被从DB中取出并放入内存后，JVM才会占用线程资源，将消息发送给订阅者；从阻塞等待转变为了被动接收，因此节省了资源。</p>
<blockquote>
<p>由此可见，只有流中的数据全部是反应式的，Reactor才能发挥最大作用，一旦有节点被阻塞，就达不到节省资源的目的了。</p>
</blockquote>
<blockquote>
<p>正是由于MongoDB和Reactor Core都实现了Reactive Streams规范，它们才能相互沟通交互，Reactive Streams规范在反应式编程的推广过程中，起着至关重要的作用。</p>
</blockquote>
<h2 id="核心模型"><a href="#核心模型" class="headerlink" title="核心模型"></a>核心模型</h2><h3 id="publisher"><a href="#publisher" class="headerlink" title="publisher"></a>publisher</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>reactivestreams</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Publisher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相当于观察者模式的观察者Observer。Mono、flux就是实现的Publisher。 这里有规范一些publisher定义。<a href="https://github.com/reactor/reactive-streams-commons">github|reactive streams common</a></p>
<h3 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>reactivestreams</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相当于观察者模式的Observable。</p>
<h3 id="Subscription-控速、背压"><a href="#Subscription-控速、背压" class="headerlink" title="Subscription(控速、背压)"></a>Subscription(控速、背压)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>reactivestreams</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subscription</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Subscription是在一般观察者模式中没有的东西。 java文档有如下解释：</p>
<blockquote>
<p>It is used to both signal desire for data and cancel demand (and allow resource cleanup).</p>
</blockquote>
<p>通过分析源码，和reactive streams的java doc可知Subscription的作用，Subscription能通过request方法控制执行流速，也能通过cancel来取消执行。这就是前面提到<strong>背压</strong>的原理实现</p>
<h3 id="调用关系"><a href="#调用关系" class="headerlink" title="调用关系"></a>调用关系</h3><p>上面这些基本模型调用关系如下：</p>
<p><img src="https://pic.innnovation.cn//img/20210712103740.png" alt="invocation.png"></p>
<h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p>我以一个简洁的示例执行代码为例作分析(字符串拼接打印)：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"hetl"</span><span class="token punctuation">)</span> <span class="token comment">//@1</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s <span class="token operator">+</span> <span class="token string">"@akulaku.com"</span><span class="token punctuation">)</span> <span class="token comment">//@2</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//@3</span>
    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//@4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="声明阶段"><a href="#声明阶段" class="headerlink" title="声明阶段"></a>声明阶段</h3><p>在操作声明阶段，看步骤@1、@2、@3的源代码，这些方法就是每次将publisher和operator组合成一个新的publisher。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">just</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">onAssembly</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MonoJust</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> mapper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Fuseable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">onAssembly</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MonoMapFuseable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token function">onAssembly</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MonoMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="subscribe阶段"><a href="#subscribe阶段" class="headerlink" title="subscribe阶段"></a>subscribe阶段</h3><blockquote>
<p>By the act of subscribing, you tie the Publisher to a Subscriber, which triggers the flow of data in the whole chain. This is achieved internally by a single request signal from the Subscriber that is propagated upstream, all the way back to the source Publisher. — project reactor reference 3.3.4</p>
</blockquote>
<p>subscribe最终会调用最后一个publisher的subsribe方法，然后，逐步包装subscriber和具体操作(operation)，</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">CoreSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> actual<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>actual <span class="token keyword">instanceof</span> <span class="token class-name">ConditionalSubscriber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">ConditionalSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> cs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConditionalSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">R</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> actual<span class="token punctuation">;</span>
        source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FluxMapFuseable<span class="token punctuation">.</span>MapFuseableConditionalSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FluxMapFuseable<span class="token punctuation">.</span>MapFuseableSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后，到MonoJust （datasource publisher）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">CoreSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> actual<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    actual<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">scalarSubscription</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>将actual包装到Subscription中，开始转入onSubscribe。</p>
<h3 id="onSubscribe阶段"><a href="#onSubscribe阶段" class="headerlink" title="onSubscribe阶段"></a>onSubscribe阶段</h3><p>onSubscribe阶段，执行Subscriber的onSubscribe方法，Subscriber这里是，LambdaMonoSubscriber。 然后，发出request(n)。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscription <span class="token operator">=</span> s<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptionConsumer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                subscriptionConsumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Exceptions</span><span class="token punctuation">.</span><span class="token function">throwIfFatal</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            s<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="request阶段"><a href="#request阶段" class="headerlink" title="request阶段"></a>request阶段</h3><p>紧接onSubscribe的代码继续说明。其中较重要的就是Subscription.request()方法。 然后一路request就会到最外层的，并执行Subscriber.onNext，也就到执行阶段。</p>
<h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><p>//代码摘自FluxMapFuseable.java</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceMode <span class="token operator">==</span> ASYNC<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        actual<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">onNextDropped</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">currentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">R</span> v<span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            v <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">//@1</span>
                    <span class="token string">"The mapper returned a null value."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Operators</span><span class="token punctuation">.</span><span class="token function">onOperatorError</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">currentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        actual<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//@2</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看@1、@2，各Subscriber会一直执行onNext并触发执行所声明的操作，最后触发下一步操作。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于上面 核心模型-&gt;<a href="https://spring-source-code-learning.gitbook.teaho.net/webflux/project-reactor%E5%8E%9F%E7%90%86.html#%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB">调用关系</a>一节的分析，融合以上流程，然后，可得出如下整体流程图： <img src="https://pic.innnovation.cn//img/20210712111148.jpeg" alt="project%20reactor流程图.jpg"></p>
<h2 id="WebFlux请求分发"><a href="#WebFlux请求分发" class="headerlink" title="WebFlux请求分发"></a>WebFlux请求分发</h2><h3 id="reactor的map，flatMap，concatMap"><a href="#reactor的map，flatMap，concatMap" class="headerlink" title="reactor的map，flatMap，concatMap"></a>reactor的map，flatMap，concatMap</h3><ul>
<li>map</li>
</ul>
<p>map是同步非阻塞的1对1的转换数据处理。map方法签名接受<code>Function&lt;T, U&gt;</code> 返回<code>Flux&lt;U&gt;</code>。</p>
<p>[<img src="https://pic.innnovation.cn//img/20210712123616.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//同步执行乘法操作</span>
<span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i<span class="token operator">-></span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>c<span class="token operator">-></span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"getInt:&#123;&#125;"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>flatMap</li>
</ul>
<p>flatMap是异步非阻塞的1对N的转换数据处理。flayMap方法签名接受<code>Function&lt;T, Publisher&lt;V&gt;&gt;</code> 返回 <code>Flux&lt;V&gt;</code>。</p>
<p><img src="https://pic.innnovation.cn//img/20210712123757.png"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//异步执行乘法</span>
<span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>i<span class="token operator">-></span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>c <span class="token operator">-></span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"getInt:&#123;&#125;"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<p><strong>总结</strong>：flatMap的转换Function要求返回一个Publisher，这个Publisher代表一个作用于元素的异步的转换操作；而map仅仅是同步的元素转换操作。</p>
<ul>
<li>concatMap</li>
</ul>
<p><img src="https://pic.innnovation.cn//img/20210712123914.png"></p>
<p>concatMap 操作符的作用是把流中的每个元素转换成一个流, 再把所有流进行合并. 与 flatMap不同的是,concatMap会根据原始流中的元素顺序依次把转换之后的流进行合并。</p>
<h3 id="WebFlux-的DispatcherHandler"><a href="#WebFlux-的DispatcherHandler" class="headerlink" title="WebFlux 的DispatcherHandler"></a>WebFlux 的DispatcherHandler</h3><p>Spring MVC 的前端控制器是 DispatcherServlet，而WebFlux 的前端控制器是 DispatcherHandler，它实现了 WebHandler接口。DispatcherHandler完成 handler 的查找、调用和结果处理等步骤，关联的Bean如下：</p>
<table>
<thead>
<tr>
<th>Bean 类型</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>HandlerMapping</code></td>
<td>将请求映射到对应的 handler。主要的 <code>HandlerMapping</code> 实现有处理 <code>@RequestMapping</code> 注解的 <code>RequestMappingHandlerMapping</code> ，处理函数路由的<code>RouterFunctionMapping</code>，以及处理简单 URL 映射的 <code>SimpleUrlHandlerMapping</code>。</td>
</tr>
<tr>
<td><code>HandlerAdapter</code></td>
<td>帮助 <code>DispatcherHandler</code> 调用请求对应的 handler，而不用关心该 handler 具体的调用方式。例如，调用一个通过注解的方式定义的 controller 就需要寻找对应的注解，而 <code>HandlerAdapter</code> 的主要目的就是为了帮助 <code>DispatcherHandler</code> 屏蔽类似的细节.</td>
</tr>
<tr>
<td><code>HandlerResultHandler</code></td>
<td>处理 handler 调用后的结果，并生成最后的响应。参考 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-resulthandling">Result Handling</a>。</td>
</tr>
</tbody></table>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WebHandler</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">/**
	 * Handle the web server exchange.
	 * @param exchange the current server exchange
	 * @return &#123;@code Mono&lt;Void>&#125; to indicate when request handling is complete
	 */</span>
	<span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherHandler</span> <span class="token keyword">implements</span> <span class="token class-name">WebHandler</span><span class="token punctuation">,</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//流程1	</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token function">createNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span>
            <span class="token comment">//流程2</span>
				<span class="token punctuation">.</span><span class="token function">concatMap</span><span class="token punctuation">(</span>mapping <span class="token operator">-></span> mapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//流程3</span>
				<span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token function">createNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">//流程4</span>
				<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>handler <span class="token operator">-></span> <span class="token function">invokeHandler</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">//流程5</span>
				<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>result <span class="token operator">-></span> <span class="token function">handleResult</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ServerWebExchange对象每一次 HTTP 请求的信息（包括请求参数，路径，Cookie等）</p>
<p>从DispatcherHandler的handle实现可以看出WebFlux的请求分发流程：</p>
<ol>
<li>判断整个接口映射 mappings集合是否为空，空则创建一个 Not Found 的请求错误响应；</li>
<li>根据具体的请求地址获取对应的 handlerMapping（处理方法）;</li>
<li>handlerMapping为空的话找不到对应的处理方法，创建一个 Not Found 的请求错误响应；</li>
<li>通过 invokeHandler 方法找到对应的 HandlerAdapter 来完成调用</li>
<li>由 HandlerResultHandler 对结果进行处理，并生成响应</li>
</ol>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>使用 Spring WebFlux，下游使用的安全认证层、数据访问层框架都必须使用 Reactive API 保证上下游都是匹配的，非阻塞的。然而Spring Data Reactive Repositories 目前只支持 MongoDB、Redis 和Couchbase 等几种不支持事务管理的 NOSQL，技术选型时需要权衡利弊和风险。</p>
<ol>
<li>Spring MVC能满足场景的，就不需要更改为 Spring WebFlux，毕竟Reactive写法对比原本同步执行的程序写法很不同，而且很多基于Servlet线程模型的库将无法使用，如Spring Transaction……。</li>
<li>需要底层容器的支持（Netty和Servlet3.1+）。</li>
<li>适合应用在 IO 密集型的服务中（IO 密集型包括：磁盘IO密集型, 网络IO密集型），微服务网关就属于网络 IO 密集型，使用异步非阻塞式编程模型，能够显著地提升网关对下游服务转发的吞吐量。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>WebFlux</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/2021/07/16/fen-bu-shi-shi-wu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h1 id="1-什么是分布式事务"><a href="#1-什么是分布式事务" class="headerlink" title="1.什么是分布式事务"></a>1.什么是分布式事务</h1><p>要了解分布式事务，必须先了解本地事务。</p>
<h2 id="1-1-本地事务"><a href="#1-1-本地事务" class="headerlink" title="1.1.本地事务"></a>1.1.本地事务</h2><p>本地事务，是指传统的单机数据库事务，必须具备ACID原则：</p>
<ul>
<li><strong>原子性（A）</strong></li>
</ul>
<p>所谓的原子性就是说，在整个事务中的所有操作，要么全部完成，要么全部不做，没有中间状态。对于事务在执行中发生错误，所有的操作都会被回滚，整个事务就像从没被执行过一样。</p>
<ul>
<li><strong>一致性（C）</strong></li>
</ul>
<p>事务的执行必须保证系统的一致性，在事务开始之前和事务结束以后，数据库的完整性没有被破坏，就拿转账为例，A有500元，B有500元，如果在一个事务里A成功转给B50元，那么不管发生什么，那么最后A账户和B账户的数据之和必须是1000元。</p>
<ul>
<li><strong>隔离性（I）</strong></li>
</ul>
<p>所谓的隔离性就是说，事务与事务之间不会互相影响，一个事务的中间状态不会被其他事务感知。数据库保证隔离性包括四种不同的隔离级别：</p>
<p>​    Read Uncommitted（读取未提交内容）</p>
<p>​    Read Committed（读取提交内容）</p>
<p>​    Repeatable Read（可重读）</p>
<p>​    Serializable（可串行化）</p>
<ul>
<li><strong>持久性（D）</strong></li>
</ul>
<p>所谓的持久性，就是说一旦事务提交了，那么事务对数据所做的变更就完全保存在了数据库中，即使发生停电，系统宕机也是如此。</p>
<p>因为在传统项目中，项目部署基本是单点式：即单个服务器和单个数据库。这种情况下，数据库本身的事务机制就能保证ACID的原则，这样的事务就是本地事务。</p>
<p>概括来讲，单个服务与单个数据库的架构中，产生的事务都是本地事务。</p>
<p>其中原子性和持久性就要靠undo和redo 日志来实现。</p>
<h2 id="1-2-undo和redo"><a href="#1-2-undo和redo" class="headerlink" title="1.2.undo和redo"></a>1.2.undo和redo</h2><p>本小节参考内容：<a href="http://www.zhdba.com/mysqlops/2012/04/06/innodb-log1/">mysqlops</a></p>
<p>在数据库系统中，既有存放数据的文件，也有存放日志的文件。日志在内存中也是有缓存Log buffer，也有磁盘文件log file。</p>
<p>MySQL中的日志文件，有这么两种与事务有关：undo日志与redo日志。</p>
<h3 id="1-2-1-undo日志"><a href="#1-2-1-undo日志" class="headerlink" title="1.2.1.undo日志"></a>1.2.1.undo日志</h3><p>数据库事务具备原子性（<strong>Atomicity</strong>），如果事务执行失败，需要把数据回滚。</p>
<p>事务同时还具备持久性**(Durability)**，事务对数据所做的变更就完全保存在了数据库，不能因为故障而丢失。</p>
<p>原子性可以利用undo日志来实现。</p>
<p>Undo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到Undo Log。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。</p>
<p>数据库写入数据到磁盘之前，会把<strong>数据先缓存在内存</strong>中，事务提交时才会写入磁盘中。</p>
<p>用Undo Log实现原子性和持久化的事务的简化过程：</p>
<p> 假设有A、B两个数据，值分别为1,2。<br> A. 事务开始.<br> B. 记录A=1到undo log.<br> C. 修改A=3.<br> D. 记录B=2到undo log.<br> E. 修改B=4.<br> F. 将undo log写到磁盘。<br> G. 将数据写到磁盘。<br> H. 事务提交</p>
<ul>
<li><p>如何保证持久性？</p>
<p>事务提交前，会把修改数据到磁盘前，也就是说只要事务提交了，数据肯定持久化了。</p>
</li>
<li><p>如何保证原子性？</p>
<ul>
<li><p>每次对数据库修改，都会把修改前数据记录在undo log，那么需要回滚时，可以读取undo log，恢复数据。</p>
</li>
<li><p>若系统在G和H之间崩溃</p>
<p>此时事务并未提交，需要回滚。而undo log已经被持久化，可以根据undo log来恢复数据</p>
</li>
<li><p>若系统在G之前崩溃</p>
<p>此时数据并未持久化到硬盘，依然保持在事务之前的状态</p>
</li>
</ul>
</li>
</ul>
<p><strong>缺陷：</strong>每个事务提交前将数据和Undo Log写入磁盘，这样会导致大量的磁盘IO，因此性能很低。</p>
<p>如果能够将数据缓存一段时间，就能减少IO提高性能。但是这样就会丧失事务的持久性。因此引入了另外一种机制来实现持久化，即<strong>Redo Log</strong>.</p>
<h3 id="1-2-2-redo日志"><a href="#1-2-2-redo日志" class="headerlink" title="1.2.2.redo日志"></a>1.2.2.redo日志</h3><p>和Undo Log相反，Redo Log记录的是<strong>新数据</strong>的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化，减少了IO的次数。</p>
<p>先来看下基本原理：</p>
<blockquote>
<p><strong>Undo + Redo事务的简化过程</strong></p>
</blockquote>
<p> 假设有A、B两个数据，值分别为1,2</p>
<p> A. 事务开始.<br> B. 记录A=1到undo log buffer.<br> C. 修改A=3.<br> D. 记录A=3到redo log buffer.<br> E. 记录B=2到undo log buffer.<br> F. 修改B=4.<br> G. 记录B=4到redo log buffer.<br> H. 将undo log写入磁盘<br> I. 将redo log写入磁盘<br> J. 事务提交</p>
<blockquote>
<p>安全和性能问题</p>
</blockquote>
<ul>
<li><p>如何保证原子性？</p>
<p>如果在事务提交前故障，通过undo log日志恢复数据。如果undo log都还没写入，那么数据就尚未持久化，无需回滚</p>
</li>
<li><p>如何保证持久化？</p>
<p>大家会发现，这里并没有出现数据的持久化。因为数据已经写入redo log，而redo log持久化到了硬盘，因此只要到了步骤<code>I</code>以后，事务是可以提交的。</p>
</li>
<li><p>内存中的数据库数据何时持久化到磁盘？</p>
<p>因为redo log已经持久化，因此数据库数据写入磁盘与否影响不大，不过为了避免出现脏数据（内存中与磁盘不一致），事务提交后也会将内存数据刷入磁盘（也可以按照固设定的频率刷新内存数据到磁盘中）。</p>
</li>
<li><p>redo log何时写入磁盘</p>
<p>redo log会在事务提交之前，或者redo log buffer满了的时候写入磁盘</p>
</li>
</ul>
<p>这里存在两个问题：</p>
<p>问题1：之前是写undo和数据库数据到硬盘，现在是写undo和redo到磁盘，似乎没有减少IO次数</p>
<ul>
<li>数据库数据写入是随机IO，性能很差</li>
<li>redo log在初始化时会开辟一段连续的空间，写入是顺序IO，性能很好</li>
<li>实际上undo log并不是直接写入磁盘，而是先写入到redo log buffer中，当redo log持久化时，undo log就同时持久化到硬盘了。</li>
</ul>
<p>因此事务提交前，只需要对redo log持久化即可。</p>
<p>另外，redo log并不是写入一次就持久化一次，redo log在内存中也有自己的缓冲池：<code>redo log buffer</code>。每次写redo log都是写入到buffer，在提交时一次性持久化到磁盘，减少IO次数。</p>
<p>问题2：redo log 数据是写入内存buffer中，当buffer满或者事务提交时，将buffer数据写入磁盘。</p>
<p>redo log中记录的数据，有可能包含尚未提交事务，如果此时数据库崩溃，那么如何完成数据恢复？</p>
<p>数据恢复有两种策略：</p>
<ul>
<li>恢复时，只重做已经提交了的事务</li>
<li>恢复时，重做所有事务包括未提交的事务和回滚了的事务。然后通过Undo Log回滚那些未提交的事务</li>
</ul>
<p>Inodb引擎采用的是第二种方案，因此undo log要在 redo log前持久化</p>
<h3 id="1-2-3-总结"><a href="#1-2-3-总结" class="headerlink" title="1.2.3.总结"></a>1.2.3.总结</h3><p>最后总结一下：</p>
<ul>
<li>undo log 记录更新前数据，用于保证事务原子性</li>
<li>redo log 记录更新后数据，用于保证事务的持久性</li>
<li>redo log有自己的内存buffer，先写入到buffer，事务提交时写入磁盘</li>
<li>redo log持久化之后，意味着事务是<strong>可提交</strong>的</li>
</ul>
<h2 id="1-3-分布式事务"><a href="#1-3-分布式事务" class="headerlink" title="1.3.分布式事务"></a>1.3.分布式事务</h2><p>分布式事务，就是指不是在单个服务或单个数据库架构下，产生的事务：</p>
<ul>
<li>跨数据源的分布式事务</li>
<li>跨服务的分布式事务</li>
<li>综合情况</li>
</ul>
<h3 id="1）跨数据源"><a href="#1）跨数据源" class="headerlink" title="1）跨数据源"></a>1）跨数据源</h3><p>随着业务数据规模的快速发展，数据量越来越大，单库单表逐渐成为瓶颈。所以我们对数据库进行了水平拆分，将原单库单表拆分成数据库分片，于是就产生了跨数据库事务问题。</p>
<p><img src="assets/pic/1/image-20200304201018438.png" alt="跨数据源"></p>
<h3 id="2）跨服务"><a href="#2）跨服务" class="headerlink" title="2）跨服务"></a>2）跨服务</h3><p>在业务发展初期，“一块大饼”的单业务系统架构，能满足基本的业务需求。但是随着业务的快速发展，系统的访问量和业务复杂程度都在快速增长，单系统架构逐渐成为业务发展瓶颈，解决业务系统的高耦合、可伸缩问题的需求越来越强烈。</p>
<p>如下图所示，按照面向服务（SOA）的架构的设计原则，将单业务系统拆分成多个业务系统，降低了各系统之间的耦合度，使不同的业务系统专注于自身业务，更有利于业务的发展和系统容量的伸缩。</p>
<p><img src="assets/pic/1/image-20200304202639509.png" alt="跨服务"></p>
<h3 id="3）分布式系统的数据一致性问题"><a href="#3）分布式系统的数据一致性问题" class="headerlink" title="3）分布式系统的数据一致性问题"></a>3）分布式系统的数据一致性问题</h3><p>在数据库水平拆分、服务垂直拆分之后，一个业务操作通常要跨多个数据库、服务才能完成。在分布式网络环境下，我们无法保障所有服务、数据库都百分百可用，一定会出现部分服务、数据库执行成功，另一部分执行失败的问题。</p>
<p>当出现部分业务操作成功、部分业务操作失败时，业务数据就会出现不一致。</p>
<p>例如电商行业中比较常见的下单付款案例，包括下面几个行为：</p>
<ul>
<li>创建新订单</li>
<li>扣减商品库存</li>
<li>从用户账户余额扣除金额</li>
</ul>
<p>完成上面的操作需要访问三个不同的微服务和三个不同的数据库。</p>
<p><img src="assets/pic/1/image-20200304204442839.png" alt="下单付款业务"></p>
<p>在分布式环境下，肯定会出现部分操作成功、部分操作失败的问题，比如：订单生成了，库存也扣减了，但是 用户账户的余额不足，这就造成数据不一致。</p>
<p>订单的创建、库存的扣减、账户扣款在每一个服务和数据库内是一个本地事务，可以保证ACID原则。</p>
<p>但是当我们把三件事情看做一个事情事，要满足保证“业务”的原子性，要么所有操作全部成功，要么全部失败，不允许出现部分成功部分失败的现象，这就是分布式系统下的事务了。</p>
<p>此时ACID难以满足，这是分布式事务要解决的问题</p>
<h1 id="2-解决分布式事务的思路"><a href="#2-解决分布式事务的思路" class="headerlink" title="2.解决分布式事务的思路"></a>2.解决分布式事务的思路</h1><p>为什么分布式系统下，事务的ACID原则难以满足？</p>
<p>这得从CAP定理和BASE理论说起。</p>
<h2 id="2-1-CAP定理"><a href="#2-1-CAP定理" class="headerlink" title="2.1.CAP定理"></a>2.1.CAP定理</h2><p>本小节内容摘自：<a href="https://www.ruanyifeng.com/blog/2018/07/cap.html">CAP 定理的含义</a></p>
<p>什么是CAP定理呢？</p>
<p><img src="assets/pic/1/image-20200304205842784.png" alt="CAP定理"> </p>
<p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标。</p>
<blockquote>
<ul>
<li>Consistency（一致性）</li>
<li>Availability（可用性）</li>
<li>Partition tolerance （分区容错性）</li>
</ul>
</blockquote>
<p>它们的第一个字母分别是 C、A、P。</p>
<p>Eric Brewer 说，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。</p>
<h3 id="2-1-1-Partition-tolerance"><a href="#2-1-1-Partition-tolerance" class="headerlink" title="2.1.1.Partition tolerance"></a>2.1.1.Partition tolerance</h3><p>先看 Partition tolerance，中文叫做”分区容错”。</p>
<p>大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。分区容错的意思是，区间通信可能失败。比如，一台服务器放在上海，另一台服务器放在北京，这就是两个区，它们之间可能因网络问题无法通信。</p>
<p>如图：</p>
<p><img src="assets/pic/1/image-20200304210120471.png"> </p>
<p>上图中，G1 和 G2 是两台跨区的服务器。G1 向 G2 发送一条消息，G2 可能无法收到。系统设计的时候，必须考虑到这种情况。</p>
<p>一般来说，分布式系统，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。根据CAP 定理，剩下的 C 和 A 无法同时做到。</p>
<h3 id="2-1-2-Consistency"><a href="#2-1-2-Consistency" class="headerlink" title="2.1.2.Consistency"></a>2.1.2.Consistency</h3><p>Consistency 中文叫做”一致性”。意思是，写操作之后的读操作，必须返回该值。举例来说，某条记录是 v0，用户向 G1 发起一个写操作，将其改为 v1。</p>
<p><img src="assets/pic/1/image-20200304210414309.png"> </p>
<p>接下来，用户的读操作就会得到 v1。这就叫一致性。</p>
<p><img src="assets/pic/1/image-20200304210506575.png"> </p>
<p>问题是，用户有可能向 G2 发起读操作，由于 G2 的值没有发生变化，因此返回的是 v0。G1 和 G2 读操作的结果不一致，这就不满足一致性了。</p>
<p><img src="assets/pic/1/image-20200304210521364.png"></p>
<p>为了让 G2 也能变为 v1，就要在 G1 写操作的时候，让 G1 向 G2 发送一条消息，要求 G2 也改成 v1。</p>
<p><img src="assets/pic/1/image-20200304210540168.png"> </p>
<p>这样的话，用户向 G2 发起读操作，也能得到 v1。</p>
<p><img src="assets/pic/1/image-20200304210557117.png"> </p>
<h3 id="2-1-3-Availability"><a href="#2-1-3-Availability" class="headerlink" title="2.1.3.Availability"></a>2.1.3.Availability</h3><p> Availability 中文叫做”可用性”，意思是只要收到用户的请求，服务器就必须给出回应（对和错不论）。</p>
<p>用户可以选择向 G1 或 G2 发起读操作。不管是哪台服务器，只要收到请求，就必须告诉用户，到底是 v0 还是 v1，否则就不满足可用性。</p>
<h3 id="2-1-4-Consistency-和-Availability-的矛盾"><a href="#2-1-4-Consistency-和-Availability-的矛盾" class="headerlink" title="2.1.4.Consistency 和 Availability 的矛盾"></a>2.1.4.Consistency 和 Availability 的矛盾</h3><p>一致性和可用性，为什么不可能同时成立？</p>
<p>答案很简单，因为可能通信失败（即出现分区容错）。</p>
<p>如果保证 G2 的一致性，那么 G1 必须在写操作时，锁定 G2 的读操作和写操作。只有数据同步后，才能重新开放读写。锁定期间，G2 不能读写，没有可用性不。</p>
<p>如果保证 G2 的可用性，那么势必不能锁定 G2，所以一致性不成立。</p>
<p>综上所述，G2 无法同时做到一致性和可用性。系统设计时只能选择一个目标。如果追求一致性，那么无法保证所有节点的可用性；如果追求所有节点的可用性，那就没法做到一致性。</p>
<h3 id="2-1-5-几点疑问"><a href="#2-1-5-几点疑问" class="headerlink" title="2.1.5.几点疑问"></a>2.1.5.几点疑问</h3><ul>
<li><p>怎样才能同时满足CA？</p>
<p>除非是单点架构</p>
</li>
<li><p>何时要满足CP？</p>
<p>对一致性要求高的场景。例如我们的Zookeeper就是这样的，在服务节点间数据同步时，服务对外不可用。</p>
</li>
<li><p>何时满足AP？</p>
<p>对可用性要求较高的场景。例如Eureka，必须保证注册中心随时可用，不然拉取不到服务就可能出问题。</p>
</li>
</ul>
<h2 id="2-2-Base理论"><a href="#2-2-Base理论" class="headerlink" title="2.2.Base理论"></a>2.2.Base理论</h2><p>BASE是三个单词的缩写：</p>
<ul>
<li><p>Basically Available（基本可用）</p>
</li>
<li><p>Soft state（软状态）</p>
</li>
<li><p>Eventually consistent（最终一致性）</p>
</li>
</ul>
<p>而我们解决分布式事务，就是根据上述理论来实现。</p>
<p>还以上面的下单减库存和扣款为例：</p>
<p>订单服务、库存服务、用户服务及他们对应的数据库就是分布式应用中的三个部分。</p>
<ul>
<li><p>CP方式：现在如果要满足事务的强一致性，就必须在订单服务数据库锁定的同时，对库存服务、用户服务数据资源同时锁定。等待三个服务业务全部处理完成，才可以释放资源。此时如果有其他请求想要操作被锁定的资源就会被阻塞，这样就是满足了CP。</p>
<p>这就是强一致，弱可用</p>
</li>
<li><p>AP方式：三个服务的对应数据库各自独立执行自己的业务，执行本地事务，不要求互相锁定资源。但是这个中间状态下，我们去访问数据库，可能遇到数据不一致的情况，不过我们需要做一些后补措施，保证在经过一段时间后，数据最终满足一致性。</p>
<p>这就是高可用，但弱一致（最终一致）。</p>
</li>
</ul>
<p>由上面的两种思想，延伸出了很多的分布式事务解决方案：</p>
<ul>
<li>XA</li>
<li>TCC</li>
<li>可靠消息最终一致</li>
<li>AT</li>
</ul>
<h2 id="2-4-分阶段提交"><a href="#2-4-分阶段提交" class="headerlink" title="2.4.分阶段提交"></a>2.4.分阶段提交</h2><h3 id="2-4-1DTP和XA"><a href="#2-4-1DTP和XA" class="headerlink" title="2.4.1DTP和XA"></a>2.4.1DTP和XA</h3><p>分布式事务的解决手段之一，就是两阶段提交协议（2PC：Two-Phase Commit）</p>
<p>那么到底什么是两阶段提交协议呢？</p>
<p>1994 年，X/Open 组织（即现在的 Open Group ）定义了分布式事务处理的DTP 模型。该模型包括这样几个角色：</p>
<ul>
<li>应用程序（ AP ）：我们的微服务</li>
<li>事务管理器（ TM ）：全局事务管理者</li>
<li>资源管理器（ RM ）：一般是数据库</li>
<li>通信资源管理器（ CRM ）：是TM和RM间的通信中间件</li>
</ul>
<p>在该模型中，一个分布式事务（全局事务）可以被拆分成许多个本地事务，运行在不同的AP和RM上。每个本地事务的ACID很好实现，但是全局事务必须保证其中包含的每一个本地事务都能同时成功，若有一个本地事务失败，则所有其它事务都必须回滚。但问题是，本地事务处理过程中，并不知道其它事务的运行状态。因此，就需要通过CRM来通知各个本地事务，同步事务执行的状态。</p>
<p>因此，各个本地事务的通信必须有统一的标准，否则不同数据库间就无法通信。<strong>XA</strong>就是 X/Open DTP中通信中间件与TM间联系的<strong>接口规范</strong>，定义了用于通知事务开始、提交、终止、回滚等接口，各个数据库厂商都必须实现这些接口。</p>
<h3 id="2-4-2-二阶段提交"><a href="#2-4-2-二阶段提交" class="headerlink" title="2.4.2.二阶段提交"></a>2.4.2.二阶段提交</h3><p>参考：<a href="https://zhuanlan.zhihu.com/p/35298019">漫话分布式系统共识协议: 2PC/3PC篇</a></p>
<p><strong>二阶提交协议</strong>就是根据这一思想衍生出来的，将全局事务拆分为两个阶段来执行：</p>
<ul>
<li>阶段一：准备阶段，各个本地事务完成本地事务的准备工作。</li>
<li>阶段二：执行阶段，各个本地事务根据上一阶段执行结果，进行提交或回滚。</li>
</ul>
<p>这个过程中需要一个协调者（coordinator），还有事务的参与者（voter）。</p>
<blockquote>
<p>1）正常情况</p>
</blockquote>
<p><img src="assets/pic/1/image-20200305141029973.png"> </p>
<p><strong>投票阶段</strong>：协调组询问各个事务参与者，是否可以执行事务。每个事务参与者执行事务，写入redo和undo日志，然后反馈事务执行成功的信息（<code>agree</code>）</p>
<p><strong>提交阶段</strong>：协调组发现每个参与者都可以执行事务（<code>agree</code>），于是向各个事务参与者发出<code>commit</code>指令，各个事务参与者提交事务。</p>
<blockquote>
<p>2）异常情况</p>
</blockquote>
<p>当然，也有异常的时候：</p>
<p><img src="assets/pic/1/image-20200305141318326.png"> </p>
<p><strong>投票阶段</strong>：协调组询问各个事务参与者，是否可以执行事务。每个事务参与者执行事务，写入redo和undo日志，然后反馈事务执行结果，但只要有一个参与者返回的是<code>Disagree</code>，则说明执行失败。</p>
<p><strong>提交阶段</strong>：协调组发现有一个或多个参与者返回的是<code>Disagree</code>，认为执行失败。于是向各个事务参与者发出<code>abort</code>指令，各个事务参与者回滚事务。</p>
<blockquote>
<p>3）缺陷</p>
</blockquote>
<p>二阶段提交的问题：</p>
<ul>
<li><p>单点故障问题</p>
<p>2PC的缺点在于不能处理fail-stop形式的节点failure. 比如下图这种情况.</p>
<p><img src="assets/pic/1/image-20200305142812815.png"> </p>
<p>假设coordinator和voter3都在Commit这个阶段crash了, 而voter1和voter2没有收到commit消息. 这时候voter1和voter2就陷入了一个困境. 因为他们并不能判断现在是两个场景中的哪一种:</p>
<p> (1)上轮全票通过然后voter3第一个收到了commit的消息并在commit操作之后crash了</p>
<p> (2)上轮voter3反对所以干脆没有通过.</p>
</li>
<li><p>阻塞问题</p>
<p>在准备阶段、提交阶段，每个事物参与者都会锁定本地资源，并等待其它事务的执行结果，阻塞时间较长，资源锁定时间太久，因此执行的效率就比较低了。</p>
</li>
</ul>
<p>面对二阶段提交的上述缺点，后来又演变出了三阶段提交，但是依然没有完全解决阻塞和资源锁定的问题，而且引入了一些新的问题，因此实际使用的场景较少。</p>
<h3 id="2-4-3-使用场景"><a href="#2-4-3-使用场景" class="headerlink" title="2.4.3.使用场景"></a>2.4.3.使用场景</h3><p>对事务有强一致性要求，对事务执行效率不敏感，并且不希望有太多代码侵入。</p>
<h2 id="2-5-TCC"><a href="#2-5-TCC" class="headerlink" title="2.5.TCC"></a>2.5.TCC</h2><p>TCC模式可以解决2PC中的资源锁定和阻塞问题，减少资源锁定时间。</p>
<h3 id="2-5-1-基本原理"><a href="#2-5-1-基本原理" class="headerlink" title="2.5.1.基本原理"></a>2.5.1.基本原理</h3><p>它本质是一种补偿的思路。事务运行过程包括三个方法，</p>
<ul>
<li>Try：资源的检测和预留；</li>
<li>Confirm：执行的业务操作提交；要求 Try 成功 Confirm 一定要能成功；</li>
<li>Cancel：预留资源释放。</li>
</ul>
<p>执行分两个阶段：</p>
<ul>
<li>准备阶段（try）：资源的检测和预留；</li>
<li>执行阶段（confirm/cancel）：根据上一步结果，判断下面的执行方法。如果上一步中所有事务参与者都成功，则这里执行confirm。反之，执行cancel</li>
</ul>
<p><img src="assets/pic/1/image-20200305155521612.png"> </p>
<p>粗看似乎与两阶段提交没什么区别，但其实差别很大：</p>
<ul>
<li>try、confirm、cancel都是独立的事务，不受其它参与者的影响，不会阻塞等待它人</li>
<li>try、confirm、cancel由程序员在业务层编写，锁粒度有代码控制</li>
</ul>
<h3 id="2-5-2-实例"><a href="#2-5-2-实例" class="headerlink" title="2.5.2.实例"></a>2.5.2.实例</h3><p>我们以之前的下单业务中的扣减余额为例来看下三个不同的方法要怎么编写，假设账户A原来余额是100，需要余额扣减30元。如图：</p>
<p><img src="assets/pic/1/image-20200305155830732.png"></p>
<ul>
<li><p>一阶段（Try）：余额检查，并冻结用户部分金额，此阶段执行完毕，事务已经提交</p>
<ul>
<li>检查用户余额是否充足，如果充足，冻结部分余额</li>
<li>在账户表中添加冻结金额字段，值为30，余额不变</li>
</ul>
</li>
<li><p>二阶段</p>
<ul>
<li>提交（Confirm）：真正的扣款，把冻结金额从余额中扣除，冻结金额清空<ul>
<li>修改冻结金额为0，修改余额为100-30 = 70元</li>
</ul>
</li>
<li>补偿（Cancel）：释放之前冻结的金额，并非回滚<ul>
<li>余额不变，修改账户冻结金额为0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-5-3-优势和缺点"><a href="#2-5-3-优势和缺点" class="headerlink" title="2.5.3.优势和缺点"></a>2.5.3.优势和缺点</h3><ul>
<li><p>优势</p>
<p>TCC执行的每一个阶段都会提交本地事务并释放锁，并不需要等待其它事务的执行结果。而如果其它事务执行失败，最后不是回滚，而是执行补偿操作。这样就避免了资源的长期锁定和阻塞等待，执行效率比较高，属于性能比较好的分布式事务方式。</p>
</li>
<li><p>缺点</p>
<ul>
<li>代码侵入：需要人为编写代码实现try、confirm、cancel，代码侵入较多</li>
<li>开发成本高：一个业务需要拆分成3个步骤，分别编写业务实现，业务编写比较复杂</li>
<li>安全性考虑：cancel动作如果执行失败，资源就无法释放，需要引入重试机制，而重试可能导致重复执行，还要考虑重试时的幂等问题</li>
</ul>
</li>
</ul>
<h3 id="2-5-4-使用场景"><a href="#2-5-4-使用场景" class="headerlink" title="2.5.4.使用场景"></a>2.5.4.使用场景</h3><ul>
<li>对事务有一定的一致性要求（最终一致）</li>
<li>对性能要求较高</li>
<li>开发人员具备较高的编码能力和幂等处理经验</li>
</ul>
<h2 id="2-6-可靠消息服务"><a href="#2-6-可靠消息服务" class="headerlink" title="2.6.可靠消息服务"></a>2.6.可靠消息服务</h2><p>这种实现方式的思路，其实是源于ebay，其基本的设计思想是将远程分布式事务拆分成一系列的本地事务。</p>
<h3 id="2-6-1-基本原理"><a href="#2-6-1-基本原理" class="headerlink" title="2.6.1.基本原理"></a>2.6.1.基本原理</h3><p>一般分为事务的发起者A和事务的其它参与者B：</p>
<ul>
<li>事务发起者A执行本地事务</li>
<li>事务发起者A通过MQ将需要执行的事务信息发送给事务参与者B</li>
<li>事务参与者B接收到消息后执行本地事务</li>
</ul>
<p>如图：</p>
<p><img src="assets/pic/1/image-20200305181454125.png"></p>
<p>这个过程有点像你去学校食堂吃饭：</p>
<ul>
<li>拿着钱去收银处，点一份红烧牛肉面，付钱</li>
<li>收银处给你发一个小票，还有一个号牌，你别把票弄丢！</li>
<li>你凭小票和号牌一定能领到一份红烧牛肉面，不管需要多久</li>
</ul>
<p>几个注意事项：</p>
<ul>
<li>事务发起者A必须确保本地事务成功后，消息一定发送成功</li>
<li>MQ必须保证消息正确投递和持久化保存</li>
<li>事务参与者B必须确保消息最终一定能消费，如果失败需要多次重试</li>
<li>事务B执行失败，会重试，但不会导致事务A回滚</li>
</ul>
<p>那么问题来了，我们如何保证消息发送一定成功？如何保证消费者一定能收到消息？</p>
<h3 id="2-6-2-本地消息表"><a href="#2-6-2-本地消息表" class="headerlink" title="2.6.2.本地消息表"></a>2.6.2.本地消息表</h3><p>为了避免消息发送失败或丢失，我们可以把消息持久化到数据库中。实现时有简化版本和解耦合版本两种方式。</p>
<h4 id="1）简化版本"><a href="#1）简化版本" class="headerlink" title="1）简化版本"></a>1）简化版本</h4><p>原理图：</p>
<p><img src="assets/pic/1/image-20200305183431211.png"> </p>
<ul>
<li><p>事务发起者：</p>
<ul>
<li>开启本地事务</li>
<li>执行事务相关业务</li>
<li>发送消息到MQ</li>
<li>把消息持久化到数据库，标记为已发送</li>
<li>提交本地事务</li>
</ul>
</li>
<li><p>事务接收者：</p>
<ul>
<li>接收消息</li>
<li>开启本地事务</li>
<li>处理事务相关业务</li>
<li>修改数据库消息状态为已消费</li>
<li>提交本地事务</li>
</ul>
</li>
<li><p>额外的定时任务</p>
<ul>
<li>定时扫描表中超时未消费消息，重新发送</li>
</ul>
</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>与tcc相比，实现方式较为简单，开发成本低。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><p>数据一致性完全依赖于消息服务，因此消息服务必须是可靠的。</p>
</li>
<li><p>需要处理被动业务方的幂等问题</p>
</li>
<li><p>被动业务失败不会导致主动业务的回滚，而是重试被动的业务</p>
</li>
<li><p><strong>事务业务与消息发送业务耦合</strong>、业务数据与消息表要在一起</p>
</li>
</ul>
<h4 id="2）独立消息服务"><a href="#2）独立消息服务" class="headerlink" title="2）独立消息服务"></a>2）独立消息服务</h4><p>为了解决上述问题，我们会引入一个独立的消息服务，来完成对消息的持久化、发送、确认、失败重试等一系列行为，大概的模型如下：</p>
<p><img src="assets/pic/1/image-20200305200131083.png" alt="独立消息服务"></p>
<p>一次消息发送的时序图：</p>
<p><img src="assets/pic/1/image-20200305205430863.png" alt="时序图"></p>
<p>事务发起者A的基本执行步骤：</p>
<ul>
<li>开启本地事务</li>
<li>通知消息服务，准备发送消息（消息服务将消息持久化，标记为准备发送）</li>
<li>执行本地业务，<ul>
<li>执行失败则终止，通知消息服务，取消发送（消息服务修改订单状态）</li>
<li>执行成功则继续，通知消息服务，确认发送（消息服务发送消息、修改订单状态）</li>
</ul>
</li>
<li>提交本地事务</li>
</ul>
<p>消息服务本身提供下面的接口：</p>
<ul>
<li>准备发送：把消息持久化到数据库，并标记状态为准备发送</li>
<li>取消发送：把数据库消息状态修改为取消</li>
<li>确认发送：把数据库消息状态修改为确认发送。尝试发送消息，成功后修改状态为已发送</li>
<li>确认消费：消费者已经接收并处理消息，把数据库消息状态修改为已消费</li>
<li>定时任务：定时扫描数据库中状态为确认发送的消息，然后询问对应的事务发起者，事务业务执行是否成功，结果：<ul>
<li>业务执行成功：尝试发送消息，成功后修改状态为已发送</li>
<li>业务执行失败：把数据库消息状态修改为取消</li>
</ul>
</li>
</ul>
<p>事务参与者B的基本步骤：</p>
<ul>
<li>接收消息</li>
<li>开启本地事务</li>
<li>执行业务</li>
<li>通知消息服务，消息已经接收和处理</li>
<li>提交事务</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>解除了事务业务与消息相关业务的耦合</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>实现起来比较复杂</li>
</ul>
<h3 id="2-6-3-RocketMQ事务消息"><a href="#2-6-3-RocketMQ事务消息" class="headerlink" title="2.6.3.RocketMQ事务消息"></a>2.6.3.RocketMQ事务消息</h3><p>RocketMQ本身自带了事务消息，可以保证消息的可靠性，原理其实就是自带了本地消息表，与我们上面讲的思路类似。</p>
<h3 id="2-6-4-RabbitMQ的消息确认"><a href="#2-6-4-RabbitMQ的消息确认" class="headerlink" title="2.6.4.RabbitMQ的消息确认"></a>2.6.4.RabbitMQ的消息确认</h3><p>RabbitMQ确保消息不丢失的思路比较奇特，并没有使用传统的本地表，而是利用了消息的确认机制：</p>
<ul>
<li>生产者确认机制：确保消息从生产者到达MQ不会有问题<ul>
<li>消息生产者发送消息到RabbitMQ时，可以设置一个异步的监听器，监听来自MQ的ACK</li>
<li>MQ接收到消息后，会返回一个回执给生产者：<ul>
<li>消息到达交换机后路由失败，会返回失败ACK</li>
<li>消息路由成功，持久化失败，会返回失败ACK</li>
<li>消息路由成功，持久化成功，会返回成功ACK</li>
</ul>
</li>
<li>生产者提前编写好不同回执的处理方式<ul>
<li>失败回执：等待一定时间后重新发送</li>
<li>成功回执：记录日志等行为</li>
</ul>
</li>
</ul>
</li>
<li>消费者确认机制：确保消息能够被消费者正确消费<ul>
<li>消费者需要在监听队列的时候指定手动ACK模式</li>
<li>RabbitMQ把消息投递给消费者后，会等待消费者ACK，接收到ACK后才删除消息，如果没有接收到ACK消息会一直保留在服务端，如果消费者断开连接或异常后，消息会投递给其它消费者。</li>
<li>消费者处理完消息，提交事务后，手动ACK。如果执行过程中抛出异常，则不会ACK，业务处理失败，等待下一条消息</li>
</ul>
</li>
</ul>
<p>经过上面的两种确认机制，可以确保从消息生产者到消费者的消息安全，再结合生产者和消费者两端的本地事务，即可保证一个分布式事务的最终一致性。</p>
<h3 id="2-6-5-消息事务的优缺点"><a href="#2-6-5-消息事务的优缺点" class="headerlink" title="2.6.5.消息事务的优缺点"></a>2.6.5.消息事务的优缺点</h3><p>总结上面的几种模型，消息事务的优缺点如下：</p>
<ul>
<li>优点：<ul>
<li>业务相对简单，不需要编写三个阶段业务</li>
<li>是多个本地事务的结合，因此资源锁定周期短，性能好</li>
</ul>
</li>
<li>缺点：<ul>
<li>代码侵入</li>
<li>依赖于MQ的可靠性</li>
<li>消息发起者可以回滚，但是消息参与者无法引起事务回滚</li>
<li>事务时效性差，取决于MQ消息发送是否及时，还有消息参与者的执行情况</li>
</ul>
</li>
</ul>
<p>针对事务无法回滚的问题，有人提出说可以再事务参与者执行失败后，再次利用MQ通知消息服务，然后由消息服务通知其他参与者回滚。那么，恭喜你，你利用MQ和自定义的消息服务再次实现了2PC 模型，又造了一个大轮子</p>
<h2 id="2-7-AT模式"><a href="#2-7-AT模式" class="headerlink" title="2.7.AT模式"></a>2.7.AT模式</h2><p>2019年 1 月份，Seata 开源了 AT 模式。AT 模式是一种无侵入的分布式事务解决方案。可以看做是对TCC或者二阶段提交模型的一种优化，解决了TCC模式中的代码侵入、编码复杂等问题。</p>
<p>在 AT 模式下，用户只需关注自己的“业务 SQL”，用户的 “业务 SQL” 作为一阶段，Seata 框架会自动生成事务的二阶段提交和回滚操作。</p>
<p>可以参考Seata的<a href="https://seata.io/zh-cn/docs/dev/mode/at-mode.html">官方文档</a>。</p>
<h3 id="2-7-1-基本原理"><a href="#2-7-1-基本原理" class="headerlink" title="2.7.1.基本原理"></a>2.7.1.基本原理</h3><p>先来看一张流程图：</p>
<p><img src="assets/pic/1/image-20200305212340203.png" alt="AT模式"></p>
<p>有没有感觉跟TCC的执行很像，都是分两个阶段：</p>
<ul>
<li>一阶段：执行本地事务，并返回执行结果</li>
<li>二阶段：根据一阶段的结果，判断二阶段做法：提交或回滚</li>
</ul>
<p>但AT模式底层做的事情可完全不同，而且第二阶段根本不需要我们编写，全部有Seata自己实现了。也就是说：我们写的<strong>代码与本地事务时代码一样</strong>，无需手动处理分布式事务。</p>
<p>那么，AT模式如何实现无代码侵入，如何帮我们自动实现二阶段代码的呢？</p>
<blockquote>
<p>一阶段</p>
</blockquote>
<p>在一阶段，Seata 会拦截“业务 SQL”，首先解析 SQL 语义，找到“<code>业务 SQL</code>”要更新的业务数据，在业务数据被更新前，将其保存成“<code>before image</code>”，然后执行“<code>业务 SQL</code>”更新业务数据，在业务数据更新之后，再将其保存成“<code>after image</code>”，最后获取全局行锁，<strong>提交事务</strong>。以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性。</p>
<p>这里的<code>before image</code>和<code>after image</code>类似于数据库的undo和redo日志，但其实是用数据库模拟的。</p>
<p><img src="assets/pic/1/image-20200305213652558.png"></p>
<blockquote>
<p>二阶段提交</p>
</blockquote>
<p>二阶段如果是提交的话，因为“<code>业务 SQL</code>”在一阶段已经提交至数据库， 所以 Seata 框架只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可。</p>
<blockquote>
<p>二阶段回滚：</p>
</blockquote>
<p>二阶段如果是回滚的话，Seata 就需要回滚一阶段已经执行的“<code>业务 SQL</code>”，还原业务数据。回滚方式便是用“<code>before image</code>”还原业务数据；但在还原前要首先要校验脏写，对比“数据库当前业务数据”和 “<code>after image</code>”，如果两份数据完全一致就说明没有脏写，可以还原业务数据，如果不一致就说明有<code>脏写</code>，出现脏写就需要转人工处理。</p>
<p><img src="assets/pic/1/image-20200305214649845.png"></p>
<p>不过因为有全局锁机制，所以可以降低出现<code>脏写</code>的概率。</p>
<p>AT 模式的一阶段、二阶段提交和回滚均由 Seata 框架自动生成，用户只需编写“业务 SQL”，便能轻松接入分布式事务，AT 模式是一种对业务无任何侵入的分布式事务解决方案。</p>
<h3 id="2-7-2-详细架构和流程"><a href="#2-7-2-详细架构和流程" class="headerlink" title="2.7.2.详细架构和流程"></a>2.7.2.详细架构和流程</h3><p>Seata中的几个基本概念：</p>
<ul>
<li><p>TC（Transaction Coordinator） - 事务协调者</p>
<p>维护全局和分支事务的状态，驱动全局事务提交或回滚（TM之间的协调者）。</p>
</li>
<li><p>TM（Transaction Manager） - 事务管理器</p>
<p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>
</li>
<li><p>RM（Resource Manager） - 资源管理器</p>
<p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>
</li>
</ul>
<p>我们看下面的一个架构图</p>
<p><img src="assets/pic/1/image-20200305225811888.png"></p>
<ul>
<li>TM：业务模块中全局事务的开启者<ul>
<li>向TC开启一个全局事务</li>
<li>调用其它微服务</li>
</ul>
</li>
<li>RM：业务模块执行者中，包含RM部分，负责向TC汇报事务执行状态<ul>
<li>执行本地事务</li>
<li>向TC注册分支事务，并提交本地事务执行结果</li>
</ul>
</li>
<li>TM：结束对微服务的调用，通知TC，全局事务执行完毕，事务一阶段结束</li>
<li>TC：汇总各个分支事务执行结果，决定分布式事务是提交还是回滚；</li>
<li>TC 通知所有 RM 提交/回滚 资源，事务二阶段结束。</li>
</ul>
<p>一阶段：</p>
<ul>
<li>TM开启全局事务，并向TC声明全局事务，包括全局事务XID信息</li>
<li>TM所在服务调用其它微服务</li>
<li>微服务，主要有RM来执行<ul>
<li>查询<code>before_image</code></li>
<li>执行本地事务</li>
<li>查询<code>after_image</code></li>
<li>生成<code>undo_log</code>并写入数据库</li>
<li>向TC注册分支事务，告知事务执行结果</li>
<li>获取全局锁（阻止其它全局事务并发修改当前数据）</li>
<li>释放本地锁（不影响其它业务对数据的操作）</li>
</ul>
</li>
<li>待所有业务执行完毕，事务发起者（TM）会尝试向TC提交全局事务</li>
</ul>
<p>二阶段：</p>
<ul>
<li>TC统计分支事务执行情况，根据结果判断下一步行为<ul>
<li>分支都成功：通知分支事务，提交事务</li>
<li>有分支执行失败：通知执行成功的分支事务，回滚数据</li>
</ul>
</li>
<li>分支事务的RM<ul>
<li>提交事务：直接清空<code>before_image</code>和<code>after_image</code>信息，释放全局锁</li>
<li>回滚事务：<ul>
<li>校验after_image，判断是否有脏写</li>
<li>如果没有脏写，回滚数据到<code>before_image</code>，清除<code>before_image</code>和<code>after_image</code></li>
<li>如果有脏写，请求人工介入</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-7-3-工作机制"><a href="#2-7-3-工作机制" class="headerlink" title="2.7.3.工作机制"></a>2.7.3.工作机制</h3><p>详见Seata的官方文档：<a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html">https://seata.io/zh-cn/docs/overview/what-is-seata.html</a></p>
<blockquote>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4></blockquote>
<p>以一个示例来说明整个 AT 分支的工作过程。</p>
<p>业务表：<code>product</code></p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Key</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint(20)</td>
<td>PRI</td>
</tr>
<tr>
<td>name</td>
<td>varchar(100)</td>
<td></td>
</tr>
<tr>
<td>since</td>
<td>varchar(100)</td>
<td></td>
</tr>
</tbody></table>
<p>AT 分支事务的业务逻辑：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> product <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'GTS'</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'TXC'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<h4 id="一阶段"><a href="#一阶段" class="headerlink" title="一阶段"></a>一阶段</h4></blockquote>
<p>过程：</p>
<ol>
<li>解析 SQL：得到 SQL 的类型（UPDATE），表（product），条件（where name = ‘TXC’）等相关的信息。</li>
<li>查询前镜像：根据解析得到的条件信息，生成查询语句，定位数据。</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> since <span class="token keyword">from</span> product <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'TXC'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>得到前镜像：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>since</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>TXC</td>
<td>2014</td>
</tr>
</tbody></table>
<ol>
<li>执行业务 SQL：更新这条记录的 name 为 ‘GTS’。</li>
<li>查询后镜像：根据前镜像的结果，通过 <strong>主键</strong> 定位数据。</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> since <span class="token keyword">from</span> product <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>得到后镜像：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>since</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>GTS</td>
<td>2014</td>
</tr>
</tbody></table>
<ol>
<li>插入回滚日志：把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 <code>UNDO_LOG</code> 表中。</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"branchId"</span><span class="token operator">:</span> <span class="token number">641789253</span><span class="token punctuation">,</span>
	<span class="token property">"undoItems"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
		<span class="token property">"afterImage"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token property">"rows"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
				<span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
					<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>
					<span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
					<span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
					<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>
					<span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
					<span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"GTS"</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
					<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"since"</span><span class="token punctuation">,</span>
					<span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
					<span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2014"</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token property">"tableName"</span><span class="token operator">:</span> <span class="token string">"product"</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token property">"beforeImage"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
			<span class="token property">"rows"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
				<span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
					<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>
					<span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
					<span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">1</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
					<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>
					<span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
					<span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"TXC"</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
					<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"since"</span><span class="token punctuation">,</span>
					<span class="token property">"type"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
					<span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"2014"</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token property">"tableName"</span><span class="token operator">:</span> <span class="token string">"product"</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token property">"sqlType"</span><span class="token operator">:</span> <span class="token string">"UPDATE"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">"xid"</span><span class="token operator">:</span> <span class="token string">"xid:xxx"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>提交前，向 TC 注册分支：申请 <code>product</code> 表中，主键值等于 1 的记录的 <strong>全局锁</strong> 。</li>
<li>本地事务提交：业务数据的更新和前面步骤中生成的 UNDO LOG 一并提交。</li>
<li>将本地事务提交的结果上报给 TC。</li>
</ol>
<blockquote>
<h4 id="二阶段-回滚"><a href="#二阶段-回滚" class="headerlink" title="二阶段-回滚"></a>二阶段-回滚</h4></blockquote>
<ol>
<li>收到 TC 的分支回滚请求，开启一个本地事务，执行如下操作。</li>
<li>通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。</li>
<li>数据校验：拿 UNDO LOG 中的后镜与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改。这种情况，需要根据配置策略来做处理，详细的说明在另外的文档中介绍。</li>
<li>根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句：</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> product <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">'TXC'</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol>
<li>提交本地事务。并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。</li>
</ol>
<blockquote>
<h4 id="二阶段-提交"><a href="#二阶段-提交" class="headerlink" title="二阶段-提交"></a>二阶段-提交</h4></blockquote>
<ol>
<li>收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。</li>
<li>异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录。</li>
</ol>
<h3 id="2-7-4-优缺点"><a href="#2-7-4-优缺点" class="headerlink" title="2.7.4.优缺点"></a>2.7.4.优缺点</h3><p>优点：</p>
<ul>
<li>与2PC相比：每个分支事务都是独立提交，不互相等待，减少了资源锁定和阻塞时间</li>
<li>与TCC相比：二阶段的执行操作全部自动化生成，无代码侵入，开发成本低</li>
</ul>
<p>缺点：</p>
<ul>
<li>与TCC相比，需要动态生成二阶段的反向补偿操作，执行性能略低于TCC</li>
</ul>
<h2 id="2-8-Saga模式"><a href="#2-8-Saga模式" class="headerlink" title="2.8.Saga模式"></a>2.8.Saga模式</h2><p>Saga 模式是 Seata 即将开源的长事务解决方案，将由蚂蚁金服主要贡献。</p>
<p>其理论基础是Hector &amp; Kenneth  在1987年发表的论文<a href="https://microservices.io/patterns/data/saga.html">Sagas</a>。</p>
<p>Seata官网对于Saga的指南：<a href="https://seata.io/zh-cn/docs/user/saga.html">https://seata.io/zh-cn/docs/user/saga.html</a></p>
<h3 id="基本模型"><a href="#基本模型" class="headerlink" title="基本模型"></a>基本模型</h3><p>在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。</p>
<p>分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会去退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。</p>
<p><img src="assets/pic/1/1561965208439-606129fe-6761-4177-8887-1fda9306f104.png" alt="Saga 模式"> </p>
<p>Saga 模式下分布式事务通常是由事件驱动的，各个参与者之间是异步执行的，Saga 模式是一种长事务解决方案。</p>
<h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h3><ul>
<li>业务流程长、业务流程多</li>
<li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</li>
</ul>
<h3 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h3><ul>
<li>一阶段提交本地事务，无锁，高性能</li>
<li>事件驱动架构，参与者可异步执行，高吞吐</li>
<li>补偿服务易于实现</li>
</ul>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul>
<li>不保证隔离性（应对方案见<a href="https://seata.io/zh-cn/docs/user/saga.html">用户文档</a>）</li>
</ul>
<h1 id="3-Seata"><a href="#3-Seata" class="headerlink" title="3.Seata"></a>3.Seata</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1.介绍"></a>3.1.介绍</h2><p>Seata（Simple Extensible Autonomous Transaction Architecture，简单可扩展自治事务框架）是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。Seata 开源半年左右，目前已经有接近一万 star，社区非常活跃。我们热忱欢迎大家参与到 Seata 社区建设中，一同将 Seata 打造成开源分布式事务标杆产品。</p>
<p>Seata：<a href="https://github.com/seata/seata">https://</a><a href="https://github.com/seata/seata">github.com/seata/seata</a></p>
<p><img src="assets/pic/1/1561960344792-8810110b-1eda-4417-944e-7051ca52f90d.png" alt="Seata"></p>
<h3 id="3-1-1-Seata-产品模块"><a href="#3-1-1-Seata-产品模块" class="headerlink" title="3.1.1. Seata 产品模块"></a>3.1.1. Seata 产品模块</h3><p>如下图所示，Seata 中有三大模块，分别是 TM、RM 和 TC。 其中 TM 和 RM 是作为 Seata 的客户端与业务系统集成在一起，TC 作为 Seata 的服务端独立部署。</p>
<p><img src="assets/pic/1/image-20200305225811888.png"></p>
<h3 id="3-1-2-Seata支持的事务模型"><a href="#3-1-2-Seata支持的事务模型" class="headerlink" title="3.1.2.Seata支持的事务模型"></a>3.1.2.Seata支持的事务模型</h3><p>Seata 会有 4 种分布式事务解决方案，分别是 AT 模式、TCC 模式、Saga 模式和 XA 模式。<img src="assets/pic/1/image-20200305230513415.png"> </p>
<h2 id="3-2-AT模式实践"><a href="#3-2-AT模式实践" class="headerlink" title="3.2.AT模式实践"></a>3.2.AT模式实践</h2><p>Seata中比较常用的是AT模式，这里我们拿AT模式来做演示，看看如何在SpringCloud微服务中集成Seata.</p>
<p>我们假定一个用户购买商品的业务逻辑。整个业务逻辑由3个微服务提供支持：</p>
<ul>
<li>仓储服务：对给定的商品扣除仓储数量。</li>
<li>订单服务：根据采购需求创建订单。</li>
<li>帐户服务：从用户帐户中扣除余额。</li>
</ul>
<p>流程图：</p>
<p><img src="assets/pic/1/image-20200306164728739.png"></p>
<p>订单服务在下单时，同时调用库存服务和用户服务，此时就会发生跨服务和跨数据源的分布式事务问题。</p>
<h3 id="3-2-1-准备数据"><a href="#3-2-1-准备数据" class="headerlink" title="3.2.1.准备数据"></a>3.2.1.准备数据</h3><p>执行资料中提供的<code>seata_demo.sql</code>文件，导入数据。</p>
<p>其中包含4张表。</p>
<p>Order表：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;order_tbl&#96; (
  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,
  &#96;user_id&#96; varchar(255) DEFAULT NULL COMMENT &#39;用户id&#39;,
  &#96;commodity_code&#96; varchar(255) DEFAULT NULL COMMENT &#39;商品码&#39;,
  &#96;count&#96; int(11) unsigned DEFAULT &#39;0&#39; COMMENT &#39;购买数量&#39;,
  &#96;money&#96; int(11) unsigned DEFAULT &#39;0&#39; COMMENT &#39;总金额&#39;,
  PRIMARY KEY (&#96;id&#96;) USING BTREE
) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;COMPACT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>商品库存表：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;storage_tbl&#96; (
  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,
  &#96;commodity_code&#96; varchar(255) DEFAULT NULL COMMENT &#39;商品码&#39;,
  &#96;count&#96; int(11) unsigned DEFAULT &#39;0&#39; COMMENT &#39;商品库存&#39;,
  PRIMARY KEY (&#96;id&#96;) USING BTREE,
  UNIQUE KEY &#96;commodity_code&#96; (&#96;commodity_code&#96;) USING BTREE
) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;COMPACT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用户账户表：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;account_tbl&#96; (
  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,
  &#96;user_id&#96; varchar(255) DEFAULT NULL COMMENT &#39;用户id&#39;,
  &#96;money&#96; int(11) unsigned DEFAULT &#39;0&#39; COMMENT &#39;用户余额&#39;,
  PRIMARY KEY (&#96;id&#96;) USING BTREE
) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;COMPACT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还有用来记录Seata中的事务日志表undo_log，其中会包含<code>after_image</code>和<code>before_image</code>数据，用于数据回滚：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;undo_log&#96; (
  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,
  &#96;branch_id&#96; bigint(20) NOT NULL,
  &#96;xid&#96; varchar(100) NOT NULL,
  &#96;context&#96; varchar(128) NOT NULL,
  &#96;rollback_info&#96; longblob NOT NULL,
  &#96;log_status&#96; int(11) NOT NULL,
  &#96;log_created&#96; datetime NOT NULL,
  &#96;log_modified&#96; datetime NOT NULL,
  &#96;ext&#96; varchar(100) DEFAULT NULL,
  PRIMARY KEY (&#96;id&#96;) USING BTREE,
  UNIQUE KEY &#96;ux_undo_log&#96; (&#96;xid&#96;,&#96;branch_id&#96;) USING BTREE
) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;COMPACT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-2-2-引入Demo工程"><a href="#3-2-2-引入Demo工程" class="headerlink" title="3.2.2.引入Demo工程"></a>3.2.2.引入Demo工程</h3><p>我们先准备基本的项目环境，实现下单的业务代码</p>
<h4 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h4><p>项目结构如下：</p>
<p><img src="assets/pic/1/image-20200306171827203.png"> </p>
<p>结构说明：</p>
<ul>
<li>account-service：用户服务，提供操作用户账号余额的功能，端口8083</li>
<li>eureka-server：注册中心，端口8761</li>
<li>order-service：订单服务，提供根据数据创建订单的功能，端口8082</li>
<li>storage-service：仓储服务，提供扣减商品库存功能，端口8081</li>
</ul>
<h4 id="测试事务"><a href="#测试事务" class="headerlink" title="测试事务"></a>测试事务</h4><p>接下来，我们来测试下分布式事务的现象。</p>
<p>下单的接口是：</p>
<ul>
<li>请求方式：POST</li>
<li>请求路径：/order</li>
<li>请求参数：form表单，包括：<ul>
<li>userId：用户id</li>
<li>commodityCode：商品码</li>
<li>count：购买数量</li>
<li>money：话费金额</li>
</ul>
</li>
<li>返回值类型：long，订单的id</li>
</ul>
<p>原始数据库数据：</p>
<p>余额：</p>
<p><img src="assets/pic/1/image-20200306173439268.png"> </p>
<p>库存：</p>
<p><img src="assets/pic/1/image-20200306173511332.png"> </p>
<p>其它两张表为空。</p>
<blockquote>
<p>正常下单</p>
</blockquote>
<p>此时启动项目，尝试下单，目前商品库存为10，用户余额为1000，因此只要数据不超过这两个值应该能正常下单。</p>
<p><img src="assets/pic/1/image-20200306173343839.png"> </p>
<p>查看数据库数据：</p>
<p>余额：</p>
<p><img src="assets/pic/1/image-20200306173602942.png"> </p>
<p>库存：</p>
<p><img src="assets/pic/1/image-20200306173629491.png"> </p>
<p>订单：</p>
<p><img src="assets/pic/1/image-20200306173700813.png"> </p>
<blockquote>
<p>异常下单</p>
</blockquote>
<p>这次，我们把money参数设置为1200，这样就超过了余额最大值，理论上所有数据都应该回滚：</p>
<p><img src="assets/pic/1/image-20200306173916953.png"></p>
<p>看下用户余额：</p>
<p><img src="assets/pic/1/image-20200306224048175.png"> </p>
<p>因为扣款失败，因此这里没有扣减</p>
<p>来看下库存数据：</p>
<p><img src="assets/pic/1/image-20200306174001901.png"> </p>
<p>这说明扣减库存依然成功，并未回滚！</p>
<p>接下来，我们引入Seata，看看能不能解决这个问题。</p>
<h3 id="3-2-3-准备TC服务"><a href="#3-2-3-准备TC服务" class="headerlink" title="3.2.3.准备TC服务"></a>3.2.3.准备TC服务</h3><p>在之前讲解Seata原理的时候，我们就聊过，其中包含重要的3个角色：</p>
<ul>
<li>TC：事务协调器</li>
<li>TM：事务管理器</li>
<li>RM：资源管理器</li>
</ul>
<p>其中，TC是一个独立的服务，负责协调各个分支事务，而TM和RM通过jar包的方式，集成在各个事务参与者中。</p>
<p>因此，首先我们需要搭建一个独立的TC服务。</p>
<h4 id="1）安装"><a href="#1）安装" class="headerlink" title="1）安装"></a>1）安装</h4><p>首先去官网下载TC的服务端安装包，GitHub的地址：<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p>
<p>其目录结构如下：</p>
<p><img src="assets/pic/1/image-20200306174818712.png"> </p>
<p>包括：</p>
<ul>
<li>bin：启动脚本</li>
<li>conf：配置文件</li>
<li>lib：依赖项</li>
</ul>
<h4 id="2）配置"><a href="#2）配置" class="headerlink" title="2）配置"></a>2）配置</h4><p>Seata的核心配置主要是两部分：</p>
<ul>
<li>注册中心的配置：在<code>$&#123;seata_home&#125;/conf/</code>目录中，一般是<code>registry.conf</code>文件</li>
<li>当前服务的配置，两种配置方式：<ul>
<li>通过分布式服务的统一配置中心，例如Zookeeper</li>
<li>通过本地文件</li>
</ul>
</li>
</ul>
<p>我们先看registry.conf，内容是JSON风格</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">registry <span class="token punctuation">&#123;</span>
  # 指定注册中心类型，这里使用eureka类型
  type = <span class="token string">"eureka"</span>
  # 各种注册中心的配置。。这里省略，只保留了eureka和Zookeeper
  eureka <span class="token punctuation">&#123;</span>
    serviceUrl = <span class="token string">"http://localhost:8761/eureka"</span>
    application = <span class="token string">"seata_tc_server"</span>
    weight = <span class="token string">"1"</span>
  <span class="token punctuation">&#125;</span>
  zk <span class="token punctuation">&#123;</span>
    cluster = <span class="token string">"default"</span>
    serverAddr = <span class="token string">"127.0.0.1:2181"</span>
    session.timeout = <span class="token number">6000</span>
    connect.timeout = <span class="token number">2000</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

config <span class="token punctuation">&#123;</span>
  # 配置文件方式，可以支持 file、nacos 、apollo、zk、consul、etcd3
  type = <span class="token string">"file"</span>
  nacos <span class="token punctuation">&#123;</span>
    serverAddr = <span class="token string">"localhost"</span>
    namespace = <span class="token string">""</span>
    group = <span class="token string">"SEATA_GROUP"</span>
  <span class="token punctuation">&#125;</span>
  zk <span class="token punctuation">&#123;</span>
    serverAddr = <span class="token string">"127.0.0.1:2181"</span>
    session.timeout = <span class="token number">6000</span>
    connect.timeout = <span class="token number">2000</span>
  <span class="token punctuation">&#125;</span>
  file <span class="token punctuation">&#123;</span>
    name = <span class="token string">"file.conf"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个文件主要配置两个内容：</p>
<ul>
<li>注册中心的类型及地址，本例我们选择eureka做注册中心<ul>
<li>eureka.serviceUrl：是eureka的地址，例如<a href="http://localhost:8761/eureka">http://localhost:8761/eureka</a></li>
<li>application：是TC注册到eureka时的服务名称，例如<code>seata_tc_server</code></li>
</ul>
</li>
<li>配置中心的类型及地址，本例我们选择本地文件做配置，就是当前目录的<code>file.conf</code>文件</li>
</ul>
<p>再来看<code>file.conf</code>文件：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">
## transaction log store<span class="token punctuation">,</span> only used in seata-server
store <span class="token punctuation">&#123;</span>
  ## store mode<span class="token operator">:</span> file、db
  mode = <span class="token string">"file"</span>
  ## file store property
  file <span class="token punctuation">&#123;</span>
    ## store location dir
    dir = <span class="token string">"sessionStore"</span>
    # branch session size <span class="token punctuation">,</span> if exceeded first try compress lockkey<span class="token punctuation">,</span> still exceeded throws exceptions
    maxBranchSessionSize = <span class="token number">16384</span>
    # globe session size <span class="token punctuation">,</span> if exceeded throws exceptions
    maxGlobalSessionSize = <span class="token number">512</span>
    # file buffer size <span class="token punctuation">,</span> if exceeded allocate new buffer
    fileWriteBufferCacheSize = <span class="token number">16384</span>
    # when recover batch read size
    sessionReloadReadSize = <span class="token number">100</span>
    # async<span class="token punctuation">,</span> sync
    flushDiskMode = async
  <span class="token punctuation">&#125;</span>

  ## database store property
  db <span class="token punctuation">&#123;</span>
    ## the implement of javax.sql.DataSource<span class="token punctuation">,</span> such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.
    datasource = <span class="token string">"dbcp"</span>
    ## mysql/oracle/h2/oceanbase etc.
    dbType = <span class="token string">"mysql"</span>
    driverClassName = <span class="token string">"com.mysql.jdbc.Driver"</span>
    url = <span class="token string">"jdbc:mysql://127.0.0.1:3306/seata_demo"</span>
    user = <span class="token string">"root"</span>
    password = <span class="token string">"123"</span>
    minConn = <span class="token number">1</span>
    maxConn = <span class="token number">10</span>
    globalTable = <span class="token string">"global_table"</span>
    branchTable = <span class="token string">"branch_table"</span>
    lockTable = <span class="token string">"lock_table"</span>
    queryLimit = <span class="token number">100</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关键配置：</p>
<ul>
<li>store：TC的服务端数据存储配置<ul>
<li>mode：数据存储方式，支持两种：file和db<ul>
<li>file：将数据存储在本地文件中，性能比较好，但不支持水平扩展</li>
<li>db：将数据保存在指定的数据库中，需要指定数据库连接信息</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如果用文件作为存储介质，不需要其它配置了，直接运行即可。</p>
<p>但是如果使用db作为存储介质，还需要在数据库中创建3张表：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>global_table<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>                       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>            <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>                    <span class="token keyword">TINYINT</span>      <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>application_id<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>transaction_service_group<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>transaction_name<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>timeout<span class="token punctuation">`</span>                   <span class="token keyword">INT</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>begin_time<span class="token punctuation">`</span>                <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>                <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>              <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_gmt_modified_status<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_transaction_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>
  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span>

<span class="token comment">-- the table to store BranchSession data</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>branch_table<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>         <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>               <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span>    <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>resource_group_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>branch_type<span class="token punctuation">`</span>       <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>            <span class="token keyword">TINYINT</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>client_id<span class="token punctuation">`</span>         <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>application_data<span class="token punctuation">`</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>        <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>      <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_xid<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>xid<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>
  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span>

<span class="token comment">-- the table to store lock data</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>lock_table<span class="token punctuation">`</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">`</span>row_key<span class="token punctuation">`</span>        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>xid<span class="token punctuation">`</span>            <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>transaction_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span>      <span class="token keyword">BIGINT</span>       <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>resource_id<span class="token punctuation">`</span>    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>table_name<span class="token punctuation">`</span>     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>pk<span class="token punctuation">`</span>             <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span>     <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>
    <span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span>   <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>row_key<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_branch_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>branch_id<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>
  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3）启动"><a href="#3）启动" class="headerlink" title="3）启动"></a>3）启动</h4><p>进入<code>$&#123;seata_home&#125;/bin/</code>目录中:</p>
<p><img src="assets/pic/1/image-20200306201749660.png"> </p>
<p>如果是linux环境（要有JRE），执行<code>seata-server.sh</code></p>
<p>如果是windows环境，执行<code>seata-server.bat</code></p>
<h3 id="3-2-4-改造Order服务"><a href="#3-2-4-改造Order服务" class="headerlink" title="3.2.4.改造Order服务"></a>3.2.4.改造Order服务</h3><p>接下来是微服务的改造，不管是哪一个微服务，只要是事务的参与者，步骤基本一致。</p>
<h4 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><p>我们在父工程<code>seata-demo</code>中已经对依赖做了管理：</p>
 <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alibaba.seata.version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alibaba.seata.version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>seata.version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>seata.version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>因此，我们在项目<code>order-service</code>的pom文件中，引入依赖坐标即可：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;alibaba.seata.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;seata.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2）添加配置文件"><a href="#2）添加配置文件" class="headerlink" title="2）添加配置文件"></a>2）添加配置文件</h4><p>首先在application.yml中添加一行配置：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">alibaba</span><span class="token punctuation">:</span>
      <span class="token key atrule">seata</span><span class="token punctuation">:</span>
        <span class="token key atrule">tx-service-group</span><span class="token punctuation">:</span> test_tx_group <span class="token comment"># 定义事务组的名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里是定义事务组的名称，接下来会用到。</p>
<p>然后是在<code>resources</code>目录下放两个配置文件：<code>file.conf</code>和<code>registry.conf</code></p>
<p>其中，<code>registry.conf</code>与TC服务端的一样，此处不再讲解。</p>
<p>我们来看下<code>file.conf</code></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">transport <span class="token punctuation">&#123;</span>
  # tcp udt unix-domain-socket
  type = <span class="token string">"TCP"</span>
  #NIO NATIVE
  server = <span class="token string">"NIO"</span>
  #enable heartbeat
  heartbeat = <span class="token boolean">true</span>
  # the client batch send request enable
  enableClientBatchSendRequest = <span class="token boolean">true</span>
  #thread factory for netty
  threadFactory <span class="token punctuation">&#123;</span>
    bossThreadPrefix = <span class="token string">"NettyBoss"</span>
    workerThreadPrefix = <span class="token string">"NettyServerNIOWorker"</span>
    serverExecutorThread-prefix = <span class="token string">"NettyServerBizHandler"</span>
    shareBossWorker = <span class="token boolean">false</span>
    clientSelectorThreadPrefix = <span class="token string">"NettyClientSelector"</span>
    clientSelectorThreadSize = <span class="token number">1</span>
    clientWorkerThreadPrefix = <span class="token string">"NettyClientWorkerThread"</span>
    # netty boss thread size<span class="token punctuation">,</span>will not be used for UDT
    bossThreadSize = <span class="token number">1</span>
    #auto default pin or <span class="token number">8</span>
    workerThreadSize = <span class="token string">"default"</span>
  <span class="token punctuation">&#125;</span>
  shutdown <span class="token punctuation">&#123;</span>
    # when destroy server<span class="token punctuation">,</span> wait seconds
    wait = <span class="token number">3</span>
  <span class="token punctuation">&#125;</span>
  serialization = <span class="token string">"seata"</span>
  compressor = <span class="token string">"none"</span>
<span class="token punctuation">&#125;</span>
service <span class="token punctuation">&#123;</span>
  vgroup_mapping.test_tx_group = <span class="token string">"seata_tc_server"</span>
  #only support when registry.type=file<span class="token punctuation">,</span> please don't set multiple addresses
  seata_tc_server.grouplist = <span class="token string">"127.0.0.1:8091"</span>
  #degrade<span class="token punctuation">,</span> current not support
  enableDegrade = <span class="token boolean">false</span>
  #disable seata
  disableGlobalTransaction = <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span>

client <span class="token punctuation">&#123;</span>
  rm <span class="token punctuation">&#123;</span>
    asyncCommitBufferLimit = <span class="token number">10000</span>
    lock <span class="token punctuation">&#123;</span>
      retryInterval = <span class="token number">10</span>
      retryTimes = <span class="token number">30</span>
      retryPolicyBranchRollbackOnConflict = <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
    reportRetryCount = <span class="token number">5</span>
    tableMetaCheckEnable = <span class="token boolean">false</span>
    reportSuccessEnable = <span class="token boolean">false</span>
  <span class="token punctuation">&#125;</span>
  tm <span class="token punctuation">&#123;</span>
    commitRetryCount = <span class="token number">5</span>
    rollbackRetryCount = <span class="token number">5</span>
  <span class="token punctuation">&#125;</span>
  undo <span class="token punctuation">&#123;</span>
    dataValidation = <span class="token boolean">true</span>
    logSerialization = <span class="token string">"jackson"</span>
    logTable = <span class="token string">"undo_log"</span>
  <span class="token punctuation">&#125;</span>
  log <span class="token punctuation">&#123;</span>
    exceptionRate = <span class="token number">100</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置详情：</p>
<ul>
<li><code>transport</code>：与TC交互的一些配置<ul>
<li><code>heartbeat</code>：client和server通信心跳检测开关</li>
<li><code>enableClientBatchSendRequest</code>：客户端事务消息请求是否批量合并发送</li>
</ul>
</li>
<li><code>service</code>：TC的地址配置，用于获取TC的地址<ul>
<li><code>vgroup_mapping.test_tx_group = &quot;seata_tc_server&quot;</code>：<ul>
<li><code>test_tx_group</code>：是事务组名称，要与application.yml中配置一致，</li>
<li><code>seata_tc_server</code>：是TC服务端在注册中心的id，将来通过注册中心获取TC地址</li>
<li><code>enableDegrade</code>：服务降级开关，默认关闭。如果开启，当业务重试多次失败后会放弃全局事务</li>
<li><code>disableGlobalTransaction</code>：全局事务开关，默认false。false为开启，true为关闭</li>
</ul>
</li>
<li><code>default.grouplist</code>：这个当注册中心为file的时候，才用到</li>
</ul>
</li>
<li><code>client</code>：客户端配置<ul>
<li><code>rm</code>：资源管理器配<ul>
<li><code>asynCommitBufferLimit</code>：二阶段提交默认是异步执行，这里指定异步队列的大小</li>
<li><code>lock</code>：全局锁配置<ul>
<li><code>retryInterval</code>：校验或占用全局锁重试间隔，默认10，单位毫秒</li>
<li><code>retryTimes</code>：校验或占用全局锁重试次数，默认30次</li>
<li><code>retryPolicyBranchRollbackOnConflict</code>：分支事务与其它全局回滚事务冲突时锁策略，默认true，优先释放本地锁让回滚成功</li>
</ul>
</li>
<li><code>reportRetryCount</code>：一阶段结果上报TC失败后重试次数，默认5次</li>
</ul>
</li>
<li><code>tm</code>：事务管理器配置<ul>
<li><code>commitRetryCount</code>：一阶段全局提交结果上报TC重试次数，默认1</li>
<li><code>rollbackRetryCount</code>：一阶段全局回滚结果上报TC重试次数，默认1</li>
</ul>
</li>
<li><code>undo</code>：undo_log的配置<ul>
<li><code>dataValidation</code>：是否开启二阶段回滚镜像校验，默认true</li>
<li><code>logSerialization</code>：undo序列化方式，默认Jackson</li>
<li><code>logTable</code>：自定义undo表名，默认是<code>undo_log</code></li>
</ul>
</li>
<li><code>log</code>：日志配置<ul>
<li><code>exceptionRate</code>：出现回滚异常时的日志记录频率，默认100，百分之一概率。回滚失败基本是脏数据，无需输出堆栈占用硬盘空间</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="3）代理DataSource"><a href="#3）代理DataSource" class="headerlink" title="3）代理DataSource"></a>3）代理DataSource</h4><p>Seata的二阶段执行是通过拦截sql语句，分析语义来指定回滚策略，因此需要对DataSource做代理。我们在项目的<code>cn.itcast.order.config</code>包中，添加一个配置类：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceProxy</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 订单服务中引入了mybatis-plus，所以要使用特殊的SqlSessionFactoryBean</span>
        <span class="token class-name">MybatisSqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 代理数据源</span>
        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成SqlSessionFactory</span>
        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意，这里因为订单服务使用了mybatis-plus这个框架（这是一个mybatis集成框架，自动生成单表Sql），因此我们需要用mybatis-plus的<code>MybatisSqlSessionFactoryBean</code>代替<code>SqlSessionFactoryBean</code></p>
<p>如果用的是原生的mybatis，请使用<code>SqlSessionFactoryBean</code>。</p>
<h4 id="4）添加事务注解"><a href="#4）添加事务注解" class="headerlink" title="4）添加事务注解"></a>4）添加事务注解</h4><p>给事务发起者<code>order_service</code>的<code>OrderServiceImpl</code>中的<code>createOrder()</code>方法添加<code>@GlobalTransactional</code>注解，开启全局事务：</p>
<p><img src="assets/pic/1/image-20200306223043452.png"></p>
<p>重新启动即可。</p>
<h3 id="3-2-5-改造Storage、Account服务"><a href="#3-2-5-改造Storage、Account服务" class="headerlink" title="3.2.5.改造Storage、Account服务"></a>3.2.5.改造Storage、Account服务</h3><p>与OrderService类似，这里也要经过下面的步骤：</p>
<ul>
<li><p>引入依赖：与order-service一致，略</p>
</li>
<li><p>添加配置文件：与order-service一致，略</p>
</li>
<li><p>代理DataSource，我们的storage-service和account-service都没有用mybatis-plus，所以配置要使用SqlSessionFactory：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>order<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>seata<span class="token punctuation">.</span>rm<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceProxy</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 因为使用的是mybatis，这里定义SqlSessionFactoryBean</span>
        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 配置数据源代理</span>
        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>另外，事务注解可以使用<code>@Transactionnal</code>，而不是<code>@GlobalTransactional</code>，事务发起者才需要添加<code>@GlobalTransactional</code>。</p>
<h3 id="3-2-6-测试"><a href="#3-2-6-测试" class="headerlink" title="3.2.6.测试"></a>3.2.6.测试</h3><p>重启所有微服务后，我们再次测试。</p>
<p>目前数据情况：用户余额900，库存为6.</p>
<p>我们试试扣款1200元，那么扣款失败，理论上来说所有数据都会回滚.</p>
<p><img src="assets/pic/1/image-20200306173916953.png"></p>
<p>看下用户余额：</p>
<p><img src="assets/pic/1/image-20200306224048175.png"> </p>
<p>因为扣款失败，因此这里没有扣减</p>
<p>来看下库存数据：</p>
<p><img src="assets/pic/1/image-20200306174001901.png"> </p>
<p>减库存依然是6，成功回滚，说明分布式事务生效了！</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>事务</tag>
        <tag>Seata</tag>
      </tags>
  </entry>
</search>
