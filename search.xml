<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test encrytion</title>
    <url>/2021/06/08/encryption/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bed42fab750c19d7311e556f1e6de344b0fabe9e73af43aebfadc82bc294772a">10d79030e8222445804370796b90fca14b3382df4730eb0fe3a9f1aa6acbfdf977f308135c251cf4014cb9472e5eb4c7010efd08fb0e3bdf1ebef1844b47b7bbdce99f87d5af857ca0ff659bfd7ff84097f1b6e8aa477ad79382ada1687206cab3290f34ca09d1d3412d3ff5a793b9f0e189723464bc362a2b5bff0b6f1d16e0a02124ba91d7c7d3a13707fd7d7bae492b55454c50e43a772d85592b430a1d8bbde62d5590108e0d645fa110bd701c2c0c6000f7e4fb82b995337fc205a1b0cfab352a56b35e46624f6bca26b5446d21279b6e657bc49ae11d5e84653629e156bd9aa1ccd0f583c0a0f4d2d527485d4f9f74966f381bafe8eac142393d8ea6011a94a5b65bf574f0a354846692afd80bcbd188f8088b5d4ccf6ed6269cb2d5e3ab5f04f851c3269dafb4d48afd3ccf5003484b985dff1e9f52dd72875c60c1f482951709e95d8ea53e1745f87dcc34195446312333f07a511e78eca16ae3b3c20bae1303e01f925d65d012c220119be0fead7a2386234f9255e2bf8b9654c838285d7f63731fbefb6b9d8abc1959130f4a6ba7aa3a0ba625f74baab33127d280d1f53b8e1e3b33f214993a23666996b8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>逆向工程学习录——Detour / Hook Functions</title>
    <url>/2020/12/29/Detour%20%20Hook%20Functions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>在游戏逆向中我们需要在某个执行函数的地方添加自己的代码。<br>案例：HackMe.exe</p>
<p>每按一次空格扣两滴血<br>目标：hook扣血函数，改为double加血<br><img src="https://img-blog.csdnimg.cn/20201229150322967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>拉进Od后定位到扣血的函数如下图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs asm">00BB2740    55              push ebp<br>00BB2741    8BEC            mov ebp,esp<br>00BB2743    81EC CC000000   sub esp,0xCC<br>00BB2749    53              push ebx<br>00BB274A    56              push esi                                 ; HackMe.<br><br>00BB274B    57              push edi                                 ; HackMe.<br><br>00BB274C    51              push ecx                                 ; HackMe.<br><br>00BB274D    8DBD 34FFFFFF   lea edi,dword ptr ss:[ebp-0xCC]<br>00BB2753    B9 33000000     mov ecx,0x33<br>00BB2758    B8 CCCCCCCC     mov eax,0xCCCCCCCC<br>00BB275D    F3:AB           rep stos dword ptr es:[edi]<br>00BB275F    59              pop ecx                                  ; kernel32.771F6359<br>00BB2760    894D F8         mov dword ptr ss:[ebp-0x8],ecx           ; HackMe.<br><br>00BB2763    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]<br>00BB2766    8B08            mov ecx,dword ptr ds:[eax]<br>00BB2768    2B4D 08         sub ecx,dword ptr ss:[ebp+0x8]<br>00BB276B    8B55 F8         mov edx,dword ptr ss:[ebp-0x8]<br>00BB276E    890A            mov dword ptr ds:[edx],ecx               ; HackMe.<br><br>00BB2770    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]<br>00BB2773    8338 00         cmp dword ptr ds:[eax],0x0<br>00BB2776    7F 07           jg short HackMe.00BB277F<br>00BB2778    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]<br>00BB277B    C640 08 01      mov byte ptr ds:[eax+0x8],0x1<br>00BB277F    5F              pop edi                                  ; kernel32.771F6359<br>00BB2780    5E              pop esi                                  ; kernel32.771F6359<br>00BB2781    5B              pop ebx                                  ; kernel32.771F6359<br>00BB2782    8BE5            mov esp,ebp<br>00BB2784    5D              pop ebp                                  ; kernel32.771F6359<br>00BB2785    C2 0400         retn 0x4<br></code></pre></td></tr></table></figure>

<p>地址00BB2768 sub ecx,dword ptr ss:[ebp+0x8]<br>我们想要把该指令改为jmp [ourFunc]然后在ourFunc中在jmp回来。<br><img src="https://img-blog.csdnimg.cn/20201229150840103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Hook</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* toHook, <span class="hljs-keyword">void</span>* ourFunct, <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">5</span>) &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br><br>	DWORD curProtection;<br>	<span class="hljs-built_in">VirtualProtect</span>(toHook, len, PAGE_EXECUTE_READWRITE, &amp;curProtection);<br><br>	<span class="hljs-built_in">memset</span>(toHook, <span class="hljs-number">0x90</span>, len);<br><br>	DWORD relativeAddress = ((DWORD)ourFunct - (DWORD)toHook) - <span class="hljs-number">5</span>;<br><br>	*(BYTE*)toHook = <span class="hljs-number">0xE9</span>;<br>	*(DWORD*)((DWORD)toHook + <span class="hljs-number">1</span>) = relativeAddress;<br><br>	DWORD temp;<br>	<span class="hljs-built_in">VirtualProtect</span>(toHook, len, curProtection, &amp;temp);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>DWORD jmpBackAddy;<br><span class="hljs-keyword">void</span> __declspec(naked) <span class="hljs-built_in">ourFunct</span>() &#123;<br>	__asm &#123;<br>		add ecx, ecx<br>		mov edx, [ebp - <span class="hljs-number">8</span>]<br>		jmp[jmpBackAddy]<br>	&#125;<br>&#125;<br><br><span class="hljs-function">DWORD WINAPI <span class="hljs-title">MainThread</span><span class="hljs-params">(LPVOID param)</span> </span>&#123;<br>	<span class="hljs-keyword">int</span> hookLength = <span class="hljs-number">6</span>;<br>	DWORD hookAddress = <span class="hljs-number">0xBB2768</span>;<br>	jmpBackAddy = hookAddress + hookLength;<br><br>	<span class="hljs-built_in">Hook</span>((<span class="hljs-keyword">void</span>*)hookAddress, ourFunct, hookLength);<br><br>	<span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetAsyncKeyState</span>(VK_ESCAPE)) <span class="hljs-keyword">break</span>;<br>		<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">50</span>);<br>	&#125;<br><br>	<span class="hljs-built_in">FreeLibraryAndExitThread</span>((HMODULE)param, <span class="hljs-number">0</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">BOOL WINAPI <span class="hljs-title">DllMain</span><span class="hljs-params">(HINSTANCE hModule, DWORD dwReason, LPVOID lpReserved)</span> </span>&#123;<br>	<span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (dwReason) &#123;<br>	<span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>		<span class="hljs-built_in">CreateThread</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, MainThread, hModule, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>		<span class="hljs-keyword">break</span>;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>由于jmp指令最少占5字节，所以我们必须覆写连同目标指令下一条指令<br><img src="https://img-blog.csdnimg.cn/20201229151005170.png"><br>连起来为6字节</p>
<p>运行HackMe 并注入dll<br><img src="https://img-blog.csdnimg.cn/20201229151118863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>跳转成功<br><img src="https://img-blog.csdnimg.cn/20201229151151317.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20201229151226638.png"></p>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Detour Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次用python做的多元线性回归分析</title>
    <url>/2020/01/24/python%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p>调查分析某鱼主播收到付费礼物收入和免费礼物收入<br>模型如下：<br><img src="https://img-blog.csdnimg.cn/20200124123603196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="; 抓取数据"></a><a name="_4">;</a> 抓取数据</h3><p>主播相关信息</p>
<blockquote>
<p>主播名,主播编号,礼物总收入,付费礼物收入,免费礼物收入,礼物人数,弹幕人数,直播时长,人气峰值,订阅变化,活跃观众,订阅数,抓取时间,直播类型</p>
</blockquote>
<p>弹幕相关信息</p>
<blockquote>
<p>主播编号,用户名,用户id,用户全站等级,是否粉丝弹幕标记,徽章昵称,用户粉丝等级,弹幕内容,抓取时间,cid</p>
</blockquote>
<h3 id="清洗转换数据"><a href="#清洗转换数据" class="headerlink" title="清洗转换数据"></a>清洗转换数据</h3><p>根据模型要求，从弹幕数据中计算出所需自变量的值合并到主播相关信息中<br>并做简单清洗工作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><br>DataDF = pd.read_csv(<span class="hljs-string">&#x27;清洗数据.csv&#x27;</span>,encoding = <span class="hljs-string">&quot;utf-8&quot;</span>,dtype = <span class="hljs-built_in">str</span>)<br><br>streamerId=DataDF[<span class="hljs-string">&#x27;主播编号&#x27;</span>]<br>paidGiftIncome=np.log(DataDF[<span class="hljs-string">&#x27;付费礼物收入&#x27;</span>].astype(<span class="hljs-built_in">float</span>))<br>freeGifgIncome=np.log(DataDF[<span class="hljs-string">&#x27;免费礼物收入&#x27;</span>].astype(<span class="hljs-built_in">float</span>))<br><br>subscribeNum=np.log(DataDF[<span class="hljs-string">&#x27;订阅数&#x27;</span>].astype(<span class="hljs-built_in">int</span>))<br>fansNum=np.log(DataDF[<span class="hljs-string">&#x27;活跃观众&#x27;</span>].astype(<span class="hljs-built_in">int</span>))<br>streamType=DataDF[<span class="hljs-string">&#x27;直播类型&#x27;</span>].astype(<span class="hljs-built_in">int</span>)<br>topHot=np.log(DataDF[<span class="hljs-string">&#x27;人气峰值&#x27;</span>].astype(<span class="hljs-built_in">int</span>))<br><br>userLevelVariance=[]<br>fansLevelVariance=[]<br>fansBarrageNum=[]<br>nfansBarrageNum=[]<br><br>path = <span class="hljs-string">&#x27;danmu/&#x27;</span><br>files=[]<br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> DataDF[<span class="hljs-string">&#x27;主播编号&#x27;</span>]:<br>    file=f+<span class="hljs-string">&#x27;.csv&#x27;</span><br>    files.append(file)<br>    df=pd.read_csv(path+file,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,dtype=<span class="hljs-built_in">str</span>,keep_default_na=<span class="hljs-literal">False</span>)<br><br>    dupDf=df.drop_duplicates(<span class="hljs-string">&#x27;用户id&#x27;</span>,<span class="hljs-string">&#x27;last&#x27;</span>)<br><br>    userLevelVariance.append(np.var(dupDf[<span class="hljs-string">&#x27;用户全站等级&#x27;</span>].astype(<span class="hljs-built_in">int</span>)))<br><br>    fansLevelVariance.append(np.var(dupDf[<span class="hljs-string">&#x27;用户粉丝等级&#x27;</span>].astype(<span class="hljs-built_in">float</span>)))<br><br>    mid=np.median(dupDf[<span class="hljs-string">&#x27;用户全站等级&#x27;</span>].astype(<span class="hljs-built_in">int</span>))<br><br>    fansBarrageNum.append(np.log(df[(df[<span class="hljs-string">&#x27;用户全站等级&#x27;</span>].astype(<span class="hljs-built_in">int</span>)&gt;= mid )].size))<br><br>    nfansBarrageNum.append(np.log(df[(df[<span class="hljs-string">&#x27;用户全站等级&#x27;</span>].astype(<span class="hljs-built_in">int</span>)&lt; mid )].size))<br><br>dataframe = pd.DataFrame(&#123;<span class="hljs-string">&#x27;主播id&#x27;</span>:streamerId,<span class="hljs-string">&#x27;ln关注数&#x27;</span>:subscribeNum,<span class="hljs-string">&#x27;ln粉丝数&#x27;</span>:fansNum,<span class="hljs-string">&#x27;直播类型&#x27;</span>:streamType,<span class="hljs-string">&#x27;ln人气峰值&#x27;</span>:topHot,<span class="hljs-string">&#x27;用户等级方差&#x27;</span>:userLevelVariance,<span class="hljs-string">&#x27;粉丝等级方差&#x27;</span>:fansLevelVariance,<span class="hljs-string">&#x27;ln(粉丝弹幕数量)&#x27;</span>:fansBarrageNum,<span class="hljs-string">&#x27;ln(非粉丝弹幕数量)&#x27;</span>:nfansBarrageNum,<span class="hljs-string">&#x27;收费礼物收入&#x27;</span>:paidGiftIncome,<span class="hljs-string">&#x27;免费礼物收入&#x27;</span>:freeGifgIncome&#125;)<br><br>dataframe.to_csv(<span class="hljs-string">&quot;data.csv&quot;</span>,index=<span class="hljs-literal">False</span>,sep=<span class="hljs-string">&#x27;,&#x27;</span>)<br></code></pre></td></tr></table></figure>

<h3 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h3><p>讲导出的data文件作为数据全集，划分数据集后使用sklearn进行回归分析</p>
<p><img src="https://img-blog.csdnimg.cn/2020012412441252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200124124512583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200124124533494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>最佳拟合线:截距 [-4.6001933 -2.76872536] ,回归系数： [[-0.46457999 0.85992775 0.96507715 0.59494828 0.02850018 0.00734763<br>-0.10940398 0.17530741]<br>[-0.01520268 0.93765167 0.14050881 -0.02137043 0.00608183 -0.02255079<br>0.3406813 -0.27023856]]<br><img src="https://img-blog.csdnimg.cn/20200124124546857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200124124552684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> pandas <span class="hljs-keyword">import</span> DataFrame,Series<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br>df = pd.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)<br><br>newDf = df[[<span class="hljs-string">&#x27;ln关注数&#x27;</span>,<span class="hljs-string">&#x27;ln粉丝数&#x27;</span>,<span class="hljs-string">&#x27;直播类型&#x27;</span>,<span class="hljs-string">&#x27;ln人气峰值&#x27;</span>,<span class="hljs-string">&#x27;用户等级方差&#x27;</span>,<span class="hljs-string">&#x27;粉丝等级方差&#x27;</span>,<span class="hljs-string">&#x27;ln(粉丝弹幕数量)&#x27;</span>,<span class="hljs-string">&#x27;ln(非粉丝弹幕数量)&#x27;</span>,<span class="hljs-string">&#x27;收费礼物收入&#x27;</span>,<span class="hljs-string">&#x27;免费礼物收入&#x27;</span>]]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;head:&#x27;</span>,newDf.head(),<span class="hljs-string">&#x27;\nShape:&#x27;</span>,newDf.shape)<br><br>X= newDf[[<span class="hljs-string">&#x27;ln关注数&#x27;</span>,<span class="hljs-string">&#x27;ln粉丝数&#x27;</span>,<span class="hljs-string">&#x27;直播类型&#x27;</span>,<span class="hljs-string">&#x27;ln人气峰值&#x27;</span>,<span class="hljs-string">&#x27;用户等级方差&#x27;</span>,<span class="hljs-string">&#x27;粉丝等级方差&#x27;</span>,<span class="hljs-string">&#x27;ln(粉丝弹幕数量)&#x27;</span>,<span class="hljs-string">&#x27;ln(非粉丝弹幕数量)&#x27;</span>]]<br>Y= newDf[[<span class="hljs-string">&#x27;收费礼物收入&#x27;</span>,<span class="hljs-string">&#x27;免费礼物收入&#x27;</span>]]<br>x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=<span class="hljs-number">0.2</span>)<br><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>]=[<span class="hljs-string">&#x27;STSong&#x27;</span>]<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="hljs-literal">False</span><br><br>plt.scatter(df.ln人气峰值,df.收费礼物收入,color = <span class="hljs-string">&#x27;b&#x27;</span>,label = <span class="hljs-string">&quot;Exam Data&quot;</span>)<br><br>plt.xlabel(<span class="hljs-string">&quot;x&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;giftIncome&quot;</span>)<br><br>plt.show()<br><br><span class="hljs-built_in">print</span>(newDf.describe())<br><br><span class="hljs-built_in">print</span>(df[df.isnull()==<span class="hljs-literal">True</span>].count())<br><br>newDf.boxplot()<br>plt.show()<br><br><span class="hljs-built_in">print</span>(df.corr())<br><br>sns.pairplot(newDf, x_vars=[<span class="hljs-string">&#x27;ln关注数&#x27;</span>,<span class="hljs-string">&#x27;ln粉丝数&#x27;</span>,<span class="hljs-string">&#x27;直播类型&#x27;</span>,<span class="hljs-string">&#x27;ln人气峰值&#x27;</span>,<span class="hljs-string">&#x27;用户等级方差&#x27;</span>,<span class="hljs-string">&#x27;粉丝等级方差&#x27;</span>,<span class="hljs-string">&#x27;ln(粉丝弹幕数量)&#x27;</span>,<span class="hljs-string">&#x27;ln(非粉丝弹幕数量)&#x27;</span>], y_vars=[<span class="hljs-string">&#x27;收费礼物收入&#x27;</span>,<span class="hljs-string">&#x27;免费礼物收入&#x27;</span>],aspect=<span class="hljs-number">0.8</span>,kind = <span class="hljs-string">&#x27;reg&#x27;</span>)<br><br>plt.show()<br><br>model = LinearRegression()<br>model.fit(x_train,y_train)<br>a  = model.intercept_<br>b = model.coef_<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最佳拟合线:截距&quot;</span>,a,<span class="hljs-string">&quot;,回归系数：&quot;</span>,b)<br><br>score = model.score(x_test,y_test)<br><span class="hljs-built_in">print</span>(score)<br><br>Y_pred = model.predict(x_test)<br><span class="hljs-built_in">print</span>(Y_pred)<br><br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Y_pred)),Y_pred,<span class="hljs-string">&#x27;b&#x27;</span>,label=<span class="hljs-string">&quot;predict&quot;</span>)<br><br>plt.show()<br><br>plt.figure()<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Y_pred)),Y_pred,<span class="hljs-string">&#x27;b&#x27;</span>,label=<span class="hljs-string">&quot;predict&quot;</span>)<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Y_pred)),y_test,<span class="hljs-string">&#x27;r&#x27;</span>,label=<span class="hljs-string">&quot;test&quot;</span>)<br>plt.legend(loc=<span class="hljs-string">&quot;upper right&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;自变量&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;礼物收入&#x27;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title>火绒安全一面病毒样本分析</title>
    <url>/2021/03/15/%E7%81%AB%E7%BB%92%E5%AE%89%E5%85%A8%E4%B8%80%E9%9D%A2%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>Summary ：</p>
<p>病毒高危行为：</p>
<ol>
<li>请求一系列加密的未知IP的443端口，连接可能与其他恶意软件通讯;尝试HTTP但是全都失败了</li>
<li>使用了大量的微软提供的加密函数，已知是AES对称加密</li>
<li>过程中怀疑使用了代码混淆</li>
<li>存在多处绕检测，反调试行为：比如频繁分配内存调用native方法，存在用另一个用户开启线程；多处使用了RDTSC指令来比对执行时间检测虚拟化或反调试；存在大量延迟尝试绕检测；存在LdrLoadDll动态调用绕检测；可能读取PEB信息检测调试器；修改token权限</li>
</ol>
<p>MD5</p>
<p>974d669e861896a0ebd61c7f2d6e8729</p>
<p>SHA-1</p>
<p>3166a8b05fab2c455586e717210bdf1dad621fc1</p>
<p>SHA-256</p>
<p>b00e7f74539cf39940c9044b6ac1d131a23c896c7905d71a087a01245232ada3</p>
<p>Vhash</p>
<p>0150366d556”z</p>
<p>Authentihash</p>
<p>85badbaa56eef4169eb3c0127d9dace88a0b65b5965ad5a146a3477ab38914d4</p>
<p>SSDEEP</p>
<p>3072:9Wql7iWCRq3JV0npTvzY7hEsZNhh8J3Wn:9DNiWn52k7hEsBh</p>
<p>TLSH</p>
<p>T1B8D3490AE7D782B1FE9601B0167EB73F997152216B159EC3C7A01C20AD512E3A33E76D</p>
<p>File type</p>
<p>Win32 EXE</p>
<p>Magic</p>
<p>PE32 executable for MS Windows (GUI) Intel 80386 32-bit</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519513950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<h2 id="调试过程logs"><a href="#调试过程logs" class="headerlink" title="调试过程logs"></a>调试过程logs</h2><p>查完文件基本信息之后发现不是常见的vc/C++程序,直接拉到OD里面跑起来,试了一下平时用的一些脱壳方法完全不凑效,发现该程序的PE比较奇怪导入和导出表地址均为0,</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195223606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>于是开始单步调试大法</p>
<p>程序一定需要运行时动态加载未加载完的dll,所以我打开内存映射窗口,看着主窗口,一遍单步一遍观察内存情况同时适当的跳过一些未知的加密循环,光标所在行的上一个call eax为Sleep大约3秒然后光标处加载剩余dll(function0040C2F0),随后马上进入一个Function 00416870,</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519532954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195337838.png"></p>
<p>Function 00416870大概应该可以确定是程序的主体逻辑了.(本来尝试过dump 但是dump之后还是无法运行 大概是动态解密的关系吧)</p>
<p>进来16870之后是一个包含大量Sleep，获取CPU时钟相关API的函数，除此之外还有一个子调用，其中主要功能大概为遍历某个文件夹下的所有文件</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519535379.png"></p>
<p>随后经过一系列Sleephe GetTickCount，再后面看到几个消息处理的API一直到RtlAddVectoredExceptionHandler。然后出现一个子调用call Function 405B30</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195400583.png"></p>
<p>进入之后看到上面有几个子调用然后出现一个ConvertStringSecurityDescriptorToSecurityDescriptorW CreateMutexW</p>
<p>查阅MSDN之后，前者通常用于转换安全描述符，结合后面的CreateMutexW打开或者创建互斥量可以得出，这段代码大概率是在打开与当前病毒进程文件同名的信号互斥量，判断信号互斥量是否存在，防止病毒行为的二次执行。</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195420314.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195425502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>那么我大胆推测病毒的主要功能就在这个代码的上方，结合ida的F5 我认为Function0041C6E0（v3 = mainfunction((int)v17, 0);） 包含了大量逻辑</p>
<p>v3 = mainfunction((int)v17, 0);</p>
<p>v4 = 1;</p>
<p>if ( !v3 )</p>
<p>{</p>
<p>sub_4121B0(v16, 50);</p>
<p>if ( ConvertStringSecurityDescriptorToSecurityDescriptorW(v16, 1, &amp;v10, 0) )</p>
<p>{</p>
<p>v11 = v15;</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>v10 = 0;</p>
<p>v11 = 0;</p>
<p>}</p>
<p>v5 = sub_41A120();</p>
<p>v15[0] = 12;</p>
<p>v15[2] = 0;</p>
<p>LODWORD(v13) = -1640531527 * v5;</p>
<p>HIDWORD(v13) = -1640531527 * sub_41A120();</p>
<p>v15[1] = v10;</p>
<p>v14 = sub_403020(v17, 2 * v2, v13, HIDWORD(v13));</p>
<p>if ( dword_41F138(&amp;v13, &amp;v12) &lt; 0 )</p>
<p>{</p>
<p>sub_4121B0(v17, 119);</p>
<p>sub_401CB0(v17, 128, v17, v13, v14);</p>
<p>v12 = v17;</p>
<p>}</p>
<p>v6 = sub_4121B0(v16, 27);</p>
<p>sub_41DD90((char *)v16 + 2 * v6, v12, 100);</p>
<p>v7 = createMute(v11, 1, v16);</p>
<p>*this = v7;</p>
<p>if ( v10 )</p>
<p>{</p>
<p>localFree(v10);</p>
<p>v7 = *this;</p>
<p>}</p>
<p>if ( !v7 || (v8 = getLastError(), v4 = 1, v8 != 183) )</p>
<p>v4 = 0;</p>
<p>}</p>
<p>return v4;</p>
<p>进入这个函数 发现非常非常的长，再逐行分析的话非常不容易，于是我查找所有的模块间调用同时查找所有模块中的名称，查看一下是否有一些敏感的api调用。</p>
<p><strong>以下为我整理的可疑函数：</strong></p>
<p>加密：</p>
<p>00406D10 CryptAcquireContextW,CryptImportKey,CryptSetKeyParam,CryptSetKeyParam,CryptDecrypt,CryptReleaseContext,CryptDestroyKey</p>
<p>0040E760 CryptAcquireContextW,CryptCreateHash,CryptHashData,CryptGetHashParam,CryptGetHashParam,CryptDestroyHash,CryptReleaseContext</p>
<p>0041A890 CryptStringToBinaryW,CryptStringToBinaryW</p>
<p>0040E300 CryptBinaryToStringW,CryptBinaryToStringW</p>
<p>网络：（函数在OD 中并没有执行 可能是因为检测到调试器吧？unsure ）</p>
<p>00415C80 WSAStartup WSACleanup HeapCreate GetProcessHeap RtlAllocateHeap FreeAddrInfoW getaddrinfo FreeAddrInfoW RtlFreeHeap</p>
<p>004067A0 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,FindCloseChangeNotification</p>
<p>00407870 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,RevertToSelf,DuplicateTokenEx,CloseHandle,AdjustTokenPrivileges,CloseHandle</p>
<p>0040DB40 GetStartupInfoW,GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,OpenProcess,OpenProcessToken,GetTokenInformation,AllocateAndInitializeSid,EqualSid,OpenProcessToken,RevertToSelf,DuplicateTokenEx,GetTokenInformation,GetTokenInformation,LookupAccountSidW,CreateProcessAsUserW,GetLastError,CloseHandle,CloseHandle,CloseHandle,AdjustTokenPrivileges,CloseHandle</p>
<p>0040BFB0 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,CloseHandle,</p>
<p>可能的 <strong>反调试，绕检测</strong>：</p>
<p>004021A0 RtlReAllocateHeap,NtDelayExecution,NtDelayExecution,</p>
<p>0041C6E0 NtQuerySstemInformation,NtQueryObject,GetCurrentProcess,NtQuerySystemInformation,OpenProcess,DuplicateHandle,NtQueryObject,NtQueryObject,NtQueryObject,FindCloseChangeNotification,FindCloseChangeNotification（CheckRemoteDebuggerPresent中会调用NtQueryInformationProcess函数）</p>
<p>004116E0 GetProcAddress,NtQueryInformationProcess</p>
<p>00408810 rdtsc 通过统计时间，判断当前环境是否是虚拟</p>
<p>0041B7A0 GetAdaptersInfo,GetAdaptersInfo 获取网络适配器信息</p>
<p>0040B4D0 LdrLoadDll,未公开的内核调用加载dll</p>
<p>大量的延迟函数：</p>
<p>419FD0 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>403643 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>4021D6 NtDelayExecution</p>
<p>408416 Sleep</p>
<p>4171A8 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>可能用另一个用户启动线程：</p>
<p>0040DB40 GetStartupInfoW,GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,OpenProcess,OpenProcessToken,GetTokenInformation,AllocateAndInitializeSid,EqualSid,OpenProcessToken,RevertToSelf,DuplicateTokenEx,GetTokenInformation,GetTokenInformation,LookupAccountSidW,CreateProcessAsUserW,GetLastError,CloseHandle,CloseHandle,CloseHandle,AdjustTokenPrivileges,CloseHandle,</p>
<p>动态调用api ：</p>
<p>00405940 LoadLibraryW,GetProcAddress,</p>
<p>程序大致流程和逻辑</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195450215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>设置了一个计时器和消息处理，然后创建了heap，在最下面的if出call 405b30</p>
<p>来到405b30</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195459926.png"></p>
<p>遍历完目录之后进入41c6e0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195507771.png"></p>
<p><img src="https://img-blog.csdnimg.cn/2021031519551368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195518213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>综合上述信息可得v117的结果应该是通过rdtsc测量时间来检测虚拟化</p>
<p>那么从125行到172行一定是具体检测的逻辑，对于具体怎么测量我不是很清楚</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195528177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195556134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>变量v5处再次调用41a120应该是测量前后两次时间差作比较的</p>
<p>接下来又出现3个子调用</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195606502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第一个</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195618417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>4195a0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195625538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>408c30</p>
<p>存在循环和位运算，和上一个函数的入参密码相关</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195632473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第二个</p>
<p>打开句柄调整token权限</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195640745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第三个</p>
<p>408810是之前的rdtsc指令，getTickCount上下都存在多个rdtsc</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195648111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>执行完第三个函数之后的变量v106和v117存在大量相似的计算和比较</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195654271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>V106还额外执行了上图的3个函数，结合逻辑可以得出上述的推测应该是正确的，即通过106和117获取检测虚拟化，同时在第一个调用处尝试隐藏一些信息（4195a0每次进入循环虚拟机就卡死了，不知道具体是在做什么样的加密）</p>
<p>接下来到label58</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195701820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>4148c0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195707249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195713860.png"></p>
<p>执行到返回</p>
<p>中间又是包含一堆数学计算</p>
<p>然后出现一个入参包括v24，即上面计算结果的一个复制对象句柄函数</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195724185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>进入41a120之后发现又是一堆rdtsc和位运算</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195730252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>跟v69执行同样的操作在下面还有个v72=sub_41a120();</p>
<p>函数结尾处 停止监视通知更改句柄</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195736632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>该函数执行完后if判断通过</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195744915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195750986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>V7后面的操作应该就是判断是否重复执行了，所以该函数分析结束</p>
<p>返回到外层函数</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195758652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>40e940</p>
<p>生成sid 判断sid相等</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195804672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>40e5d0</p>
<p>StrStrlW GetSystemDirectoryW</p>
<p>大致逻辑下图</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195812311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>其中的41A840</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195817977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>返回a1不超过a2的第一个0地址</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195825768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>8460函数里面逻辑比价复杂</p>
<p>总体上应该就是一个获取目录比较确定目录同时包含加密解密的过程</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195832964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195838328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195843623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>在Function 00416870函数主体中一路分析</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195852806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195900682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195907423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>直到此处 <strong>发现第一个网络连接httpAPiCalled</strong>，具体调用时数据如下图</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195919279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/2021031519593035.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>跟进dword_41f044的函数看到出现了http相关的api</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195936813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>可以推测这个函数所在的循环 会循环请求ip地址列表中的ip，由于没有网络安全方面的工具，无法检测目标ip的安全性</p>
<p>继续调试</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195942671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>这个函数明显发送了请求 并 <strong>且返回了请求失败</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195951512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><strong>我在httpcall的地方留了断电 ，F9直接发现了第二个尝试请求的ip</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315200000492.png"></p>
<p><strong>继续F9</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315200005929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>我在realrequest的地方F9至少等待了5次以上，不清楚这个</p>
<p>于是我打开wireshark对目标ip进行监视</p>
<p><img src="https://img-blog.csdnimg.cn/20210315200016488.png"></p>
<p>192.168.88.135 51.77.112.255 TCP 66 49942 → 443 [SYN] Seq=0 Win=64240 Len=0 MSS=1460 WS=256 SACK_PERM=1</p>
<p>关于其连接知道的信息只有这么多了，未知的具体网络行为</p>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>病毒分析</tag>
      </tags>
  </entry>
</search>
