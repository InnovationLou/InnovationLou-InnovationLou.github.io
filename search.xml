<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记一次用python做的多元线性回归分析</title>
    <url>/2020/01/24/104080060/</url>
    <content><![CDATA[<h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p>调查分析某鱼主播收到付费礼物收入和免费礼物收入<br>模型如下：<br><img src="https://img-blog.csdnimg.cn/20200124123603196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="; 抓取数据"></a><a name="_4">;</a> 抓取数据</h3><p>主播相关信息</p>
<blockquote>
<p>主播名,主播编号,礼物总收入,付费礼物收入,免费礼物收入,礼物人数,弹幕人数,直播时长,人气峰值,订阅变化,活跃观众,订阅数,抓取时间,直播类型</p>
</blockquote>
<p>弹幕相关信息</p>
<blockquote>
<p>主播编号,用户名,用户id,用户全站等级,是否粉丝弹幕标记,徽章昵称,用户粉丝等级,弹幕内容,抓取时间,cid</p>
</blockquote>
<h3 id="清洗转换数据"><a href="#清洗转换数据" class="headerlink" title="清洗转换数据"></a>清洗转换数据</h3><p>根据模型要求，从弹幕数据中计算出所需自变量的值合并到主播相关信息中<br>并做简单清洗工作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DataDF = pd.read_csv(<span class="string">&#x27;清洗数据.csv&#x27;</span>,encoding = <span class="string">&quot;utf-8&quot;</span>,dtype = <span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">streamerId=DataDF[<span class="string">&#x27;主播编号&#x27;</span>]</span><br><span class="line">paidGiftIncome=np.log(DataDF[<span class="string">&#x27;付费礼物收入&#x27;</span>].astype(<span class="built_in">float</span>))</span><br><span class="line">freeGifgIncome=np.log(DataDF[<span class="string">&#x27;免费礼物收入&#x27;</span>].astype(<span class="built_in">float</span>))</span><br><span class="line"></span><br><span class="line">subscribeNum=np.log(DataDF[<span class="string">&#x27;订阅数&#x27;</span>].astype(<span class="built_in">int</span>))</span><br><span class="line">fansNum=np.log(DataDF[<span class="string">&#x27;活跃观众&#x27;</span>].astype(<span class="built_in">int</span>))</span><br><span class="line">streamType=DataDF[<span class="string">&#x27;直播类型&#x27;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line">topHot=np.log(DataDF[<span class="string">&#x27;人气峰值&#x27;</span>].astype(<span class="built_in">int</span>))</span><br><span class="line"></span><br><span class="line">userLevelVariance=[]</span><br><span class="line">fansLevelVariance=[]</span><br><span class="line">fansBarrageNum=[]</span><br><span class="line">nfansBarrageNum=[]</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;danmu/&#x27;</span></span><br><span class="line">files=[]</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> DataDF[<span class="string">&#x27;主播编号&#x27;</span>]:</span><br><span class="line">    file=f+<span class="string">&#x27;.csv&#x27;</span></span><br><span class="line">    files.append(file)</span><br><span class="line">    df=pd.read_csv(path+file,encoding=<span class="string">&#x27;utf-8&#x27;</span>,dtype=<span class="built_in">str</span>,keep_default_na=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    dupDf=df.drop_duplicates(<span class="string">&#x27;用户id&#x27;</span>,<span class="string">&#x27;last&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    userLevelVariance.append(np.var(dupDf[<span class="string">&#x27;用户全站等级&#x27;</span>].astype(<span class="built_in">int</span>)))</span><br><span class="line"></span><br><span class="line">    fansLevelVariance.append(np.var(dupDf[<span class="string">&#x27;用户粉丝等级&#x27;</span>].astype(<span class="built_in">float</span>)))</span><br><span class="line"></span><br><span class="line">    mid=np.median(dupDf[<span class="string">&#x27;用户全站等级&#x27;</span>].astype(<span class="built_in">int</span>))</span><br><span class="line"></span><br><span class="line">    fansBarrageNum.append(np.log(df[(df[<span class="string">&#x27;用户全站等级&#x27;</span>].astype(<span class="built_in">int</span>)&gt;= mid )].size))</span><br><span class="line"></span><br><span class="line">    nfansBarrageNum.append(np.log(df[(df[<span class="string">&#x27;用户全站等级&#x27;</span>].astype(<span class="built_in">int</span>)&lt; mid )].size))</span><br><span class="line"></span><br><span class="line">dataframe = pd.DataFrame(&#123;<span class="string">&#x27;主播id&#x27;</span>:streamerId,<span class="string">&#x27;ln关注数&#x27;</span>:subscribeNum,<span class="string">&#x27;ln粉丝数&#x27;</span>:fansNum,<span class="string">&#x27;直播类型&#x27;</span>:streamType,<span class="string">&#x27;ln人气峰值&#x27;</span>:topHot,<span class="string">&#x27;用户等级方差&#x27;</span>:userLevelVariance,<span class="string">&#x27;粉丝等级方差&#x27;</span>:fansLevelVariance,<span class="string">&#x27;ln(粉丝弹幕数量)&#x27;</span>:fansBarrageNum,<span class="string">&#x27;ln(非粉丝弹幕数量)&#x27;</span>:nfansBarrageNum,<span class="string">&#x27;收费礼物收入&#x27;</span>:paidGiftIncome,<span class="string">&#x27;免费礼物收入&#x27;</span>:freeGifgIncome&#125;)</span><br><span class="line"></span><br><span class="line">dataframe.to_csv(<span class="string">&quot;data.csv&quot;</span>,index=<span class="literal">False</span>,sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h3><p>讲导出的data文件作为数据全集，划分数据集后使用sklearn进行回归分析</p>
<p><img src="https://img-blog.csdnimg.cn/2020012412441252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200124124512583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200124124533494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>最佳拟合线:截距 [-4.6001933 -2.76872536] ,回归系数： [[-0.46457999 0.85992775 0.96507715 0.59494828 0.02850018 0.00734763<br>-0.10940398 0.17530741]<br>[-0.01520268 0.93765167 0.14050881 -0.02137043 0.00608183 -0.02255079<br>0.3406813 -0.27023856]]<br><img src="https://img-blog.csdnimg.cn/20200124124546857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200124124552684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame,Series</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">newDf = df[[<span class="string">&#x27;ln关注数&#x27;</span>,<span class="string">&#x27;ln粉丝数&#x27;</span>,<span class="string">&#x27;直播类型&#x27;</span>,<span class="string">&#x27;ln人气峰值&#x27;</span>,<span class="string">&#x27;用户等级方差&#x27;</span>,<span class="string">&#x27;粉丝等级方差&#x27;</span>,<span class="string">&#x27;ln(粉丝弹幕数量)&#x27;</span>,<span class="string">&#x27;ln(非粉丝弹幕数量)&#x27;</span>,<span class="string">&#x27;收费礼物收入&#x27;</span>,<span class="string">&#x27;免费礼物收入&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;head:&#x27;</span>,newDf.head(),<span class="string">&#x27;\nShape:&#x27;</span>,newDf.shape)</span><br><span class="line"></span><br><span class="line">X= newDf[[<span class="string">&#x27;ln关注数&#x27;</span>,<span class="string">&#x27;ln粉丝数&#x27;</span>,<span class="string">&#x27;直播类型&#x27;</span>,<span class="string">&#x27;ln人气峰值&#x27;</span>,<span class="string">&#x27;用户等级方差&#x27;</span>,<span class="string">&#x27;粉丝等级方差&#x27;</span>,<span class="string">&#x27;ln(粉丝弹幕数量)&#x27;</span>,<span class="string">&#x27;ln(非粉丝弹幕数量)&#x27;</span>]]</span><br><span class="line">Y= newDf[[<span class="string">&#x27;收费礼物收入&#x27;</span>,<span class="string">&#x27;免费礼物收入&#x27;</span>]]</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;STSong&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">plt.scatter(df.ln人气峰值,df.收费礼物收入,color = <span class="string">&#x27;b&#x27;</span>,label = <span class="string">&quot;Exam Data&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;giftIncome&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newDf.describe())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df.isnull()==<span class="literal">True</span>].count())</span><br><span class="line"></span><br><span class="line">newDf.boxplot()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.corr())</span><br><span class="line"></span><br><span class="line">sns.pairplot(newDf, x_vars=[<span class="string">&#x27;ln关注数&#x27;</span>,<span class="string">&#x27;ln粉丝数&#x27;</span>,<span class="string">&#x27;直播类型&#x27;</span>,<span class="string">&#x27;ln人气峰值&#x27;</span>,<span class="string">&#x27;用户等级方差&#x27;</span>,<span class="string">&#x27;粉丝等级方差&#x27;</span>,<span class="string">&#x27;ln(粉丝弹幕数量)&#x27;</span>,<span class="string">&#x27;ln(非粉丝弹幕数量)&#x27;</span>], y_vars=[<span class="string">&#x27;收费礼物收入&#x27;</span>,<span class="string">&#x27;免费礼物收入&#x27;</span>],aspect=<span class="number">0.8</span>,kind = <span class="string">&#x27;reg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line">a  = model.intercept_</span><br><span class="line">b = model.coef_</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最佳拟合线:截距&quot;</span>,a,<span class="string">&quot;,回归系数：&quot;</span>,b)</span><br><span class="line"></span><br><span class="line">score = model.score(x_test,y_test)</span><br><span class="line"><span class="built_in">print</span>(score)</span><br><span class="line"></span><br><span class="line">Y_pred = model.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(Y_pred)</span><br><span class="line"></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(Y_pred)),Y_pred,<span class="string">&#x27;b&#x27;</span>,label=<span class="string">&quot;predict&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(Y_pred)),Y_pred,<span class="string">&#x27;b&#x27;</span>,label=<span class="string">&quot;predict&quot;</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(Y_pred)),y_test,<span class="string">&#x27;r&#x27;</span>,label=<span class="string">&quot;test&quot;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper right&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;自变量&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;礼物收入&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
</search>
