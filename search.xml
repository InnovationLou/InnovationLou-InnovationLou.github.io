<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>逆向工程学习录——Detour / Hook Functions</title>
    <url>/2020/12/29/detour-hook-functions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在游戏逆向中我们需要在某个执行函数的地方添加自己的代码。<br>案例：HackMe.exe</p>
<p>每按一次空格扣两滴血<br>目标：hook扣血函数，改为double加血<br><img src="https://img-blog.csdnimg.cn/20201229150322967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>拉进Od后定位到扣血的函数如下图</p>
<pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">00BB2740    55              push ebp
00BB2741    8BEC            mov ebp,esp
00BB2743    81EC CC000000   sub esp,0xCC
00BB2749    53              push ebx
00BB274A    56              push esi                                 ; HackMe.

00BB274B    57              push edi                                 ; HackMe.

00BB274C    51              push ecx                                 ; HackMe.

00BB274D    8DBD 34FFFFFF   lea edi,dword ptr ss:[ebp-0xCC]
00BB2753    B9 33000000     mov ecx,0x33
00BB2758    B8 CCCCCCCC     mov eax,0xCCCCCCCC
00BB275D    F3:AB           rep stos dword ptr es:[edi]
00BB275F    59              pop ecx                                  ; kernel32.771F6359
00BB2760    894D F8         mov dword ptr ss:[ebp-0x8],ecx           ; HackMe.

00BB2763    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]
00BB2766    8B08            mov ecx,dword ptr ds:[eax]
00BB2768    2B4D 08         sub ecx,dword ptr ss:[ebp+0x8]
00BB276B    8B55 F8         mov edx,dword ptr ss:[ebp-0x8]
00BB276E    890A            mov dword ptr ds:[edx],ecx               ; HackMe.

00BB2770    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]
00BB2773    8338 00         cmp dword ptr ds:[eax],0x0
00BB2776    7F 07           jg short HackMe.00BB277F
00BB2778    8B45 F8         mov eax,dword ptr ss:[ebp-0x8]
00BB277B    C640 08 01      mov byte ptr ds:[eax+0x8],0x1
00BB277F    5F              pop edi                                  ; kernel32.771F6359
00BB2780    5E              pop esi                                  ; kernel32.771F6359
00BB2781    5B              pop ebx                                  ; kernel32.771F6359
00BB2782    8BE5            mov esp,ebp
00BB2784    5D              pop ebp                                  ; kernel32.771F6359
00BB2785    C2 0400         retn 0x4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>地址00BB2768 sub ecx,dword ptr ss:[ebp+0x8]<br>我们想要把该指令改为jmp [ourFunc]然后在ourFunc中在jmp回来。<br><img src="https://img-blog.csdnimg.cn/20201229150840103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>代码实现</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span></span>

<span class="token keyword">bool</span> <span class="token function">Hook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> toHook<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> ourFunct<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	DWORD curProtection<span class="token punctuation">;</span>
	<span class="token function">VirtualProtect</span><span class="token punctuation">(</span>toHook<span class="token punctuation">,</span> len<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>curProtection<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">memset</span><span class="token punctuation">(</span>toHook<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

	DWORD relativeAddress <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>ourFunct <span class="token operator">-</span> <span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>toHook<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>

	<span class="token operator">*</span><span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span>toHook <span class="token operator">=</span> <span class="token number">0xE9</span><span class="token punctuation">;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD<span class="token punctuation">)</span>toHook <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> relativeAddress<span class="token punctuation">;</span>

	DWORD temp<span class="token punctuation">;</span>
	<span class="token function">VirtualProtect</span><span class="token punctuation">(</span>toHook<span class="token punctuation">,</span> len<span class="token punctuation">,</span> curProtection<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

DWORD jmpBackAddy<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>naked<span class="token punctuation">)</span> <span class="token function">ourFunct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	__asm <span class="token punctuation">&#123;</span>
		add ecx<span class="token punctuation">,</span> ecx
		mov edx<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebp <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">]</span>
		jmp<span class="token punctuation">[</span>jmpBackAddy<span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

DWORD WINAPI <span class="token function">MainThread</span><span class="token punctuation">(</span>LPVOID param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> hookLength <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
	DWORD hookAddress <span class="token operator">=</span> <span class="token number">0xBB2768</span><span class="token punctuation">;</span>
	jmpBackAddy <span class="token operator">=</span> hookAddress <span class="token operator">+</span> hookLength<span class="token punctuation">;</span>

	<span class="token function">Hook</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>hookAddress<span class="token punctuation">,</span> ourFunct<span class="token punctuation">,</span> hookLength<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetAsyncKeyState</span><span class="token punctuation">(</span>VK_ESCAPE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">FreeLibraryAndExitThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HMODULE<span class="token punctuation">)</span>param<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

BOOL WINAPI <span class="token function">DllMain</span><span class="token punctuation">(</span>HINSTANCE hModule<span class="token punctuation">,</span> DWORD dwReason<span class="token punctuation">,</span> LPVOID lpReserved<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> <span class="token punctuation">(</span>dwReason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>
		<span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MainThread<span class="token punctuation">,</span> hModule<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于jmp指令最少占5字节，所以我们必须覆写连同目标指令下一条指令<br><img src="https://img-blog.csdnimg.cn/20201229151005170.png"><br>连起来为6字节</p>
<p>运行HackMe 并注入dll<br><img src="https://img-blog.csdnimg.cn/20201229151118863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>跳转成功<br><img src="https://img-blog.csdnimg.cn/20201229151151317.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20201229151226638.png"></p>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Detour Hook</tag>
      </tags>
  </entry>
  <entry>
    <title>test encrytion</title>
    <url>/2020/05/01/encryption/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b7a9444bdf9ec67159fa957423d5943978cc67273067e801e38bb4ad457a9203">10d79030e8222445804370796b90fca14b3382df4730eb0fe3a9f1aa6acbfdf977f308135c251cf4014cb9472e5eb4c7010efd08fb0e3bdf1ebef1844b47b7bbdce99f87d5af857ca0ff659bfd7ff8403889b6c438821c099230c528e1e072086db67c3268f0c3fbef4285ecdfb74d10c44a10a54b42bc087ce2562c8b1b0d82c747e40ef6687175228e1aa7de665ca0630685dfdfd49a11eb58a99d311c252752a333719030d038bb8d865dd3e440bff3cd209fe3ca3a26fb5772705760421ee28b997bb286ef46d1032c18074a8e246f2b089c181f769c3ff273587971e21fb48c46d1068c2933cce24d3f3220cc3682f130f26d5e47aa28d728332b46e808627eb02d3a45d7ff8ef7c9018b3a38bb9265de9715d4138919ea7edf15d7fcf47bbec73ee7481809cf81c7654c32120f9fca71f797eb839cfca7da823d550b0bacafeee1b0dea1a24995a46123071540f9c9eca491e67036879d66d85c84f9a9b8de1dec8aeed33c0ef421b74b4979ab97190a33c6c656a230454cb50285c0aad476b4725f22580b4bfb76c67f32bbdaf1edb8455d722e16d974910ba31ca7f608d3f318c26f6f6d0711e2041913c7ec3a9f829cb2339ef122b6ebed31d6159befc28c5b18f5933e02d369566cec07b9a4810d820e1a15eba658e8a05d41b8b2857500dacad8a4dcf76efdbf95ec53f59b0e8f0e9e7ec7a8c64c6530aa365a10c294d8413e278a7cfdbbd6fe82f5e50bc5b6acfe5de3e3d9c10533ad8a9a28defea732d1d23cf43f20710848399b586e88117428d9b344114e232ba0143e66172cdf59f66556b35dd73b016955f88673cb452d984b6b3c28999e800b7c911a4135fedd22d3a1d49db0d2746d278c81f31427a6aea1f0ec54ac89afa215eeafb509750990d19a04bbbb2ad140d96355a9646bd9c19193d5487cb492f071f53399ecd8fd61a50e6a0907093122b6598d53e803b903b852c719e898c11dbb6aa0c129a2ed853970296fd7087458786294a27cc2746b96d6f0e1f200babe1d513ffb957fb1095cc96ce9223b15e56f9eb627982b93885870b09ae36b00b882410744</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>记一次用python做的多元线性回归分析</title>
    <url>/2020/01/24/python-duo-yuan-xian-xing-hui-gui-fen-xi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p>调查分析某鱼主播收到付费礼物收入和免费礼物收入<br>模型如下：<br><img src="https://img-blog.csdnimg.cn/20200124123603196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<h3 id="抓取数据"><a href="#抓取数据" class="headerlink" title="; 抓取数据"></a><a name="_4">;</a> 抓取数据</h3><p>主播相关信息</p>
<blockquote>
<p>主播名,主播编号,礼物总收入,付费礼物收入,免费礼物收入,礼物人数,弹幕人数,直播时长,人气峰值,订阅变化,活跃观众,订阅数,抓取时间,直播类型</p>
</blockquote>
<p>弹幕相关信息</p>
<blockquote>
<p>主播编号,用户名,用户id,用户全站等级,是否粉丝弹幕标记,徽章昵称,用户粉丝等级,弹幕内容,抓取时间,cid</p>
</blockquote>
<h3 id="清洗转换数据"><a href="#清洗转换数据" class="headerlink" title="清洗转换数据"></a>清洗转换数据</h3><p>根据模型要求，从弹幕数据中计算出所需自变量的值合并到主播相关信息中<br>并做简单清洗工作</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> re
<span class="token keyword">import</span> os

DataDF <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'清洗数据.csv'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">)</span>

streamerId<span class="token operator">=</span>DataDF<span class="token punctuation">[</span><span class="token string">'主播编号'</span><span class="token punctuation">]</span>
paidGiftIncome<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'付费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
freeGifgIncome<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

subscribeNum<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'订阅数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fansNum<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'活跃观众'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
streamType<span class="token operator">=</span>DataDF<span class="token punctuation">[</span><span class="token string">'直播类型'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
topHot<span class="token operator">=</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>DataDF<span class="token punctuation">[</span><span class="token string">'人气峰值'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

userLevelVariance<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
fansLevelVariance<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
fansBarrageNum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
nfansBarrageNum<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

path <span class="token operator">=</span> <span class="token string">'danmu/'</span>
files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> f <span class="token keyword">in</span> DataDF<span class="token punctuation">[</span><span class="token string">'主播编号'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token operator">+</span><span class="token string">'.csv'</span>
    files<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
    df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token builtin">file</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>keep_default_na<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    dupDf<span class="token operator">=</span>df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token string">'用户id'</span><span class="token punctuation">,</span><span class="token string">'last'</span><span class="token punctuation">)</span>

    userLevelVariance<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>dupDf<span class="token punctuation">[</span><span class="token string">'用户全站等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    fansLevelVariance<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>dupDf<span class="token punctuation">[</span><span class="token string">'用户粉丝等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    mid<span class="token operator">=</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>dupDf<span class="token punctuation">[</span><span class="token string">'用户全站等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    fansBarrageNum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'用户全站等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">>=</span> mid <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

    nfansBarrageNum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'用户全站等级'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token operator">&lt;</span> mid <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

dataframe <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'主播id'</span><span class="token punctuation">:</span>streamerId<span class="token punctuation">,</span><span class="token string">'ln关注数'</span><span class="token punctuation">:</span>subscribeNum<span class="token punctuation">,</span><span class="token string">'ln粉丝数'</span><span class="token punctuation">:</span>fansNum<span class="token punctuation">,</span><span class="token string">'直播类型'</span><span class="token punctuation">:</span>streamType<span class="token punctuation">,</span><span class="token string">'ln人气峰值'</span><span class="token punctuation">:</span>topHot<span class="token punctuation">,</span><span class="token string">'用户等级方差'</span><span class="token punctuation">:</span>userLevelVariance<span class="token punctuation">,</span><span class="token string">'粉丝等级方差'</span><span class="token punctuation">:</span>fansLevelVariance<span class="token punctuation">,</span><span class="token string">'ln(粉丝弹幕数量)'</span><span class="token punctuation">:</span>fansBarrageNum<span class="token punctuation">,</span><span class="token string">'ln(非粉丝弹幕数量)'</span><span class="token punctuation">:</span>nfansBarrageNum<span class="token punctuation">,</span><span class="token string">'收费礼物收入'</span><span class="token punctuation">:</span>paidGiftIncome<span class="token punctuation">,</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">:</span>freeGifgIncome<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

dataframe<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"data.csv"</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h3><p>讲导出的data文件作为数据全集，划分数据集后使用sklearn进行回归分析</p>
<p><img src="https://img-blog.csdnimg.cn/2020012412441252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200124124512583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20200124124533494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br>最佳拟合线:截距 [-4.6001933 -2.76872536] ,回归系数： [[-0.46457999 0.85992775 0.96507715 0.59494828 0.02850018 0.00734763<br>-0.10940398 0.17530741]<br>[-0.01520268 0.93765167 0.14050881 -0.02137043 0.00608183 -0.02255079<br>0.3406813 -0.27023856]]<br><img src="https://img-blog.csdnimg.cn/20200124124546857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200124124552684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token punctuation">,</span>Series
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">)</span>

newDf <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'ln关注数'</span><span class="token punctuation">,</span><span class="token string">'ln粉丝数'</span><span class="token punctuation">,</span><span class="token string">'直播类型'</span><span class="token punctuation">,</span><span class="token string">'ln人气峰值'</span><span class="token punctuation">,</span><span class="token string">'用户等级方差'</span><span class="token punctuation">,</span><span class="token string">'粉丝等级方差'</span><span class="token punctuation">,</span><span class="token string">'ln(粉丝弹幕数量)'</span><span class="token punctuation">,</span><span class="token string">'ln(非粉丝弹幕数量)'</span><span class="token punctuation">,</span><span class="token string">'收费礼物收入'</span><span class="token punctuation">,</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head:'</span><span class="token punctuation">,</span>newDf<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\nShape:'</span><span class="token punctuation">,</span>newDf<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

X<span class="token operator">=</span> newDf<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'ln关注数'</span><span class="token punctuation">,</span><span class="token string">'ln粉丝数'</span><span class="token punctuation">,</span><span class="token string">'直播类型'</span><span class="token punctuation">,</span><span class="token string">'ln人气峰值'</span><span class="token punctuation">,</span><span class="token string">'用户等级方差'</span><span class="token punctuation">,</span><span class="token string">'粉丝等级方差'</span><span class="token punctuation">,</span><span class="token string">'ln(粉丝弹幕数量)'</span><span class="token punctuation">,</span><span class="token string">'ln(非粉丝弹幕数量)'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
Y<span class="token operator">=</span> newDf<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'收费礼物收入'</span><span class="token punctuation">,</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
x_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'STSong'</span><span class="token punctuation">]</span>
plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>

plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>df<span class="token punctuation">.</span>ln人气峰值<span class="token punctuation">,</span>df<span class="token punctuation">.</span>收费礼物收入<span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">,</span>label <span class="token operator">=</span> <span class="token string">"Exam Data"</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"giftIncome"</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>newDf<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

newDf<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

sns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>newDf<span class="token punctuation">,</span> x_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ln关注数'</span><span class="token punctuation">,</span><span class="token string">'ln粉丝数'</span><span class="token punctuation">,</span><span class="token string">'直播类型'</span><span class="token punctuation">,</span><span class="token string">'ln人气峰值'</span><span class="token punctuation">,</span><span class="token string">'用户等级方差'</span><span class="token punctuation">,</span><span class="token string">'粉丝等级方差'</span><span class="token punctuation">,</span><span class="token string">'ln(粉丝弹幕数量)'</span><span class="token punctuation">,</span><span class="token string">'ln(非粉丝弹幕数量)'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y_vars<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'收费礼物收入'</span><span class="token punctuation">,</span><span class="token string">'免费礼物收入'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aspect<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>kind <span class="token operator">=</span> <span class="token string">'reg'</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>
a  <span class="token operator">=</span> model<span class="token punctuation">.</span>intercept_
b <span class="token operator">=</span> model<span class="token punctuation">.</span>coef_
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最佳拟合线:截距"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token string">",回归系数："</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>

score <span class="token operator">=</span> model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>

Y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Y_pred<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"predict"</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Y_pred<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"predict"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y_test<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"upper right"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"自变量"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'礼物收入'</span><span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title>火绒安全一面病毒样本分析</title>
    <url>/2021/03/15/huo-rong-an-quan-yi-mian-bing-du-yang-ben-fen-xi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Summary ：</p>
<p>病毒高危行为：</p>
<ol>
<li>请求一系列加密的未知IP的443端口，连接可能与其他恶意软件通讯;尝试HTTP但是全都失败了</li>
<li>使用了大量的微软提供的加密函数，已知是AES对称加密</li>
<li>过程中怀疑使用了代码混淆</li>
<li>存在多处绕检测，反调试行为：比如频繁分配内存调用native方法，存在用另一个用户开启线程；多处使用了RDTSC指令来比对执行时间检测虚拟化或反调试；存在大量延迟尝试绕检测；存在LdrLoadDll动态调用绕检测；可能读取PEB信息检测调试器；修改token权限</li>
</ol>
<p>MD5</p>
<p>974d669e861896a0ebd61c7f2d6e8729</p>
<p>SHA-1</p>
<p>3166a8b05fab2c455586e717210bdf1dad621fc1</p>
<p>SHA-256</p>
<p>b00e7f74539cf39940c9044b6ac1d131a23c896c7905d71a087a01245232ada3</p>
<p>Vhash</p>
<p>0150366d556”z</p>
<p>Authentihash</p>
<p>85badbaa56eef4169eb3c0127d9dace88a0b65b5965ad5a146a3477ab38914d4</p>
<p>SSDEEP</p>
<p>3072:9Wql7iWCRq3JV0npTvzY7hEsZNhh8J3Wn:9DNiWn52k7hEsBh</p>
<p>TLSH</p>
<p>T1B8D3490AE7D782B1FE9601B0167EB73F997152216B159EC3C7A01C20AD512E3A33E76D</p>
<p>File type</p>
<p>Win32 EXE</p>
<p>Magic</p>
<p>PE32 executable for MS Windows (GUI) Intel 80386 32-bit</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519513950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<h2 id="调试过程logs"><a href="#调试过程logs" class="headerlink" title="调试过程logs"></a>调试过程logs</h2><p>查完文件基本信息之后发现不是常见的vc/C++程序,直接拉到OD里面跑起来,试了一下平时用的一些脱壳方法完全不凑效,发现该程序的PE比较奇怪导入和导出表地址均为0,</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195223606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>于是开始单步调试大法</p>
<p>程序一定需要运行时动态加载未加载完的dll,所以我打开内存映射窗口,看着主窗口,一遍单步一遍观察内存情况同时适当的跳过一些未知的加密循环,光标所在行的上一个call eax为Sleep大约3秒然后光标处加载剩余dll(function0040C2F0),随后马上进入一个Function 00416870,</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519532954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195337838.png"></p>
<p>Function 00416870大概应该可以确定是程序的主体逻辑了.(本来尝试过dump 但是dump之后还是无法运行 大概是动态解密的关系吧)</p>
<p>进来16870之后是一个包含大量Sleep，获取CPU时钟相关API的函数，除此之外还有一个子调用，其中主要功能大概为遍历某个文件夹下的所有文件</p>
<p><img src="https://img-blog.csdnimg.cn/2021031519535379.png"></p>
<p>随后经过一系列Sleephe GetTickCount，再后面看到几个消息处理的API一直到RtlAddVectoredExceptionHandler。然后出现一个子调用call Function 405B30</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195400583.png"></p>
<p>进入之后看到上面有几个子调用然后出现一个ConvertStringSecurityDescriptorToSecurityDescriptorW CreateMutexW</p>
<p>查阅MSDN之后，前者通常用于转换安全描述符，结合后面的CreateMutexW打开或者创建互斥量可以得出，这段代码大概率是在打开与当前病毒进程文件同名的信号互斥量，判断信号互斥量是否存在，防止病毒行为的二次执行。</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195420314.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195425502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>那么我大胆推测病毒的主要功能就在这个代码的上方，结合ida的F5 我认为Function0041C6E0（v3 = mainfunction((int)v17, 0);） 包含了大量逻辑</p>
<p>v3 = mainfunction((int)v17, 0);</p>
<p>v4 = 1;</p>
<p>if ( !v3 )</p>
<p>{</p>
<p>sub_4121B0(v16, 50);</p>
<p>if ( ConvertStringSecurityDescriptorToSecurityDescriptorW(v16, 1, &amp;v10, 0) )</p>
<p>{</p>
<p>v11 = v15;</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>v10 = 0;</p>
<p>v11 = 0;</p>
<p>}</p>
<p>v5 = sub_41A120();</p>
<p>v15[0] = 12;</p>
<p>v15[2] = 0;</p>
<p>LODWORD(v13) = -1640531527 * v5;</p>
<p>HIDWORD(v13) = -1640531527 * sub_41A120();</p>
<p>v15[1] = v10;</p>
<p>v14 = sub_403020(v17, 2 * v2, v13, HIDWORD(v13));</p>
<p>if ( dword_41F138(&amp;v13, &amp;v12) &lt; 0 )</p>
<p>{</p>
<p>sub_4121B0(v17, 119);</p>
<p>sub_401CB0(v17, 128, v17, v13, v14);</p>
<p>v12 = v17;</p>
<p>}</p>
<p>v6 = sub_4121B0(v16, 27);</p>
<p>sub_41DD90((char *)v16 + 2 * v6, v12, 100);</p>
<p>v7 = createMute(v11, 1, v16);</p>
<p>*this = v7;</p>
<p>if ( v10 )</p>
<p>{</p>
<p>localFree(v10);</p>
<p>v7 = *this;</p>
<p>}</p>
<p>if ( !v7 || (v8 = getLastError(), v4 = 1, v8 != 183) )</p>
<p>v4 = 0;</p>
<p>}</p>
<p>return v4;</p>
<p>进入这个函数 发现非常非常的长，再逐行分析的话非常不容易，于是我查找所有的模块间调用同时查找所有模块中的名称，查看一下是否有一些敏感的api调用。</p>
<p><strong>以下为我整理的可疑函数：</strong></p>
<p>加密：</p>
<p>00406D10 CryptAcquireContextW,CryptImportKey,CryptSetKeyParam,CryptSetKeyParam,CryptDecrypt,CryptReleaseContext,CryptDestroyKey</p>
<p>0040E760 CryptAcquireContextW,CryptCreateHash,CryptHashData,CryptGetHashParam,CryptGetHashParam,CryptDestroyHash,CryptReleaseContext</p>
<p>0041A890 CryptStringToBinaryW,CryptStringToBinaryW</p>
<p>0040E300 CryptBinaryToStringW,CryptBinaryToStringW</p>
<p>网络：（函数在OD 中并没有执行 可能是因为检测到调试器吧？unsure ）</p>
<p>00415C80 WSAStartup WSACleanup HeapCreate GetProcessHeap RtlAllocateHeap FreeAddrInfoW getaddrinfo FreeAddrInfoW RtlFreeHeap</p>
<p>004067A0 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,FindCloseChangeNotification</p>
<p>00407870 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,RevertToSelf,DuplicateTokenEx,CloseHandle,AdjustTokenPrivileges,CloseHandle</p>
<p>0040DB40 GetStartupInfoW,GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,OpenProcess,OpenProcessToken,GetTokenInformation,AllocateAndInitializeSid,EqualSid,OpenProcessToken,RevertToSelf,DuplicateTokenEx,GetTokenInformation,GetTokenInformation,LookupAccountSidW,CreateProcessAsUserW,GetLastError,CloseHandle,CloseHandle,CloseHandle,AdjustTokenPrivileges,CloseHandle</p>
<p>0040BFB0 GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,CloseHandle,</p>
<p>可能的 <strong>反调试，绕检测</strong>：</p>
<p>004021A0 RtlReAllocateHeap,NtDelayExecution,NtDelayExecution,</p>
<p>0041C6E0 NtQuerySstemInformation,NtQueryObject,GetCurrentProcess,NtQuerySystemInformation,OpenProcess,DuplicateHandle,NtQueryObject,NtQueryObject,NtQueryObject,FindCloseChangeNotification,FindCloseChangeNotification（CheckRemoteDebuggerPresent中会调用NtQueryInformationProcess函数）</p>
<p>004116E0 GetProcAddress,NtQueryInformationProcess</p>
<p>00408810 rdtsc 通过统计时间，判断当前环境是否是虚拟</p>
<p>0041B7A0 GetAdaptersInfo,GetAdaptersInfo 获取网络适配器信息</p>
<p>0040B4D0 LdrLoadDll,未公开的内核调用加载dll</p>
<p>大量的延迟函数：</p>
<p>419FD0 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>403643 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>4021D6 NtDelayExecution</p>
<p>408416 Sleep</p>
<p>4171A8 Sleep</p>
<p>4021D6 NtDelayExecution</p>
<p>可能用另一个用户启动线程：</p>
<p>0040DB40 GetStartupInfoW,GetCurrentProcess,OpenProcessToken,LookupPrivilegeValueW,AdjustTokenPrivileges,OpenProcess,OpenProcessToken,GetTokenInformation,AllocateAndInitializeSid,EqualSid,OpenProcessToken,RevertToSelf,DuplicateTokenEx,GetTokenInformation,GetTokenInformation,LookupAccountSidW,CreateProcessAsUserW,GetLastError,CloseHandle,CloseHandle,CloseHandle,AdjustTokenPrivileges,CloseHandle,</p>
<p>动态调用api ：</p>
<p>00405940 LoadLibraryW,GetProcAddress,</p>
<p>程序大致流程和逻辑</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195450215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>设置了一个计时器和消息处理，然后创建了heap，在最下面的if出call 405b30</p>
<p>来到405b30</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195459926.png"></p>
<p>遍历完目录之后进入41c6e0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195507771.png"></p>
<p><img src="https://img-blog.csdnimg.cn/2021031519551368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195518213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>综合上述信息可得v117的结果应该是通过rdtsc测量时间来检测虚拟化</p>
<p>那么从125行到172行一定是具体检测的逻辑，对于具体怎么测量我不是很清楚</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195528177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195556134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>变量v5处再次调用41a120应该是测量前后两次时间差作比较的</p>
<p>接下来又出现3个子调用</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195606502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第一个</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195618417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>4195a0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195625538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>408c30</p>
<p>存在循环和位运算，和上一个函数的入参密码相关</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195632473.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第二个</p>
<p>打开句柄调整token权限</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195640745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>第三个</p>
<p>408810是之前的rdtsc指令，getTickCount上下都存在多个rdtsc</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195648111.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>执行完第三个函数之后的变量v106和v117存在大量相似的计算和比较</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195654271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>V106还额外执行了上图的3个函数，结合逻辑可以得出上述的推测应该是正确的，即通过106和117获取检测虚拟化，同时在第一个调用处尝试隐藏一些信息（4195a0每次进入循环虚拟机就卡死了，不知道具体是在做什么样的加密）</p>
<p>接下来到label58</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195701820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>4148c0</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195707249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195713860.png"></p>
<p>执行到返回</p>
<p>中间又是包含一堆数学计算</p>
<p>然后出现一个入参包括v24，即上面计算结果的一个复制对象句柄函数</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195724185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>进入41a120之后发现又是一堆rdtsc和位运算</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195730252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>跟v69执行同样的操作在下面还有个v72=sub_41a120();</p>
<p>函数结尾处 停止监视通知更改句柄</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195736632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>该函数执行完后if判断通过</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195744915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195750986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>V7后面的操作应该就是判断是否重复执行了，所以该函数分析结束</p>
<p>返回到外层函数</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195758652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>40e940</p>
<p>生成sid 判断sid相等</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195804672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>40e5d0</p>
<p>StrStrlW GetSystemDirectoryW</p>
<p>大致逻辑下图</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195812311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>其中的41A840</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195817977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>返回a1不超过a2的第一个0地址</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195825768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>8460函数里面逻辑比价复杂</p>
<p>总体上应该就是一个获取目录比较确定目录同时包含加密解密的过程</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195832964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195838328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195843623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>在Function 00416870函数主体中一路分析</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195852806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195900682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195907423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>直到此处 <strong>发现第一个网络连接httpAPiCalled</strong>，具体调用时数据如下图</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195919279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><img src="https://img-blog.csdnimg.cn/2021031519593035.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>跟进dword_41f044的函数看到出现了http相关的api</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195936813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>可以推测这个函数所在的循环 会循环请求ip地址列表中的ip，由于没有网络安全方面的工具，无法检测目标ip的安全性</p>
<p>继续调试</p>
<p><img src="https://img-blog.csdnimg.cn/20210315195942671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>这个函数明显发送了请求 并 <strong>且返回了请求失败</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315195951512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p><strong>我在httpcall的地方留了断电 ，F9直接发现了第二个尝试请求的ip</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315200000492.png"></p>
<p><strong>继续F9</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20210315200005929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VkYWhjaQ==,size_16,color_FFFFFF,t_70"></p>
<p>我在realrequest的地方F9至少等待了5次以上，不清楚这个</p>
<p>于是我打开wireshark对目标ip进行监视</p>
<p><img src="https://img-blog.csdnimg.cn/20210315200016488.png"></p>
<p>192.168.88.135 51.77.112.255 TCP 66 49942 → 443 [SYN] Seq=0 Win=64240 Len=0 MSS=1460 WS=256 SACK_PERM=1</p>
<p>关于其连接知道的信息只有这么多了，未知的具体网络行为</p>
]]></content>
      <categories>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>病毒分析</tag>
      </tags>
  </entry>
</search>
